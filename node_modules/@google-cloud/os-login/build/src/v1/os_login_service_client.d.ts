import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions } from 'google-gax';
import * as protos from '../../protos/protos';
/**
 *  Cloud OS Login API
 *
 *  The Cloud OS Login API allows you to manage users and their associated SSH
 *  public keys for logging into virtual machines on Google Cloud Platform.
 * @class
 * @memberof v1
 */
export declare class OsLoginServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    osLoginServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of OsLoginServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new OsLoginServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Create an SSH public key
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique ID for the user in format `users/{user}`.
     * @param {google.cloud.oslogin.common.SshPublicKey} request.sshPublicKey
     *   Required. The SSH public key and expiration time.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.oslogin.common.SshPublicKey|SshPublicKey}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/os_login_service.create_ssh_public_key.js</caption>
     * region_tag:oslogin_v1_generated_OsLoginService_CreateSshPublicKey_async
     */
    createSshPublicKey(request?: protos.google.cloud.oslogin.v1.ICreateSshPublicKeyRequest, options?: CallOptions): Promise<[
        protos.google.cloud.oslogin.common.ISshPublicKey,
        protos.google.cloud.oslogin.v1.ICreateSshPublicKeyRequest | undefined,
        {} | undefined
    ]>;
    createSshPublicKey(request: protos.google.cloud.oslogin.v1.ICreateSshPublicKeyRequest, options: CallOptions, callback: Callback<protos.google.cloud.oslogin.common.ISshPublicKey, protos.google.cloud.oslogin.v1.ICreateSshPublicKeyRequest | null | undefined, {} | null | undefined>): void;
    createSshPublicKey(request: protos.google.cloud.oslogin.v1.ICreateSshPublicKeyRequest, callback: Callback<protos.google.cloud.oslogin.common.ISshPublicKey, protos.google.cloud.oslogin.v1.ICreateSshPublicKeyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes a POSIX account.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. A reference to the POSIX account to update. POSIX accounts are
     *   identified by the project ID they are associated with. A reference to the
     *   POSIX account is in format `users/{user}/projects/{project}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/os_login_service.delete_posix_account.js</caption>
     * region_tag:oslogin_v1_generated_OsLoginService_DeletePosixAccount_async
     */
    deletePosixAccount(request?: protos.google.cloud.oslogin.v1.IDeletePosixAccountRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oslogin.v1.IDeletePosixAccountRequest | undefined,
        {} | undefined
    ]>;
    deletePosixAccount(request: protos.google.cloud.oslogin.v1.IDeletePosixAccountRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.oslogin.v1.IDeletePosixAccountRequest | null | undefined, {} | null | undefined>): void;
    deletePosixAccount(request: protos.google.cloud.oslogin.v1.IDeletePosixAccountRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.oslogin.v1.IDeletePosixAccountRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes an SSH public key.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The fingerprint of the public key to update. Public keys are
     *   identified by their SHA-256 fingerprint. The fingerprint of the public key
     *   is in format `users/{user}/sshPublicKeys/{fingerprint}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/os_login_service.delete_ssh_public_key.js</caption>
     * region_tag:oslogin_v1_generated_OsLoginService_DeleteSshPublicKey_async
     */
    deleteSshPublicKey(request?: protos.google.cloud.oslogin.v1.IDeleteSshPublicKeyRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oslogin.v1.IDeleteSshPublicKeyRequest | undefined,
        {} | undefined
    ]>;
    deleteSshPublicKey(request: protos.google.cloud.oslogin.v1.IDeleteSshPublicKeyRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.oslogin.v1.IDeleteSshPublicKeyRequest | null | undefined, {} | null | undefined>): void;
    deleteSshPublicKey(request: protos.google.cloud.oslogin.v1.IDeleteSshPublicKeyRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.oslogin.v1.IDeleteSshPublicKeyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Retrieves the profile information used for logging in to a virtual machine
     * on Google Compute Engine.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The unique ID for the user in format `users/{user}`.
     * @param {string} request.projectId
     *   The project ID of the Google Cloud Platform project.
     * @param {string} request.systemId
     *   A system ID for filtering the results of the request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.oslogin.v1.LoginProfile|LoginProfile}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/os_login_service.get_login_profile.js</caption>
     * region_tag:oslogin_v1_generated_OsLoginService_GetLoginProfile_async
     */
    getLoginProfile(request?: protos.google.cloud.oslogin.v1.IGetLoginProfileRequest, options?: CallOptions): Promise<[
        protos.google.cloud.oslogin.v1.ILoginProfile,
        protos.google.cloud.oslogin.v1.IGetLoginProfileRequest | undefined,
        {} | undefined
    ]>;
    getLoginProfile(request: protos.google.cloud.oslogin.v1.IGetLoginProfileRequest, options: CallOptions, callback: Callback<protos.google.cloud.oslogin.v1.ILoginProfile, protos.google.cloud.oslogin.v1.IGetLoginProfileRequest | null | undefined, {} | null | undefined>): void;
    getLoginProfile(request: protos.google.cloud.oslogin.v1.IGetLoginProfileRequest, callback: Callback<protos.google.cloud.oslogin.v1.ILoginProfile, protos.google.cloud.oslogin.v1.IGetLoginProfileRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Retrieves an SSH public key.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The fingerprint of the public key to retrieve. Public keys are
     *   identified by their SHA-256 fingerprint. The fingerprint of the public key
     *   is in format `users/{user}/sshPublicKeys/{fingerprint}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.oslogin.common.SshPublicKey|SshPublicKey}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/os_login_service.get_ssh_public_key.js</caption>
     * region_tag:oslogin_v1_generated_OsLoginService_GetSshPublicKey_async
     */
    getSshPublicKey(request?: protos.google.cloud.oslogin.v1.IGetSshPublicKeyRequest, options?: CallOptions): Promise<[
        protos.google.cloud.oslogin.common.ISshPublicKey,
        protos.google.cloud.oslogin.v1.IGetSshPublicKeyRequest | undefined,
        {} | undefined
    ]>;
    getSshPublicKey(request: protos.google.cloud.oslogin.v1.IGetSshPublicKeyRequest, options: CallOptions, callback: Callback<protos.google.cloud.oslogin.common.ISshPublicKey, protos.google.cloud.oslogin.v1.IGetSshPublicKeyRequest | null | undefined, {} | null | undefined>): void;
    getSshPublicKey(request: protos.google.cloud.oslogin.v1.IGetSshPublicKeyRequest, callback: Callback<protos.google.cloud.oslogin.common.ISshPublicKey, protos.google.cloud.oslogin.v1.IGetSshPublicKeyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Adds an SSH public key and returns the profile information. Default POSIX
     * account information is set when no username and UID exist as part of the
     * login profile.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique ID for the user in format `users/{user}`.
     * @param {google.cloud.oslogin.common.SshPublicKey} [request.sshPublicKey]
     *   Optional. The SSH public key and expiration time.
     * @param {string} request.projectId
     *   The project ID of the Google Cloud Platform project.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.oslogin.v1.ImportSshPublicKeyResponse|ImportSshPublicKeyResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/os_login_service.import_ssh_public_key.js</caption>
     * region_tag:oslogin_v1_generated_OsLoginService_ImportSshPublicKey_async
     */
    importSshPublicKey(request?: protos.google.cloud.oslogin.v1.IImportSshPublicKeyRequest, options?: CallOptions): Promise<[
        protos.google.cloud.oslogin.v1.IImportSshPublicKeyResponse,
        protos.google.cloud.oslogin.v1.IImportSshPublicKeyRequest | undefined,
        {} | undefined
    ]>;
    importSshPublicKey(request: protos.google.cloud.oslogin.v1.IImportSshPublicKeyRequest, options: CallOptions, callback: Callback<protos.google.cloud.oslogin.v1.IImportSshPublicKeyResponse, protos.google.cloud.oslogin.v1.IImportSshPublicKeyRequest | null | undefined, {} | null | undefined>): void;
    importSshPublicKey(request: protos.google.cloud.oslogin.v1.IImportSshPublicKeyRequest, callback: Callback<protos.google.cloud.oslogin.v1.IImportSshPublicKeyResponse, protos.google.cloud.oslogin.v1.IImportSshPublicKeyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates an SSH public key and returns the profile information. This method
     * supports patch semantics.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The fingerprint of the public key to update. Public keys are
     *   identified by their SHA-256 fingerprint. The fingerprint of the public key
     *   is in format `users/{user}/sshPublicKeys/{fingerprint}`.
     * @param {google.cloud.oslogin.common.SshPublicKey} request.sshPublicKey
     *   Required. The SSH public key and expiration time.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Mask to control which fields get updated. Updates all if not present.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.oslogin.common.SshPublicKey|SshPublicKey}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/os_login_service.update_ssh_public_key.js</caption>
     * region_tag:oslogin_v1_generated_OsLoginService_UpdateSshPublicKey_async
     */
    updateSshPublicKey(request?: protos.google.cloud.oslogin.v1.IUpdateSshPublicKeyRequest, options?: CallOptions): Promise<[
        protos.google.cloud.oslogin.common.ISshPublicKey,
        protos.google.cloud.oslogin.v1.IUpdateSshPublicKeyRequest | undefined,
        {} | undefined
    ]>;
    updateSshPublicKey(request: protos.google.cloud.oslogin.v1.IUpdateSshPublicKeyRequest, options: CallOptions, callback: Callback<protos.google.cloud.oslogin.common.ISshPublicKey, protos.google.cloud.oslogin.v1.IUpdateSshPublicKeyRequest | null | undefined, {} | null | undefined>): void;
    updateSshPublicKey(request: protos.google.cloud.oslogin.v1.IUpdateSshPublicKeyRequest, callback: Callback<protos.google.cloud.oslogin.common.ISshPublicKey, protos.google.cloud.oslogin.v1.IUpdateSshPublicKeyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Return a fully-qualified posixAccount resource name string.
     *
     * @param {string} user
     * @param {string} project
     * @returns {string} Resource name string.
     */
    posixAccountPath(user: string, project: string): string;
    /**
     * Parse the user from PosixAccount resource.
     *
     * @param {string} posixAccountName
     *   A fully-qualified path representing PosixAccount resource.
     * @returns {string} A string representing the user.
     */
    matchUserFromPosixAccountName(posixAccountName: string): string | number;
    /**
     * Parse the project from PosixAccount resource.
     *
     * @param {string} posixAccountName
     *   A fully-qualified path representing PosixAccount resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPosixAccountName(posixAccountName: string): string | number;
    /**
     * Return a fully-qualified sshPublicKey resource name string.
     *
     * @param {string} user
     * @param {string} fingerprint
     * @returns {string} Resource name string.
     */
    sshPublicKeyPath(user: string, fingerprint: string): string;
    /**
     * Parse the user from SshPublicKey resource.
     *
     * @param {string} sshPublicKeyName
     *   A fully-qualified path representing SshPublicKey resource.
     * @returns {string} A string representing the user.
     */
    matchUserFromSshPublicKeyName(sshPublicKeyName: string): string | number;
    /**
     * Parse the fingerprint from SshPublicKey resource.
     *
     * @param {string} sshPublicKeyName
     *   A fully-qualified path representing SshPublicKey resource.
     * @returns {string} A string representing the fingerprint.
     */
    matchFingerprintFromSshPublicKeyName(sshPublicKeyName: string): string | number;
    /**
     * Return a fully-qualified user resource name string.
     *
     * @param {string} user
     * @returns {string} Resource name string.
     */
    userPath(user: string): string;
    /**
     * Parse the user from User resource.
     *
     * @param {string} userName
     *   A fully-qualified path representing User resource.
     * @returns {string} A string representing the user.
     */
    matchUserFromUserName(userName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
