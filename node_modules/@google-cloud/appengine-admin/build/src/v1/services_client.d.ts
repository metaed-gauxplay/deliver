/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Manages services of an application.
 * @class
 * @memberof v1
 */
export declare class ServicesClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    servicesStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of ServicesClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ServicesClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets the current configuration of the specified service.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Name of the resource requested. Example: `apps/myapp/services/default`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.appengine.v1.Service|Service}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/services.get_service.js</caption>
     * region_tag:appengine_v1_generated_Services_GetService_async
     */
    getService(request?: protos.google.appengine.v1.IGetServiceRequest, options?: CallOptions): Promise<[
        protos.google.appengine.v1.IService,
        protos.google.appengine.v1.IGetServiceRequest | undefined,
        {} | undefined
    ]>;
    getService(request: protos.google.appengine.v1.IGetServiceRequest, options: CallOptions, callback: Callback<protos.google.appengine.v1.IService, protos.google.appengine.v1.IGetServiceRequest | null | undefined, {} | null | undefined>): void;
    getService(request: protos.google.appengine.v1.IGetServiceRequest, callback: Callback<protos.google.appengine.v1.IService, protos.google.appengine.v1.IGetServiceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates the configuration of the specified service.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Name of the resource to update. Example: `apps/myapp/services/default`.
     * @param {google.appengine.v1.Service} request.service
     *   A Service resource containing the updated service. Only fields set in the
     *   field mask will be updated.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Standard field mask for the set of fields to be updated.
     * @param {boolean} request.migrateTraffic
     *   Set to `true` to gradually shift traffic to one or more versions that you
     *   specify. By default, traffic is shifted immediately.
     *   For gradual traffic migration, the target versions
     *   must be located within instances that are configured for both
     *   [warmup requests](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#InboundServiceType)
     *   and
     *   [automatic scaling](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#AutomaticScaling).
     *   You must specify the
     *   [`shardBy`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services#ShardBy)
     *   field in the Service resource. Gradual traffic migration is not
     *   supported in the App Engine flexible environment. For examples, see
     *   [Migrating and Splitting Traffic](https://cloud.google.com/appengine/docs/admin-api/migrating-splitting-traffic).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/services.update_service.js</caption>
     * region_tag:appengine_v1_generated_Services_UpdateService_async
     */
    updateService(request?: protos.google.appengine.v1.IUpdateServiceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.appengine.v1.IService, protos.google.appengine.v1.IOperationMetadataV1>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateService(request: protos.google.appengine.v1.IUpdateServiceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.appengine.v1.IService, protos.google.appengine.v1.IOperationMetadataV1>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateService(request: protos.google.appengine.v1.IUpdateServiceRequest, callback: Callback<LROperation<protos.google.appengine.v1.IService, protos.google.appengine.v1.IOperationMetadataV1>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateService()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/services.update_service.js</caption>
     * region_tag:appengine_v1_generated_Services_UpdateService_async
     */
    checkUpdateServiceProgress(name: string): Promise<LROperation<protos.google.appengine.v1.Service, protos.google.appengine.v1.OperationMetadataV1>>;
    /**
     * Deletes the specified service and all enclosed versions.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Name of the resource requested. Example: `apps/myapp/services/default`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/services.delete_service.js</caption>
     * region_tag:appengine_v1_generated_Services_DeleteService_async
     */
    deleteService(request?: protos.google.appengine.v1.IDeleteServiceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.appengine.v1.IOperationMetadataV1>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteService(request: protos.google.appengine.v1.IDeleteServiceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.appengine.v1.IOperationMetadataV1>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteService(request: protos.google.appengine.v1.IDeleteServiceRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.appengine.v1.IOperationMetadataV1>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteService()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/services.delete_service.js</caption>
     * region_tag:appengine_v1_generated_Services_DeleteService_async
     */
    checkDeleteServiceProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.appengine.v1.OperationMetadataV1>>;
    /**
     * Lists all the services in the application.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Name of the parent Application resource. Example: `apps/myapp`.
     * @param {number} request.pageSize
     *   Maximum results to return per page.
     * @param {string} request.pageToken
     *   Continuation token for fetching the next page of results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.appengine.v1.Service|Service}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listServicesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listServices(request?: protos.google.appengine.v1.IListServicesRequest, options?: CallOptions): Promise<[
        protos.google.appengine.v1.IService[],
        protos.google.appengine.v1.IListServicesRequest | null,
        protos.google.appengine.v1.IListServicesResponse
    ]>;
    listServices(request: protos.google.appengine.v1.IListServicesRequest, options: CallOptions, callback: PaginationCallback<protos.google.appengine.v1.IListServicesRequest, protos.google.appengine.v1.IListServicesResponse | null | undefined, protos.google.appengine.v1.IService>): void;
    listServices(request: protos.google.appengine.v1.IListServicesRequest, callback: PaginationCallback<protos.google.appengine.v1.IListServicesRequest, protos.google.appengine.v1.IListServicesResponse | null | undefined, protos.google.appengine.v1.IService>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Name of the parent Application resource. Example: `apps/myapp`.
     * @param {number} request.pageSize
     *   Maximum results to return per page.
     * @param {string} request.pageToken
     *   Continuation token for fetching the next page of results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.appengine.v1.Service|Service} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listServicesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listServicesStream(request?: protos.google.appengine.v1.IListServicesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listServices`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Name of the parent Application resource. Example: `apps/myapp`.
     * @param {number} request.pageSize
     *   Maximum results to return per page.
     * @param {string} request.pageToken
     *   Continuation token for fetching the next page of results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.appengine.v1.Service|Service}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/services.list_services.js</caption>
     * region_tag:appengine_v1_generated_Services_ListServices_async
     */
    listServicesAsync(request?: protos.google.appengine.v1.IListServicesRequest, options?: CallOptions): AsyncIterable<protos.google.appengine.v1.IService>;
    /**
     * Return a fully-qualified instance resource name string.
     *
     * @param {string} app
     * @param {string} service
     * @param {string} version
     * @param {string} instance
     * @returns {string} Resource name string.
     */
    instancePath(app: string, service: string, version: string, instance: string): string;
    /**
     * Parse the app from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the app.
     */
    matchAppFromInstanceName(instanceName: string): string | number;
    /**
     * Parse the service from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromInstanceName(instanceName: string): string | number;
    /**
     * Parse the version from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the version.
     */
    matchVersionFromInstanceName(instanceName: string): string | number;
    /**
     * Parse the instance from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromInstanceName(instanceName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
