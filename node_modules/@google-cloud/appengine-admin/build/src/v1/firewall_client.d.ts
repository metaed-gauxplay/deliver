/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Firewall resources are used to define a collection of access control rules
 *  for an Application. Each rule is defined with a position which specifies
 *  the rule's order in the sequence of rules, an IP range to be matched against
 *  requests, and an action to take upon matching requests.
 *
 *  Every request is evaluated against the Firewall rules in priority order.
 *  Processesing stops at the first rule which matches the request's IP address.
 *  A final rule always specifies an action that applies to all remaining
 *  IP addresses. The default final rule for a newly-created application will be
 *  set to "allow" if not otherwise specified by the user.
 * @class
 * @memberof v1
 */
export declare class FirewallClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    firewallStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of FirewallClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new FirewallClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Replaces the entire firewall ruleset in one bulk operation. This overrides
     * and replaces the rules of an existing firewall with the new rules.
     *
     * If the final rule does not match traffic with the '*' wildcard IP range,
     * then an "allow all" rule is explicitly added to the end of the list.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Name of the Firewall collection to set.
     *   Example: `apps/myapp/firewall/ingressRules`.
     * @param {number[]} request.ingressRules
     *   A list of FirewallRules to replace the existing set.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.appengine.v1.BatchUpdateIngressRulesResponse|BatchUpdateIngressRulesResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/firewall.batch_update_ingress_rules.js</caption>
     * region_tag:appengine_v1_generated_Firewall_BatchUpdateIngressRules_async
     */
    batchUpdateIngressRules(request?: protos.google.appengine.v1.IBatchUpdateIngressRulesRequest, options?: CallOptions): Promise<[
        protos.google.appengine.v1.IBatchUpdateIngressRulesResponse,
        protos.google.appengine.v1.IBatchUpdateIngressRulesRequest | undefined,
        {} | undefined
    ]>;
    batchUpdateIngressRules(request: protos.google.appengine.v1.IBatchUpdateIngressRulesRequest, options: CallOptions, callback: Callback<protos.google.appengine.v1.IBatchUpdateIngressRulesResponse, protos.google.appengine.v1.IBatchUpdateIngressRulesRequest | null | undefined, {} | null | undefined>): void;
    batchUpdateIngressRules(request: protos.google.appengine.v1.IBatchUpdateIngressRulesRequest, callback: Callback<protos.google.appengine.v1.IBatchUpdateIngressRulesResponse, protos.google.appengine.v1.IBatchUpdateIngressRulesRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a firewall rule for the application.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Name of the parent Firewall collection in which to create a new rule.
     *   Example: `apps/myapp/firewall/ingressRules`.
     * @param {google.appengine.v1.FirewallRule} request.rule
     *   A FirewallRule containing the new resource.
     *
     *   The user may optionally provide a position at which the new rule will be
     *   placed. The positions define a sequential list starting at 1. If a rule
     *   already exists at the given position, rules greater than the provided
     *   position will be moved forward by one.
     *
     *   If no position is provided, the server will place the rule as the second to
     *   last rule in the sequence before the required default allow-all or deny-all
     *   rule.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.appengine.v1.FirewallRule|FirewallRule}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/firewall.create_ingress_rule.js</caption>
     * region_tag:appengine_v1_generated_Firewall_CreateIngressRule_async
     */
    createIngressRule(request?: protos.google.appengine.v1.ICreateIngressRuleRequest, options?: CallOptions): Promise<[
        protos.google.appengine.v1.IFirewallRule,
        protos.google.appengine.v1.ICreateIngressRuleRequest | undefined,
        {} | undefined
    ]>;
    createIngressRule(request: protos.google.appengine.v1.ICreateIngressRuleRequest, options: CallOptions, callback: Callback<protos.google.appengine.v1.IFirewallRule, protos.google.appengine.v1.ICreateIngressRuleRequest | null | undefined, {} | null | undefined>): void;
    createIngressRule(request: protos.google.appengine.v1.ICreateIngressRuleRequest, callback: Callback<protos.google.appengine.v1.IFirewallRule, protos.google.appengine.v1.ICreateIngressRuleRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the specified firewall rule.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Name of the Firewall resource to retrieve.
     *   Example: `apps/myapp/firewall/ingressRules/100`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.appengine.v1.FirewallRule|FirewallRule}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/firewall.get_ingress_rule.js</caption>
     * region_tag:appengine_v1_generated_Firewall_GetIngressRule_async
     */
    getIngressRule(request?: protos.google.appengine.v1.IGetIngressRuleRequest, options?: CallOptions): Promise<[
        protos.google.appengine.v1.IFirewallRule,
        protos.google.appengine.v1.IGetIngressRuleRequest | undefined,
        {} | undefined
    ]>;
    getIngressRule(request: protos.google.appengine.v1.IGetIngressRuleRequest, options: CallOptions, callback: Callback<protos.google.appengine.v1.IFirewallRule, protos.google.appengine.v1.IGetIngressRuleRequest | null | undefined, {} | null | undefined>): void;
    getIngressRule(request: protos.google.appengine.v1.IGetIngressRuleRequest, callback: Callback<protos.google.appengine.v1.IFirewallRule, protos.google.appengine.v1.IGetIngressRuleRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates the specified firewall rule.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Name of the Firewall resource to update.
     *   Example: `apps/myapp/firewall/ingressRules/100`.
     * @param {google.appengine.v1.FirewallRule} request.rule
     *   A FirewallRule containing the updated resource
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Standard field mask for the set of fields to be updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.appengine.v1.FirewallRule|FirewallRule}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/firewall.update_ingress_rule.js</caption>
     * region_tag:appengine_v1_generated_Firewall_UpdateIngressRule_async
     */
    updateIngressRule(request?: protos.google.appengine.v1.IUpdateIngressRuleRequest, options?: CallOptions): Promise<[
        protos.google.appengine.v1.IFirewallRule,
        protos.google.appengine.v1.IUpdateIngressRuleRequest | undefined,
        {} | undefined
    ]>;
    updateIngressRule(request: protos.google.appengine.v1.IUpdateIngressRuleRequest, options: CallOptions, callback: Callback<protos.google.appengine.v1.IFirewallRule, protos.google.appengine.v1.IUpdateIngressRuleRequest | null | undefined, {} | null | undefined>): void;
    updateIngressRule(request: protos.google.appengine.v1.IUpdateIngressRuleRequest, callback: Callback<protos.google.appengine.v1.IFirewallRule, protos.google.appengine.v1.IUpdateIngressRuleRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes the specified firewall rule.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Name of the Firewall resource to delete.
     *   Example: `apps/myapp/firewall/ingressRules/100`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/firewall.delete_ingress_rule.js</caption>
     * region_tag:appengine_v1_generated_Firewall_DeleteIngressRule_async
     */
    deleteIngressRule(request?: protos.google.appengine.v1.IDeleteIngressRuleRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.appengine.v1.IDeleteIngressRuleRequest | undefined,
        {} | undefined
    ]>;
    deleteIngressRule(request: protos.google.appengine.v1.IDeleteIngressRuleRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.appengine.v1.IDeleteIngressRuleRequest | null | undefined, {} | null | undefined>): void;
    deleteIngressRule(request: protos.google.appengine.v1.IDeleteIngressRuleRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.appengine.v1.IDeleteIngressRuleRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Lists the firewall rules of an application.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Name of the Firewall collection to retrieve.
     *   Example: `apps/myapp/firewall/ingressRules`.
     * @param {number} request.pageSize
     *   Maximum results to return per page.
     * @param {string} request.pageToken
     *   Continuation token for fetching the next page of results.
     * @param {string} request.matchingAddress
     *   A valid IP Address. If set, only rules matching this address will be
     *   returned. The first returned rule will be the rule that fires on requests
     *   from this IP.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.appengine.v1.FirewallRule|FirewallRule}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listIngressRulesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listIngressRules(request?: protos.google.appengine.v1.IListIngressRulesRequest, options?: CallOptions): Promise<[
        protos.google.appengine.v1.IFirewallRule[],
        protos.google.appengine.v1.IListIngressRulesRequest | null,
        protos.google.appengine.v1.IListIngressRulesResponse
    ]>;
    listIngressRules(request: protos.google.appengine.v1.IListIngressRulesRequest, options: CallOptions, callback: PaginationCallback<protos.google.appengine.v1.IListIngressRulesRequest, protos.google.appengine.v1.IListIngressRulesResponse | null | undefined, protos.google.appengine.v1.IFirewallRule>): void;
    listIngressRules(request: protos.google.appengine.v1.IListIngressRulesRequest, callback: PaginationCallback<protos.google.appengine.v1.IListIngressRulesRequest, protos.google.appengine.v1.IListIngressRulesResponse | null | undefined, protos.google.appengine.v1.IFirewallRule>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Name of the Firewall collection to retrieve.
     *   Example: `apps/myapp/firewall/ingressRules`.
     * @param {number} request.pageSize
     *   Maximum results to return per page.
     * @param {string} request.pageToken
     *   Continuation token for fetching the next page of results.
     * @param {string} request.matchingAddress
     *   A valid IP Address. If set, only rules matching this address will be
     *   returned. The first returned rule will be the rule that fires on requests
     *   from this IP.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.appengine.v1.FirewallRule|FirewallRule} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listIngressRulesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listIngressRulesStream(request?: protos.google.appengine.v1.IListIngressRulesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listIngressRules`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Name of the Firewall collection to retrieve.
     *   Example: `apps/myapp/firewall/ingressRules`.
     * @param {number} request.pageSize
     *   Maximum results to return per page.
     * @param {string} request.pageToken
     *   Continuation token for fetching the next page of results.
     * @param {string} request.matchingAddress
     *   A valid IP Address. If set, only rules matching this address will be
     *   returned. The first returned rule will be the rule that fires on requests
     *   from this IP.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.appengine.v1.FirewallRule|FirewallRule}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/firewall.list_ingress_rules.js</caption>
     * region_tag:appengine_v1_generated_Firewall_ListIngressRules_async
     */
    listIngressRulesAsync(request?: protos.google.appengine.v1.IListIngressRulesRequest, options?: CallOptions): AsyncIterable<protos.google.appengine.v1.IFirewallRule>;
    /**
     * Return a fully-qualified instance resource name string.
     *
     * @param {string} app
     * @param {string} service
     * @param {string} version
     * @param {string} instance
     * @returns {string} Resource name string.
     */
    instancePath(app: string, service: string, version: string, instance: string): string;
    /**
     * Parse the app from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the app.
     */
    matchAppFromInstanceName(instanceName: string): string | number;
    /**
     * Parse the service from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromInstanceName(instanceName: string): string | number;
    /**
     * Parse the version from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the version.
     */
    matchVersionFromInstanceName(instanceName: string): string | number;
    /**
     * Parse the instance from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromInstanceName(instanceName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
