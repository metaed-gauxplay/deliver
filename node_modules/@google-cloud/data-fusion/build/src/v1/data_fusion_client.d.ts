/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Service for creating and managing Data Fusion instances.
 *  Data Fusion enables ETL developers to build code-free, data integration
 *  pipelines via a point-and-click UI.
 * @class
 * @memberof v1
 */
export declare class DataFusionClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    dataFusionStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of DataFusionClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new DataFusionClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets details of a single Data Fusion instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The instance resource name in the format
     *   projects/{project}/locations/{location}/instances/{instance}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.datafusion.v1.Instance|Instance}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_fusion.get_instance.js</caption>
     * region_tag:datafusion_v1_generated_DataFusion_GetInstance_async
     */
    getInstance(request?: protos.google.cloud.datafusion.v1.IGetInstanceRequest, options?: CallOptions): Promise<[
        protos.google.cloud.datafusion.v1.IInstance,
        protos.google.cloud.datafusion.v1.IGetInstanceRequest | undefined,
        {} | undefined
    ]>;
    getInstance(request: protos.google.cloud.datafusion.v1.IGetInstanceRequest, options: CallOptions, callback: Callback<protos.google.cloud.datafusion.v1.IInstance, protos.google.cloud.datafusion.v1.IGetInstanceRequest | null | undefined, {} | null | undefined>): void;
    getInstance(request: protos.google.cloud.datafusion.v1.IGetInstanceRequest, callback: Callback<protos.google.cloud.datafusion.v1.IInstance, protos.google.cloud.datafusion.v1.IGetInstanceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new Data Fusion instance in the specified project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance's project and location in the format
     *   projects/{project}/locations/{location}.
     * @param {string} request.instanceId
     *   Required. The name of the instance to create.
     * @param {google.cloud.datafusion.v1.Instance} request.instance
     *   An instance resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_fusion.create_instance.js</caption>
     * region_tag:datafusion_v1_generated_DataFusion_CreateInstance_async
     */
    createInstance(request?: protos.google.cloud.datafusion.v1.ICreateInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.datafusion.v1.IInstance, protos.google.cloud.datafusion.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createInstance(request: protos.google.cloud.datafusion.v1.ICreateInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.datafusion.v1.IInstance, protos.google.cloud.datafusion.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createInstance(request: protos.google.cloud.datafusion.v1.ICreateInstanceRequest, callback: Callback<LROperation<protos.google.cloud.datafusion.v1.IInstance, protos.google.cloud.datafusion.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_fusion.create_instance.js</caption>
     * region_tag:datafusion_v1_generated_DataFusion_CreateInstance_async
     */
    checkCreateInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.datafusion.v1.Instance, protos.google.cloud.datafusion.v1.OperationMetadata>>;
    /**
     * Deletes a single Date Fusion instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The instance resource name in the format
     *   projects/{project}/locations/{location}/instances/{instance}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_fusion.delete_instance.js</caption>
     * region_tag:datafusion_v1_generated_DataFusion_DeleteInstance_async
     */
    deleteInstance(request?: protos.google.cloud.datafusion.v1.IDeleteInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.datafusion.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteInstance(request: protos.google.cloud.datafusion.v1.IDeleteInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.datafusion.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteInstance(request: protos.google.cloud.datafusion.v1.IDeleteInstanceRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.datafusion.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_fusion.delete_instance.js</caption>
     * region_tag:datafusion_v1_generated_DataFusion_DeleteInstance_async
     */
    checkDeleteInstanceProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.datafusion.v1.OperationMetadata>>;
    /**
     * Updates a single Data Fusion instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.datafusion.v1.Instance} request.instance
     *   Required. The instance resource that replaces the resource on the server. Currently,
     *   Data Fusion only allows replacing labels, options, and stack driver
     *   settings. All other fields will be ignored.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Field mask is used to specify the fields that the update will overwrite
     *   in an instance resource. The fields specified in the update_mask are
     *   relative to the resource, not the full request.
     *   A field will be overwritten if it is in the mask.
     *   If the user does not provide a mask, all the supported fields (labels,
     *   options, and version currently) will be overwritten.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_fusion.update_instance.js</caption>
     * region_tag:datafusion_v1_generated_DataFusion_UpdateInstance_async
     */
    updateInstance(request?: protos.google.cloud.datafusion.v1.IUpdateInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.datafusion.v1.IInstance, protos.google.cloud.datafusion.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateInstance(request: protos.google.cloud.datafusion.v1.IUpdateInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.datafusion.v1.IInstance, protos.google.cloud.datafusion.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateInstance(request: protos.google.cloud.datafusion.v1.IUpdateInstanceRequest, callback: Callback<LROperation<protos.google.cloud.datafusion.v1.IInstance, protos.google.cloud.datafusion.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_fusion.update_instance.js</caption>
     * region_tag:datafusion_v1_generated_DataFusion_UpdateInstance_async
     */
    checkUpdateInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.datafusion.v1.Instance, protos.google.cloud.datafusion.v1.OperationMetadata>>;
    /**
     * Restart a single Data Fusion instance.
     * At the end of an operation instance is fully restarted.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the Data Fusion instance which need to be restarted in the form of
     *   projects/{project}/locations/{location}/instances/{instance}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_fusion.restart_instance.js</caption>
     * region_tag:datafusion_v1_generated_DataFusion_RestartInstance_async
     */
    restartInstance(request?: protos.google.cloud.datafusion.v1.IRestartInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.datafusion.v1.IInstance, protos.google.cloud.datafusion.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    restartInstance(request: protos.google.cloud.datafusion.v1.IRestartInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.datafusion.v1.IInstance, protos.google.cloud.datafusion.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    restartInstance(request: protos.google.cloud.datafusion.v1.IRestartInstanceRequest, callback: Callback<LROperation<protos.google.cloud.datafusion.v1.IInstance, protos.google.cloud.datafusion.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `restartInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_fusion.restart_instance.js</caption>
     * region_tag:datafusion_v1_generated_DataFusion_RestartInstance_async
     */
    checkRestartInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.datafusion.v1.Instance, protos.google.cloud.datafusion.v1.OperationMetadata>>;
    /**
     * Lists possible versions for Data Fusion instances in the specified project
     * and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve instance information
     *   in the format projects/{project}/locations/{location}.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {boolean} request.latestPatchOnly
     *   Whether or not to return the latest patch of every available minor version.
     *   If true, only the latest patch will be returned. Ex. if allowed versions is
     *   [6.1.1, 6.1.2, 6.2.0] then response will be [6.1.2, 6.2.0]
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.datafusion.v1.Version|Version}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listAvailableVersionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAvailableVersions(request?: protos.google.cloud.datafusion.v1.IListAvailableVersionsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.datafusion.v1.IVersion[],
        protos.google.cloud.datafusion.v1.IListAvailableVersionsRequest | null,
        protos.google.cloud.datafusion.v1.IListAvailableVersionsResponse
    ]>;
    listAvailableVersions(request: protos.google.cloud.datafusion.v1.IListAvailableVersionsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.datafusion.v1.IListAvailableVersionsRequest, protos.google.cloud.datafusion.v1.IListAvailableVersionsResponse | null | undefined, protos.google.cloud.datafusion.v1.IVersion>): void;
    listAvailableVersions(request: protos.google.cloud.datafusion.v1.IListAvailableVersionsRequest, callback: PaginationCallback<protos.google.cloud.datafusion.v1.IListAvailableVersionsRequest, protos.google.cloud.datafusion.v1.IListAvailableVersionsResponse | null | undefined, protos.google.cloud.datafusion.v1.IVersion>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve instance information
     *   in the format projects/{project}/locations/{location}.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {boolean} request.latestPatchOnly
     *   Whether or not to return the latest patch of every available minor version.
     *   If true, only the latest patch will be returned. Ex. if allowed versions is
     *   [6.1.1, 6.1.2, 6.2.0] then response will be [6.1.2, 6.2.0]
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.datafusion.v1.Version|Version} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAvailableVersionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAvailableVersionsStream(request?: protos.google.cloud.datafusion.v1.IListAvailableVersionsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listAvailableVersions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve instance information
     *   in the format projects/{project}/locations/{location}.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {boolean} request.latestPatchOnly
     *   Whether or not to return the latest patch of every available minor version.
     *   If true, only the latest patch will be returned. Ex. if allowed versions is
     *   [6.1.1, 6.1.2, 6.2.0] then response will be [6.1.2, 6.2.0]
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.datafusion.v1.Version|Version}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_fusion.list_available_versions.js</caption>
     * region_tag:datafusion_v1_generated_DataFusion_ListAvailableVersions_async
     */
    listAvailableVersionsAsync(request?: protos.google.cloud.datafusion.v1.IListAvailableVersionsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.datafusion.v1.IVersion>;
    /**
     * Lists Data Fusion instances in the specified project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve instance information
     *   in the format projects/{project}/locations/{location}. If the location is
     *   specified as '-' (wildcard), then all regions available to the project
     *   are queried, and the results are aggregated.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.filter
     *   List filter.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc",  or "" (unsorted).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.datafusion.v1.Instance|Instance}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listInstancesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listInstances(request?: protos.google.cloud.datafusion.v1.IListInstancesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.datafusion.v1.IInstance[],
        protos.google.cloud.datafusion.v1.IListInstancesRequest | null,
        protos.google.cloud.datafusion.v1.IListInstancesResponse
    ]>;
    listInstances(request: protos.google.cloud.datafusion.v1.IListInstancesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.datafusion.v1.IListInstancesRequest, protos.google.cloud.datafusion.v1.IListInstancesResponse | null | undefined, protos.google.cloud.datafusion.v1.IInstance>): void;
    listInstances(request: protos.google.cloud.datafusion.v1.IListInstancesRequest, callback: PaginationCallback<protos.google.cloud.datafusion.v1.IListInstancesRequest, protos.google.cloud.datafusion.v1.IListInstancesResponse | null | undefined, protos.google.cloud.datafusion.v1.IInstance>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve instance information
     *   in the format projects/{project}/locations/{location}. If the location is
     *   specified as '-' (wildcard), then all regions available to the project
     *   are queried, and the results are aggregated.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.filter
     *   List filter.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc",  or "" (unsorted).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.datafusion.v1.Instance|Instance} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listInstancesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listInstancesStream(request?: protos.google.cloud.datafusion.v1.IListInstancesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listInstances`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve instance information
     *   in the format projects/{project}/locations/{location}. If the location is
     *   specified as '-' (wildcard), then all regions available to the project
     *   are queried, and the results are aggregated.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.filter
     *   List filter.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc",  or "" (unsorted).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.datafusion.v1.Instance|Instance}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_fusion.list_instances.js</caption>
     * region_tag:datafusion_v1_generated_DataFusion_ListInstances_async
     */
    listInstancesAsync(request?: protos.google.cloud.datafusion.v1.IListInstancesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.datafusion.v1.IInstance>;
    /**
     * Return a fully-qualified cryptoKey resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} key_ring
     * @param {string} crypto_key
     * @returns {string} Resource name string.
     */
    cryptoKeyPath(project: string, location: string, keyRing: string, cryptoKey: string): string;
    /**
     * Parse the project from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCryptoKeyName(cryptoKeyName: string): string | number;
    /**
     * Parse the location from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCryptoKeyName(cryptoKeyName: string): string | number;
    /**
     * Parse the key_ring from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the key_ring.
     */
    matchKeyRingFromCryptoKeyName(cryptoKeyName: string): string | number;
    /**
     * Parse the crypto_key from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the crypto_key.
     */
    matchCryptoKeyFromCryptoKeyName(cryptoKeyName: string): string | number;
    /**
     * Return a fully-qualified instance resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} instance
     * @returns {string} Resource name string.
     */
    instancePath(project: string, location: string, instance: string): string;
    /**
     * Parse the project from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromInstanceName(instanceName: string): string | number;
    /**
     * Parse the location from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromInstanceName(instanceName: string): string | number;
    /**
     * Parse the instance from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromInstanceName(instanceName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
