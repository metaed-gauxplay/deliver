"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataServiceClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/metadata_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./metadata_service_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Metadata service manages metadata resources such as tables, filesets and
 *  partitions.
 * @class
 * @memberof v1
 */
class MetadataServiceClient {
    /**
     * Construct an instance of MetadataServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new MetadataServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            assetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/assets/{asset}'),
            contentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/content/{content}'),
            dataAttributePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataTaxonomies/{dataTaxonomy}/attributes/{data_attribute_id}'),
            dataAttributeBindingPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataAttributeBindings/{data_attribute_binding_id}'),
            dataScanPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataScans/{dataScan}'),
            dataScanJobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataScans/{dataScan}/jobs/{job}'),
            dataTaxonomyPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataTaxonomies/{data_taxonomy_id}'),
            entityPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/entities/{entity}'),
            environmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/environments/{environment}'),
            jobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/tasks/{task}/jobs/{job}'),
            lakePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}'),
            partitionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/entities/{entity}/partitions/{partition}'),
            projectLocationLakeActionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/actions/{action}'),
            projectLocationLakeZoneActionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/actions/{action}'),
            projectLocationLakeZoneAssetActionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/assets/{asset}/actions/{action}'),
            sessionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/environments/{environment}/sessions/{session}'),
            taskPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/tasks/{task}'),
            zonePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listEntities: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'entities'),
            listPartitions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'partitions'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.cloud.location.Locations.GetLocation',
                    get: '/v1/{name=projects/*/locations/*}',
                },
                {
                    selector: 'google.cloud.location.Locations.ListLocations',
                    get: '/v1/{name=projects/*}/locations',
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
                    get: '/v1/{resource=projects/*/locations/*/lakes/*}:getIamPolicy',
                    additional_bindings: [
                        {
                            get: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*/assets/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/lakes/*/tasks/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/lakes/*/environments/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/dataScans/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*/attributes/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/dataAttributeBindings/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/entryTypes/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/aspectTypes/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/entryGroups/*}:getIamPolicy',
                        },
                    ],
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
                    post: '/v1/{resource=projects/*/locations/*/lakes/*}:setIamPolicy',
                    body: '*',
                    additional_bindings: [
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*/assets/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/tasks/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/environments/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataScans/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*/attributes/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataAttributeBindings/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/entryTypes/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/aspectTypes/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/entryGroups/*}:setIamPolicy',
                            body: '*',
                        },
                    ],
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
                    post: '/v1/{resource=projects/*/locations/*/lakes/*}:testIamPermissions',
                    body: '*',
                    additional_bindings: [
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*/assets/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/tasks/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/environments/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataScans/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*/attributes/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataAttributeBindings/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/entryTypes/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/aspectTypes/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/entryGroups/*}:testIamPermissions',
                            body: '*',
                        },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.CancelOperation',
                    post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
                    body: '*',
                },
                {
                    selector: 'google.longrunning.Operations.DeleteOperation',
                    delete: '/v1/{name=projects/*/locations/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v1/{name=projects/*/locations/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v1/{name=projects/*/locations/*}/operations',
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        this.descriptors.longrunning = {};
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.dataplex.v1.MetadataService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.metadataServiceStub) {
            return this.metadataServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.dataplex.v1.MetadataService.
        this.metadataServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.dataplex.v1.MetadataService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.dataplex.v1.MetadataService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const metadataServiceStubMethods = [
            'createEntity',
            'updateEntity',
            'deleteEntity',
            'getEntity',
            'listEntities',
            'createPartition',
            'deletePartition',
            'getPartition',
            'listPartitions',
        ];
        for (const methodName of metadataServiceStubMethods) {
            const callPromise = this.metadataServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] || undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.metadataServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'dataplex.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'dataplex.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    createEntity(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createEntity(request, options, callback);
    }
    updateEntity(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'entity.name': (_a = request.entity.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateEntity(request, options, callback);
    }
    deleteEntity(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteEntity(request, options, callback);
    }
    getEntity(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getEntity(request, options, callback);
    }
    createPartition(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createPartition(request, options, callback);
    }
    deletePartition(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deletePartition(request, options, callback);
    }
    getPartition(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getPartition(request, options, callback);
    }
    listEntities(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listEntities(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent zone:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}`.
     * @param {google.cloud.dataplex.v1.ListEntitiesRequest.EntityView} request.view
     *   Required. Specify the entity view to make a partial list request.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of entities to return. The service may return
     *   fewer than this value. If unspecified, 100 entities will be returned by
     *   default. The maximum value is 500; larger values will will be truncated to
     *   500.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListEntities` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListEntities` must match the call that provided the
     *   page token.
     * @param {string} [request.filter]
     *   Optional. The following filter parameters can be added to the URL to limit
     *   the entities returned by the API:
     *
     *   - Entity ID: ?filter="id=entityID"
     *   - Asset ID: ?filter="asset=assetID"
     *   - Data path ?filter="data_path=gs://my-bucket"
     *   - Is HIVE compatible: ?filter="hive_compatible=true"
     *   - Is BigQuery compatible: ?filter="bigquery_compatible=true"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Entity|Entity} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listEntitiesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listEntitiesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listEntities'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listEntities.createStream(this.innerApiCalls.listEntities, request, callSettings);
    }
    /**
     * Equivalent to `listEntities`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent zone:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}`.
     * @param {google.cloud.dataplex.v1.ListEntitiesRequest.EntityView} request.view
     *   Required. Specify the entity view to make a partial list request.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of entities to return. The service may return
     *   fewer than this value. If unspecified, 100 entities will be returned by
     *   default. The maximum value is 500; larger values will will be truncated to
     *   500.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListEntities` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListEntities` must match the call that provided the
     *   page token.
     * @param {string} [request.filter]
     *   Optional. The following filter parameters can be added to the URL to limit
     *   the entities returned by the API:
     *
     *   - Entity ID: ?filter="id=entityID"
     *   - Asset ID: ?filter="asset=assetID"
     *   - Data path ?filter="data_path=gs://my-bucket"
     *   - Is HIVE compatible: ?filter="hive_compatible=true"
     *   - Is BigQuery compatible: ?filter="bigquery_compatible=true"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Entity|Entity}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/metadata_service.list_entities.js</caption>
     * region_tag:dataplex_v1_generated_MetadataService_ListEntities_async
     */
    listEntitiesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listEntities'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listEntities.asyncIterate(this.innerApiCalls['listEntities'], request, callSettings);
    }
    listPartitions(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listPartitions(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent entity:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/entities/{entity_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of partitions to return. The service may return
     *   fewer than this value. If unspecified, 100 partitions will be returned by
     *   default. The maximum page size is 500; larger values will will be truncated
     *   to 500.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListPartitions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListPartitions` must match the call that provided
     *   the page token.
     * @param {string} [request.filter]
     *   Optional. Filter the partitions returned to the caller using a key value
     *   pair expression. Supported operators and syntax:
     *
     *   - logic operators: AND, OR
     *   - comparison operators: <, >, >=, <= ,=, !=
     *   - LIKE operators:
     *     - The right hand of a LIKE operator supports "." and
     *       "*" for wildcard searches, for example "value1 LIKE ".*oo.*"
     *   - parenthetical grouping: ( )
     *
     *   Sample filter expression: `?filter="key1 < value1 OR key2 > value2"
     *
     *   **Notes:**
     *
     *   - Keys to the left of operators are case insensitive.
     *   - Partition results are sorted first by creation time, then by
     *     lexicographic order.
     *   - Up to 20 key value filter pairs are allowed, but due to performance
     *     considerations, only the first 10 will be used as a filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Partition|Partition} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listPartitionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listPartitionsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPartitions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPartitions.createStream(this.innerApiCalls.listPartitions, request, callSettings);
    }
    /**
     * Equivalent to `listPartitions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent entity:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/entities/{entity_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of partitions to return. The service may return
     *   fewer than this value. If unspecified, 100 partitions will be returned by
     *   default. The maximum page size is 500; larger values will will be truncated
     *   to 500.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListPartitions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListPartitions` must match the call that provided
     *   the page token.
     * @param {string} [request.filter]
     *   Optional. Filter the partitions returned to the caller using a key value
     *   pair expression. Supported operators and syntax:
     *
     *   - logic operators: AND, OR
     *   - comparison operators: <, >, >=, <= ,=, !=
     *   - LIKE operators:
     *     - The right hand of a LIKE operator supports "." and
     *       "*" for wildcard searches, for example "value1 LIKE ".*oo.*"
     *   - parenthetical grouping: ( )
     *
     *   Sample filter expression: `?filter="key1 < value1 OR key2 > value2"
     *
     *   **Notes:**
     *
     *   - Keys to the left of operators are case insensitive.
     *   - Partition results are sorted first by creation time, then by
     *     lexicographic order.
     *   - Up to 20 key value filter pairs are allowed, but due to performance
     *     considerations, only the first 10 will be used as a filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Partition|Partition}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/metadata_service.list_partitions.js</caption>
     * region_tag:dataplex_v1_generated_MetadataService_ListPartitions_async
     */
    listPartitionsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPartitions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPartitions.asyncIterate(this.innerApiCalls['listPartitions'], request, callSettings);
    }
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request, options, callback) {
        return this.locationsClient.getLocation(request, options, callback);
    }
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request, options) {
        return this.locationsClient.listLocationsAsync(request, options);
    }
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request, options, callback) {
        return this.operationsClient.getOperation(request, options, callback);
    }
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request, options) {
        return this.operationsClient.listOperationsAsync(request, options);
    }
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request, options, callback) {
        return this.operationsClient.cancelOperation(request, options, callback);
    }
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request, options, callback) {
        return this.operationsClient.deleteOperation(request, options, callback);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified asset resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} asset
     * @returns {string} Resource name string.
     */
    assetPath(project, location, lake, zone, asset) {
        return this.pathTemplates.assetPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            zone: zone,
            asset: asset,
        });
    }
    /**
     * Parse the project from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAssetName(assetName) {
        return this.pathTemplates.assetPathTemplate.match(assetName).project;
    }
    /**
     * Parse the location from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAssetName(assetName) {
        return this.pathTemplates.assetPathTemplate.match(assetName).location;
    }
    /**
     * Parse the lake from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromAssetName(assetName) {
        return this.pathTemplates.assetPathTemplate.match(assetName).lake;
    }
    /**
     * Parse the zone from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromAssetName(assetName) {
        return this.pathTemplates.assetPathTemplate.match(assetName).zone;
    }
    /**
     * Parse the asset from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the asset.
     */
    matchAssetFromAssetName(assetName) {
        return this.pathTemplates.assetPathTemplate.match(assetName).asset;
    }
    /**
     * Return a fully-qualified content resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} content
     * @returns {string} Resource name string.
     */
    contentPath(project, location, lake, content) {
        return this.pathTemplates.contentPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            content: content,
        });
    }
    /**
     * Parse the project from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromContentName(contentName) {
        return this.pathTemplates.contentPathTemplate.match(contentName).project;
    }
    /**
     * Parse the location from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromContentName(contentName) {
        return this.pathTemplates.contentPathTemplate.match(contentName).location;
    }
    /**
     * Parse the lake from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromContentName(contentName) {
        return this.pathTemplates.contentPathTemplate.match(contentName).lake;
    }
    /**
     * Parse the content from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the content.
     */
    matchContentFromContentName(contentName) {
        return this.pathTemplates.contentPathTemplate.match(contentName).content;
    }
    /**
     * Return a fully-qualified dataAttribute resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataTaxonomy
     * @param {string} data_attribute_id
     * @returns {string} Resource name string.
     */
    dataAttributePath(project, location, dataTaxonomy, dataAttributeId) {
        return this.pathTemplates.dataAttributePathTemplate.render({
            project: project,
            location: location,
            dataTaxonomy: dataTaxonomy,
            data_attribute_id: dataAttributeId,
        });
    }
    /**
     * Parse the project from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataAttributeName(dataAttributeName) {
        return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName)
            .project;
    }
    /**
     * Parse the location from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataAttributeName(dataAttributeName) {
        return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName)
            .location;
    }
    /**
     * Parse the dataTaxonomy from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the dataTaxonomy.
     */
    matchDataTaxonomyFromDataAttributeName(dataAttributeName) {
        return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName)
            .dataTaxonomy;
    }
    /**
     * Parse the data_attribute_id from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the data_attribute_id.
     */
    matchDataAttributeIdFromDataAttributeName(dataAttributeName) {
        return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName)
            .data_attribute_id;
    }
    /**
     * Return a fully-qualified dataAttributeBinding resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_attribute_binding_id
     * @returns {string} Resource name string.
     */
    dataAttributeBindingPath(project, location, dataAttributeBindingId) {
        return this.pathTemplates.dataAttributeBindingPathTemplate.render({
            project: project,
            location: location,
            data_attribute_binding_id: dataAttributeBindingId,
        });
    }
    /**
     * Parse the project from DataAttributeBinding resource.
     *
     * @param {string} dataAttributeBindingName
     *   A fully-qualified path representing DataAttributeBinding resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataAttributeBindingName(dataAttributeBindingName) {
        return this.pathTemplates.dataAttributeBindingPathTemplate.match(dataAttributeBindingName).project;
    }
    /**
     * Parse the location from DataAttributeBinding resource.
     *
     * @param {string} dataAttributeBindingName
     *   A fully-qualified path representing DataAttributeBinding resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataAttributeBindingName(dataAttributeBindingName) {
        return this.pathTemplates.dataAttributeBindingPathTemplate.match(dataAttributeBindingName).location;
    }
    /**
     * Parse the data_attribute_binding_id from DataAttributeBinding resource.
     *
     * @param {string} dataAttributeBindingName
     *   A fully-qualified path representing DataAttributeBinding resource.
     * @returns {string} A string representing the data_attribute_binding_id.
     */
    matchDataAttributeBindingIdFromDataAttributeBindingName(dataAttributeBindingName) {
        return this.pathTemplates.dataAttributeBindingPathTemplate.match(dataAttributeBindingName).data_attribute_binding_id;
    }
    /**
     * Return a fully-qualified dataScan resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataScan
     * @returns {string} Resource name string.
     */
    dataScanPath(project, location, dataScan) {
        return this.pathTemplates.dataScanPathTemplate.render({
            project: project,
            location: location,
            dataScan: dataScan,
        });
    }
    /**
     * Parse the project from DataScan resource.
     *
     * @param {string} dataScanName
     *   A fully-qualified path representing DataScan resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataScanName(dataScanName) {
        return this.pathTemplates.dataScanPathTemplate.match(dataScanName).project;
    }
    /**
     * Parse the location from DataScan resource.
     *
     * @param {string} dataScanName
     *   A fully-qualified path representing DataScan resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataScanName(dataScanName) {
        return this.pathTemplates.dataScanPathTemplate.match(dataScanName).location;
    }
    /**
     * Parse the dataScan from DataScan resource.
     *
     * @param {string} dataScanName
     *   A fully-qualified path representing DataScan resource.
     * @returns {string} A string representing the dataScan.
     */
    matchDataScanFromDataScanName(dataScanName) {
        return this.pathTemplates.dataScanPathTemplate.match(dataScanName).dataScan;
    }
    /**
     * Return a fully-qualified dataScanJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataScan
     * @param {string} job
     * @returns {string} Resource name string.
     */
    dataScanJobPath(project, location, dataScan, job) {
        return this.pathTemplates.dataScanJobPathTemplate.render({
            project: project,
            location: location,
            dataScan: dataScan,
            job: job,
        });
    }
    /**
     * Parse the project from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataScanJobName(dataScanJobName) {
        return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
            .project;
    }
    /**
     * Parse the location from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataScanJobName(dataScanJobName) {
        return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
            .location;
    }
    /**
     * Parse the dataScan from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the dataScan.
     */
    matchDataScanFromDataScanJobName(dataScanJobName) {
        return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
            .dataScan;
    }
    /**
     * Parse the job from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromDataScanJobName(dataScanJobName) {
        return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
            .job;
    }
    /**
     * Return a fully-qualified dataTaxonomy resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_taxonomy_id
     * @returns {string} Resource name string.
     */
    dataTaxonomyPath(project, location, dataTaxonomyId) {
        return this.pathTemplates.dataTaxonomyPathTemplate.render({
            project: project,
            location: location,
            data_taxonomy_id: dataTaxonomyId,
        });
    }
    /**
     * Parse the project from DataTaxonomy resource.
     *
     * @param {string} dataTaxonomyName
     *   A fully-qualified path representing DataTaxonomy resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataTaxonomyName(dataTaxonomyName) {
        return this.pathTemplates.dataTaxonomyPathTemplate.match(dataTaxonomyName)
            .project;
    }
    /**
     * Parse the location from DataTaxonomy resource.
     *
     * @param {string} dataTaxonomyName
     *   A fully-qualified path representing DataTaxonomy resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataTaxonomyName(dataTaxonomyName) {
        return this.pathTemplates.dataTaxonomyPathTemplate.match(dataTaxonomyName)
            .location;
    }
    /**
     * Parse the data_taxonomy_id from DataTaxonomy resource.
     *
     * @param {string} dataTaxonomyName
     *   A fully-qualified path representing DataTaxonomy resource.
     * @returns {string} A string representing the data_taxonomy_id.
     */
    matchDataTaxonomyIdFromDataTaxonomyName(dataTaxonomyName) {
        return this.pathTemplates.dataTaxonomyPathTemplate.match(dataTaxonomyName)
            .data_taxonomy_id;
    }
    /**
     * Return a fully-qualified entity resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} entity
     * @returns {string} Resource name string.
     */
    entityPath(project, location, lake, zone, entity) {
        return this.pathTemplates.entityPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            zone: zone,
            entity: entity,
        });
    }
    /**
     * Parse the project from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntityName(entityName) {
        return this.pathTemplates.entityPathTemplate.match(entityName).project;
    }
    /**
     * Parse the location from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntityName(entityName) {
        return this.pathTemplates.entityPathTemplate.match(entityName).location;
    }
    /**
     * Parse the lake from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromEntityName(entityName) {
        return this.pathTemplates.entityPathTemplate.match(entityName).lake;
    }
    /**
     * Parse the zone from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromEntityName(entityName) {
        return this.pathTemplates.entityPathTemplate.match(entityName).zone;
    }
    /**
     * Parse the entity from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the entity.
     */
    matchEntityFromEntityName(entityName) {
        return this.pathTemplates.entityPathTemplate.match(entityName).entity;
    }
    /**
     * Return a fully-qualified environment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} environment
     * @returns {string} Resource name string.
     */
    environmentPath(project, location, lake, environment) {
        return this.pathTemplates.environmentPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            environment: environment,
        });
    }
    /**
     * Parse the project from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .project;
    }
    /**
     * Parse the location from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .location;
    }
    /**
     * Parse the lake from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .lake;
    }
    /**
     * Parse the environment from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .environment;
    }
    /**
     * Return a fully-qualified job resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} task
     * @param {string} job
     * @returns {string} Resource name string.
     */
    jobPath(project, location, lake, task, job) {
        return this.pathTemplates.jobPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            task: task,
            job: job,
        });
    }
    /**
     * Parse the project from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromJobName(jobName) {
        return this.pathTemplates.jobPathTemplate.match(jobName).project;
    }
    /**
     * Parse the location from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromJobName(jobName) {
        return this.pathTemplates.jobPathTemplate.match(jobName).location;
    }
    /**
     * Parse the lake from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromJobName(jobName) {
        return this.pathTemplates.jobPathTemplate.match(jobName).lake;
    }
    /**
     * Parse the task from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the task.
     */
    matchTaskFromJobName(jobName) {
        return this.pathTemplates.jobPathTemplate.match(jobName).task;
    }
    /**
     * Parse the job from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromJobName(jobName) {
        return this.pathTemplates.jobPathTemplate.match(jobName).job;
    }
    /**
     * Return a fully-qualified lake resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @returns {string} Resource name string.
     */
    lakePath(project, location, lake) {
        return this.pathTemplates.lakePathTemplate.render({
            project: project,
            location: location,
            lake: lake,
        });
    }
    /**
     * Parse the project from Lake resource.
     *
     * @param {string} lakeName
     *   A fully-qualified path representing Lake resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLakeName(lakeName) {
        return this.pathTemplates.lakePathTemplate.match(lakeName).project;
    }
    /**
     * Parse the location from Lake resource.
     *
     * @param {string} lakeName
     *   A fully-qualified path representing Lake resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLakeName(lakeName) {
        return this.pathTemplates.lakePathTemplate.match(lakeName).location;
    }
    /**
     * Parse the lake from Lake resource.
     *
     * @param {string} lakeName
     *   A fully-qualified path representing Lake resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromLakeName(lakeName) {
        return this.pathTemplates.lakePathTemplate.match(lakeName).lake;
    }
    /**
     * Return a fully-qualified partition resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} entity
     * @param {string} partition
     * @returns {string} Resource name string.
     */
    partitionPath(project, location, lake, zone, entity, partition) {
        return this.pathTemplates.partitionPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            zone: zone,
            entity: entity,
            partition: partition,
        });
    }
    /**
     * Parse the project from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPartitionName(partitionName) {
        return this.pathTemplates.partitionPathTemplate.match(partitionName)
            .project;
    }
    /**
     * Parse the location from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPartitionName(partitionName) {
        return this.pathTemplates.partitionPathTemplate.match(partitionName)
            .location;
    }
    /**
     * Parse the lake from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromPartitionName(partitionName) {
        return this.pathTemplates.partitionPathTemplate.match(partitionName).lake;
    }
    /**
     * Parse the zone from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromPartitionName(partitionName) {
        return this.pathTemplates.partitionPathTemplate.match(partitionName).zone;
    }
    /**
     * Parse the entity from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the entity.
     */
    matchEntityFromPartitionName(partitionName) {
        return this.pathTemplates.partitionPathTemplate.match(partitionName).entity;
    }
    /**
     * Parse the partition from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the partition.
     */
    matchPartitionFromPartitionName(partitionName) {
        return this.pathTemplates.partitionPathTemplate.match(partitionName)
            .partition;
    }
    /**
     * Return a fully-qualified projectLocationLakeAction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} action
     * @returns {string} Resource name string.
     */
    projectLocationLakeActionPath(project, location, lake, action) {
        return this.pathTemplates.projectLocationLakeActionPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            action: action,
        });
    }
    /**
     * Parse the project from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationLakeActionName(projectLocationLakeActionName) {
        return this.pathTemplates.projectLocationLakeActionPathTemplate.match(projectLocationLakeActionName).project;
    }
    /**
     * Parse the location from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationLakeActionName(projectLocationLakeActionName) {
        return this.pathTemplates.projectLocationLakeActionPathTemplate.match(projectLocationLakeActionName).location;
    }
    /**
     * Parse the lake from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromProjectLocationLakeActionName(projectLocationLakeActionName) {
        return this.pathTemplates.projectLocationLakeActionPathTemplate.match(projectLocationLakeActionName).lake;
    }
    /**
     * Parse the action from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the action.
     */
    matchActionFromProjectLocationLakeActionName(projectLocationLakeActionName) {
        return this.pathTemplates.projectLocationLakeActionPathTemplate.match(projectLocationLakeActionName).action;
    }
    /**
     * Return a fully-qualified projectLocationLakeZoneAction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} action
     * @returns {string} Resource name string.
     */
    projectLocationLakeZoneActionPath(project, location, lake, zone, action) {
        return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            zone: zone,
            action: action,
        });
    }
    /**
     * Parse the project from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName) {
        return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(projectLocationLakeZoneActionName).project;
    }
    /**
     * Parse the location from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName) {
        return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(projectLocationLakeZoneActionName).location;
    }
    /**
     * Parse the lake from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName) {
        return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(projectLocationLakeZoneActionName).lake;
    }
    /**
     * Parse the zone from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName) {
        return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(projectLocationLakeZoneActionName).zone;
    }
    /**
     * Parse the action from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the action.
     */
    matchActionFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName) {
        return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(projectLocationLakeZoneActionName).action;
    }
    /**
     * Return a fully-qualified projectLocationLakeZoneAssetAction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} asset
     * @param {string} action
     * @returns {string} Resource name string.
     */
    projectLocationLakeZoneAssetActionPath(project, location, lake, zone, asset, action) {
        return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            zone: zone,
            asset: asset,
            action: action,
        });
    }
    /**
     * Parse the project from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName) {
        return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).project;
    }
    /**
     * Parse the location from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName) {
        return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).location;
    }
    /**
     * Parse the lake from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName) {
        return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).lake;
    }
    /**
     * Parse the zone from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName) {
        return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).zone;
    }
    /**
     * Parse the asset from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the asset.
     */
    matchAssetFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName) {
        return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).asset;
    }
    /**
     * Parse the action from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the action.
     */
    matchActionFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName) {
        return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).action;
    }
    /**
     * Return a fully-qualified session resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} environment
     * @param {string} session
     * @returns {string} Resource name string.
     */
    sessionPath(project, location, lake, environment, session) {
        return this.pathTemplates.sessionPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            environment: environment,
            session: session,
        });
    }
    /**
     * Parse the project from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSessionName(sessionName) {
        return this.pathTemplates.sessionPathTemplate.match(sessionName).project;
    }
    /**
     * Parse the location from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSessionName(sessionName) {
        return this.pathTemplates.sessionPathTemplate.match(sessionName).location;
    }
    /**
     * Parse the lake from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromSessionName(sessionName) {
        return this.pathTemplates.sessionPathTemplate.match(sessionName).lake;
    }
    /**
     * Parse the environment from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromSessionName(sessionName) {
        return this.pathTemplates.sessionPathTemplate.match(sessionName)
            .environment;
    }
    /**
     * Parse the session from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromSessionName(sessionName) {
        return this.pathTemplates.sessionPathTemplate.match(sessionName).session;
    }
    /**
     * Return a fully-qualified task resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} task
     * @returns {string} Resource name string.
     */
    taskPath(project, location, lake, task) {
        return this.pathTemplates.taskPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            task: task,
        });
    }
    /**
     * Parse the project from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTaskName(taskName) {
        return this.pathTemplates.taskPathTemplate.match(taskName).project;
    }
    /**
     * Parse the location from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTaskName(taskName) {
        return this.pathTemplates.taskPathTemplate.match(taskName).location;
    }
    /**
     * Parse the lake from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromTaskName(taskName) {
        return this.pathTemplates.taskPathTemplate.match(taskName).lake;
    }
    /**
     * Parse the task from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the task.
     */
    matchTaskFromTaskName(taskName) {
        return this.pathTemplates.taskPathTemplate.match(taskName).task;
    }
    /**
     * Return a fully-qualified zone resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @returns {string} Resource name string.
     */
    zonePath(project, location, lake, zone) {
        return this.pathTemplates.zonePathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            zone: zone,
        });
    }
    /**
     * Parse the project from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromZoneName(zoneName) {
        return this.pathTemplates.zonePathTemplate.match(zoneName).project;
    }
    /**
     * Parse the location from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromZoneName(zoneName) {
        return this.pathTemplates.zonePathTemplate.match(zoneName).location;
    }
    /**
     * Parse the lake from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromZoneName(zoneName) {
        return this.pathTemplates.zonePathTemplate.match(zoneName).lake;
    }
    /**
     * Parse the zone from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromZoneName(zoneName) {
        return this.pathTemplates.zonePathTemplate.match(zoneName).zone;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.metadataServiceStub && !this._terminated) {
            return this.metadataServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.locationsClient.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.MetadataServiceClient = MetadataServiceClient;
//# sourceMappingURL=metadata_service_client.js.map