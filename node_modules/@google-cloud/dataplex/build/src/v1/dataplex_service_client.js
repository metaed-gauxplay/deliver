"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataplexServiceClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/dataplex_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./dataplex_service_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Dataplex service provides data lakes as a service. The primary resources
 *  offered by this service are Lakes, Zones and Assets which collectively allow
 *  a data administrator to organize, manage, secure and catalog data across
 *  their organization located across cloud projects in a variety of storage
 *  systems including Cloud Storage and BigQuery.
 * @class
 * @memberof v1
 */
class DataplexServiceClient {
    /**
     * Construct an instance of DataplexServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new DataplexServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            assetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/assets/{asset}'),
            contentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/content/{content}'),
            dataAttributePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataTaxonomies/{dataTaxonomy}/attributes/{data_attribute_id}'),
            dataAttributeBindingPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataAttributeBindings/{data_attribute_binding_id}'),
            dataScanPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataScans/{dataScan}'),
            dataScanJobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataScans/{dataScan}/jobs/{job}'),
            dataTaxonomyPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataTaxonomies/{data_taxonomy_id}'),
            entityPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/entities/{entity}'),
            environmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/environments/{environment}'),
            jobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/tasks/{task}/jobs/{job}'),
            lakePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            partitionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/entities/{entity}/partitions/{partition}'),
            projectLocationLakeActionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/actions/{action}'),
            projectLocationLakeZoneActionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/actions/{action}'),
            projectLocationLakeZoneAssetActionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/assets/{asset}/actions/{action}'),
            sessionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/environments/{environment}/sessions/{session}'),
            taskPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/tasks/{task}'),
            zonePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listLakes: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'lakes'),
            listLakeActions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'actions'),
            listZones: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'zones'),
            listZoneActions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'actions'),
            listAssets: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'assets'),
            listAssetActions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'actions'),
            listTasks: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'tasks'),
            listJobs: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'jobs'),
            listEnvironments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'environments'),
            listSessions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'sessions'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.cloud.location.Locations.GetLocation',
                    get: '/v1/{name=projects/*/locations/*}',
                },
                {
                    selector: 'google.cloud.location.Locations.ListLocations',
                    get: '/v1/{name=projects/*}/locations',
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
                    get: '/v1/{resource=projects/*/locations/*/lakes/*}:getIamPolicy',
                    additional_bindings: [
                        {
                            get: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*/assets/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/lakes/*/tasks/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/lakes/*/environments/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/dataScans/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*/attributes/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/dataAttributeBindings/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/entryTypes/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/aspectTypes/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/entryGroups/*}:getIamPolicy',
                        },
                    ],
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
                    post: '/v1/{resource=projects/*/locations/*/lakes/*}:setIamPolicy',
                    body: '*',
                    additional_bindings: [
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*/assets/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/tasks/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/environments/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataScans/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*/attributes/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataAttributeBindings/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/entryTypes/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/aspectTypes/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/entryGroups/*}:setIamPolicy',
                            body: '*',
                        },
                    ],
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
                    post: '/v1/{resource=projects/*/locations/*/lakes/*}:testIamPermissions',
                    body: '*',
                    additional_bindings: [
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*/assets/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/tasks/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/lakes/*/environments/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataScans/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*/attributes/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/dataAttributeBindings/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/entryTypes/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/aspectTypes/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/entryGroups/*}:testIamPermissions',
                            body: '*',
                        },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.CancelOperation',
                    post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
                    body: '*',
                },
                {
                    selector: 'google.longrunning.Operations.DeleteOperation',
                    delete: '/v1/{name=projects/*/locations/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v1/{name=projects/*/locations/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v1/{name=projects/*/locations/*}/operations',
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const createLakeResponse = protoFilesRoot.lookup('.google.cloud.dataplex.v1.Lake');
        const createLakeMetadata = protoFilesRoot.lookup('.google.cloud.dataplex.v1.OperationMetadata');
        const updateLakeResponse = protoFilesRoot.lookup('.google.cloud.dataplex.v1.Lake');
        const updateLakeMetadata = protoFilesRoot.lookup('.google.cloud.dataplex.v1.OperationMetadata');
        const deleteLakeResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteLakeMetadata = protoFilesRoot.lookup('.google.cloud.dataplex.v1.OperationMetadata');
        const createZoneResponse = protoFilesRoot.lookup('.google.cloud.dataplex.v1.Zone');
        const createZoneMetadata = protoFilesRoot.lookup('.google.cloud.dataplex.v1.OperationMetadata');
        const updateZoneResponse = protoFilesRoot.lookup('.google.cloud.dataplex.v1.Zone');
        const updateZoneMetadata = protoFilesRoot.lookup('.google.cloud.dataplex.v1.OperationMetadata');
        const deleteZoneResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteZoneMetadata = protoFilesRoot.lookup('.google.cloud.dataplex.v1.OperationMetadata');
        const createAssetResponse = protoFilesRoot.lookup('.google.cloud.dataplex.v1.Asset');
        const createAssetMetadata = protoFilesRoot.lookup('.google.cloud.dataplex.v1.OperationMetadata');
        const updateAssetResponse = protoFilesRoot.lookup('.google.cloud.dataplex.v1.Asset');
        const updateAssetMetadata = protoFilesRoot.lookup('.google.cloud.dataplex.v1.OperationMetadata');
        const deleteAssetResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteAssetMetadata = protoFilesRoot.lookup('.google.cloud.dataplex.v1.OperationMetadata');
        const createTaskResponse = protoFilesRoot.lookup('.google.cloud.dataplex.v1.Task');
        const createTaskMetadata = protoFilesRoot.lookup('.google.cloud.dataplex.v1.OperationMetadata');
        const updateTaskResponse = protoFilesRoot.lookup('.google.cloud.dataplex.v1.Task');
        const updateTaskMetadata = protoFilesRoot.lookup('.google.cloud.dataplex.v1.OperationMetadata');
        const deleteTaskResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteTaskMetadata = protoFilesRoot.lookup('.google.cloud.dataplex.v1.OperationMetadata');
        const createEnvironmentResponse = protoFilesRoot.lookup('.google.cloud.dataplex.v1.Environment');
        const createEnvironmentMetadata = protoFilesRoot.lookup('.google.cloud.dataplex.v1.OperationMetadata');
        const updateEnvironmentResponse = protoFilesRoot.lookup('.google.cloud.dataplex.v1.Environment');
        const updateEnvironmentMetadata = protoFilesRoot.lookup('.google.cloud.dataplex.v1.OperationMetadata');
        const deleteEnvironmentResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteEnvironmentMetadata = protoFilesRoot.lookup('.google.cloud.dataplex.v1.OperationMetadata');
        this.descriptors.longrunning = {
            createLake: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createLakeResponse.decode.bind(createLakeResponse), createLakeMetadata.decode.bind(createLakeMetadata)),
            updateLake: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateLakeResponse.decode.bind(updateLakeResponse), updateLakeMetadata.decode.bind(updateLakeMetadata)),
            deleteLake: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteLakeResponse.decode.bind(deleteLakeResponse), deleteLakeMetadata.decode.bind(deleteLakeMetadata)),
            createZone: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createZoneResponse.decode.bind(createZoneResponse), createZoneMetadata.decode.bind(createZoneMetadata)),
            updateZone: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateZoneResponse.decode.bind(updateZoneResponse), updateZoneMetadata.decode.bind(updateZoneMetadata)),
            deleteZone: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteZoneResponse.decode.bind(deleteZoneResponse), deleteZoneMetadata.decode.bind(deleteZoneMetadata)),
            createAsset: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createAssetResponse.decode.bind(createAssetResponse), createAssetMetadata.decode.bind(createAssetMetadata)),
            updateAsset: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateAssetResponse.decode.bind(updateAssetResponse), updateAssetMetadata.decode.bind(updateAssetMetadata)),
            deleteAsset: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteAssetResponse.decode.bind(deleteAssetResponse), deleteAssetMetadata.decode.bind(deleteAssetMetadata)),
            createTask: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createTaskResponse.decode.bind(createTaskResponse), createTaskMetadata.decode.bind(createTaskMetadata)),
            updateTask: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateTaskResponse.decode.bind(updateTaskResponse), updateTaskMetadata.decode.bind(updateTaskMetadata)),
            deleteTask: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteTaskResponse.decode.bind(deleteTaskResponse), deleteTaskMetadata.decode.bind(deleteTaskMetadata)),
            createEnvironment: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createEnvironmentResponse.decode.bind(createEnvironmentResponse), createEnvironmentMetadata.decode.bind(createEnvironmentMetadata)),
            updateEnvironment: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateEnvironmentResponse.decode.bind(updateEnvironmentResponse), updateEnvironmentMetadata.decode.bind(updateEnvironmentMetadata)),
            deleteEnvironment: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteEnvironmentResponse.decode.bind(deleteEnvironmentResponse), deleteEnvironmentMetadata.decode.bind(deleteEnvironmentMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.dataplex.v1.DataplexService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.dataplexServiceStub) {
            return this.dataplexServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.dataplex.v1.DataplexService.
        this.dataplexServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.dataplex.v1.DataplexService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.dataplex.v1.DataplexService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const dataplexServiceStubMethods = [
            'createLake',
            'updateLake',
            'deleteLake',
            'listLakes',
            'getLake',
            'listLakeActions',
            'createZone',
            'updateZone',
            'deleteZone',
            'listZones',
            'getZone',
            'listZoneActions',
            'createAsset',
            'updateAsset',
            'deleteAsset',
            'listAssets',
            'getAsset',
            'listAssetActions',
            'createTask',
            'updateTask',
            'deleteTask',
            'listTasks',
            'getTask',
            'listJobs',
            'runTask',
            'getJob',
            'cancelJob',
            'createEnvironment',
            'updateEnvironment',
            'deleteEnvironment',
            'listEnvironments',
            'getEnvironment',
            'listSessions',
        ];
        for (const methodName of dataplexServiceStubMethods) {
            const callPromise = this.dataplexServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.dataplexServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'dataplex.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'dataplex.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    getLake(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getLake(request, options, callback);
    }
    getZone(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getZone(request, options, callback);
    }
    getAsset(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getAsset(request, options, callback);
    }
    getTask(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getTask(request, options, callback);
    }
    runTask(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.runTask(request, options, callback);
    }
    getJob(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getJob(request, options, callback);
    }
    cancelJob(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.cancelJob(request, options, callback);
    }
    getEnvironment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getEnvironment(request, options, callback);
    }
    createLake(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createLake(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createLake()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.create_lake.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CreateLake_async
     */
    async checkCreateLakeProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createLake, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateLake(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'lake.name': (_a = request.lake.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateLake(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateLake()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.update_lake.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_UpdateLake_async
     */
    async checkUpdateLakeProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateLake, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteLake(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteLake(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteLake()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.delete_lake.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_DeleteLake_async
     */
    async checkDeleteLakeProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteLake, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createZone(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createZone(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createZone()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.create_zone.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CreateZone_async
     */
    async checkCreateZoneProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createZone, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateZone(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'zone.name': (_a = request.zone.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateZone(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateZone()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.update_zone.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_UpdateZone_async
     */
    async checkUpdateZoneProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateZone, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteZone(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteZone(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteZone()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.delete_zone.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_DeleteZone_async
     */
    async checkDeleteZoneProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteZone, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createAsset(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createAsset(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createAsset()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.create_asset.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CreateAsset_async
     */
    async checkCreateAssetProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createAsset, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateAsset(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'asset.name': (_a = request.asset.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateAsset(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateAsset()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.update_asset.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_UpdateAsset_async
     */
    async checkUpdateAssetProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateAsset, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteAsset(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteAsset(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteAsset()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.delete_asset.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_DeleteAsset_async
     */
    async checkDeleteAssetProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteAsset, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createTask(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createTask(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createTask()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.create_task.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CreateTask_async
     */
    async checkCreateTaskProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createTask, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateTask(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'task.name': (_a = request.task.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateTask(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateTask()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.update_task.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_UpdateTask_async
     */
    async checkUpdateTaskProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateTask, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteTask(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteTask(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteTask()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.delete_task.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_DeleteTask_async
     */
    async checkDeleteTaskProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteTask, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createEnvironment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createEnvironment(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createEnvironment()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.create_environment.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CreateEnvironment_async
     */
    async checkCreateEnvironmentProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createEnvironment, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateEnvironment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'environment.name': (_a = request.environment.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateEnvironment(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateEnvironment()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.update_environment.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_UpdateEnvironment_async
     */
    async checkUpdateEnvironmentProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateEnvironment, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteEnvironment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteEnvironment(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteEnvironment()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.delete_environment.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_DeleteEnvironment_async
     */
    async checkDeleteEnvironmentProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteEnvironment, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listLakes(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listLakes(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the lake location, of the form:
     *   `projects/{project_number}/locations/{location_id}`
     *   where `location_id` refers to a GCP region.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of Lakes to return. The service may return fewer
     *   than this value. If unspecified, at most 10 lakes will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListLakes` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListLakes` must match the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Lake|Lake} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listLakesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listLakesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listLakes'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listLakes.createStream(this.innerApiCalls.listLakes, request, callSettings);
    }
    /**
     * Equivalent to `listLakes`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the lake location, of the form:
     *   `projects/{project_number}/locations/{location_id}`
     *   where `location_id` refers to a GCP region.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of Lakes to return. The service may return fewer
     *   than this value. If unspecified, at most 10 lakes will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListLakes` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListLakes` must match the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Lake|Lake}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_lakes.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListLakes_async
     */
    listLakesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listLakes'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listLakes.asyncIterate(this.innerApiCalls['listLakes'], request, callSettings);
    }
    listLakeActions(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listLakeActions(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of actions to return. The service may return fewer
     *   than this value. If unspecified, at most 10 actions will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListLakeActions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListLakeActions` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Action|Action} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listLakeActionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listLakeActionsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listLakeActions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listLakeActions.createStream(this.innerApiCalls.listLakeActions, request, callSettings);
    }
    /**
     * Equivalent to `listLakeActions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of actions to return. The service may return fewer
     *   than this value. If unspecified, at most 10 actions will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListLakeActions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListLakeActions` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Action|Action}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_lake_actions.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListLakeActions_async
     */
    listLakeActionsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listLakeActions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listLakeActions.asyncIterate(this.innerApiCalls['listLakeActions'], request, callSettings);
    }
    listZones(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listZones(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of zones to return. The service may return fewer
     *   than this value. If unspecified, at most 10 zones will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListZones` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListZones` must match the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Zone|Zone} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listZonesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listZonesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listZones'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listZones.createStream(this.innerApiCalls.listZones, request, callSettings);
    }
    /**
     * Equivalent to `listZones`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of zones to return. The service may return fewer
     *   than this value. If unspecified, at most 10 zones will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListZones` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListZones` must match the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Zone|Zone}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_zones.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListZones_async
     */
    listZonesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listZones'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listZones.asyncIterate(this.innerApiCalls['listZones'], request, callSettings);
    }
    listZoneActions(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listZoneActions(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent zone:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of actions to return. The service may return fewer
     *   than this value. If unspecified, at most 10 actions will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListZoneActions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListZoneActions` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Action|Action} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listZoneActionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listZoneActionsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listZoneActions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listZoneActions.createStream(this.innerApiCalls.listZoneActions, request, callSettings);
    }
    /**
     * Equivalent to `listZoneActions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent zone:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of actions to return. The service may return fewer
     *   than this value. If unspecified, at most 10 actions will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListZoneActions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListZoneActions` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Action|Action}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_zone_actions.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListZoneActions_async
     */
    listZoneActionsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listZoneActions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listZoneActions.asyncIterate(this.innerApiCalls['listZoneActions'], request, callSettings);
    }
    listAssets(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listAssets(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent zone:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of asset to return. The service may return fewer
     *   than this value. If unspecified, at most 10 assets will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListAssets` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListAssets` must match the call that provided the page
     *   token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Asset|Asset} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAssetsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAssetsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAssets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAssets.createStream(this.innerApiCalls.listAssets, request, callSettings);
    }
    /**
     * Equivalent to `listAssets`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent zone:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of asset to return. The service may return fewer
     *   than this value. If unspecified, at most 10 assets will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListAssets` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListAssets` must match the call that provided the page
     *   token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Asset|Asset}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_assets.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListAssets_async
     */
    listAssetsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAssets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAssets.asyncIterate(this.innerApiCalls['listAssets'], request, callSettings);
    }
    listAssetActions(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listAssetActions(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent asset:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/assets/{asset_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of actions to return. The service may return fewer
     *   than this value. If unspecified, at most 10 actions will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListAssetActions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListAssetActions` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Action|Action} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAssetActionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAssetActionsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAssetActions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAssetActions.createStream(this.innerApiCalls.listAssetActions, request, callSettings);
    }
    /**
     * Equivalent to `listAssetActions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent asset:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/assets/{asset_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of actions to return. The service may return fewer
     *   than this value. If unspecified, at most 10 actions will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListAssetActions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListAssetActions` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Action|Action}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_asset_actions.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListAssetActions_async
     */
    listAssetActionsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAssetActions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAssetActions.asyncIterate(this.innerApiCalls['listAssetActions'], request, callSettings);
    }
    listTasks(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listTasks(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of tasks to return. The service may return fewer
     *   than this value. If unspecified, at most 10 tasks will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListZones` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListZones` must match the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Task|Task} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTasksAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTasksStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listTasks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTasks.createStream(this.innerApiCalls.listTasks, request, callSettings);
    }
    /**
     * Equivalent to `listTasks`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of tasks to return. The service may return fewer
     *   than this value. If unspecified, at most 10 tasks will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListZones` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListZones` must match the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Task|Task}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_tasks.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListTasks_async
     */
    listTasksAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listTasks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTasks.asyncIterate(this.innerApiCalls['listTasks'], request, callSettings);
    }
    listJobs(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listJobs(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent environment:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/tasks/{task_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of jobs to return. The service may return fewer
     *   than this value. If unspecified, at most 10 jobs will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListJobs` call. Provide this
     *   to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListJobs` must match the call that provided the page
     *   token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Job|Job} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listJobsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listJobsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listJobs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listJobs.createStream(this.innerApiCalls.listJobs, request, callSettings);
    }
    /**
     * Equivalent to `listJobs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent environment:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/tasks/{task_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of jobs to return. The service may return fewer
     *   than this value. If unspecified, at most 10 jobs will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListJobs` call. Provide this
     *   to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListJobs` must match the call that provided the page
     *   token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Job|Job}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_jobs.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListJobs_async
     */
    listJobsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listJobs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listJobs.asyncIterate(this.innerApiCalls['listJobs'], request, callSettings);
    }
    listEnvironments(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listEnvironments(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_id}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of environments to return. The service may return
     *   fewer than this value. If unspecified, at most 10 environments will be
     *   returned. The maximum value is 1000; values above 1000 will be coerced to
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListEnvironments` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListEnvironments` must match the call that provided
     *   the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Environment|Environment} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listEnvironmentsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listEnvironmentsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listEnvironments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listEnvironments.createStream(this.innerApiCalls.listEnvironments, request, callSettings);
    }
    /**
     * Equivalent to `listEnvironments`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_id}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of environments to return. The service may return
     *   fewer than this value. If unspecified, at most 10 environments will be
     *   returned. The maximum value is 1000; values above 1000 will be coerced to
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListEnvironments` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListEnvironments` must match the call that provided
     *   the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Environment|Environment}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_environments.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListEnvironments_async
     */
    listEnvironmentsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listEnvironments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listEnvironments.asyncIterate(this.innerApiCalls['listEnvironments'], request, callSettings);
    }
    listSessions(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listSessions(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent environment:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/environment/{environment_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of sessions to return. The service may return
     *   fewer than this value. If unspecified, at most 10 sessions will be
     *   returned. The maximum value is 1000; values above 1000 will be coerced to
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListSessions` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListSessions` must match the call that provided the page
     *   token.
     * @param {string} [request.filter]
     *   Optional. Filter request. The following `mode` filter is supported to
     *   return only the sessions belonging to the requester when the mode is USER
     *   and return sessions of all the users when the mode is ADMIN. When no filter
     *   is sent default to USER mode. NOTE: When the mode is ADMIN, the requester
     *   should have `dataplex.environments.listAllSessions` permission to list all
     *   sessions, in absence of the permission, the request fails.
     *
     *   mode = ADMIN | USER
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Session|Session} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listSessionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSessionsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listSessions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listSessions.createStream(this.innerApiCalls.listSessions, request, callSettings);
    }
    /**
     * Equivalent to `listSessions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent environment:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/environment/{environment_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of sessions to return. The service may return
     *   fewer than this value. If unspecified, at most 10 sessions will be
     *   returned. The maximum value is 1000; values above 1000 will be coerced to
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListSessions` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListSessions` must match the call that provided the page
     *   token.
     * @param {string} [request.filter]
     *   Optional. Filter request. The following `mode` filter is supported to
     *   return only the sessions belonging to the requester when the mode is USER
     *   and return sessions of all the users when the mode is ADMIN. When no filter
     *   is sent default to USER mode. NOTE: When the mode is ADMIN, the requester
     *   should have `dataplex.environments.listAllSessions` permission to list all
     *   sessions, in absence of the permission, the request fails.
     *
     *   mode = ADMIN | USER
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Session|Session}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_sessions.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListSessions_async
     */
    listSessionsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listSessions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listSessions.asyncIterate(this.innerApiCalls['listSessions'], request, callSettings);
    }
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request, options, callback) {
        return this.locationsClient.getLocation(request, options, callback);
    }
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request, options) {
        return this.locationsClient.listLocationsAsync(request, options);
    }
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request, options, callback) {
        return this.operationsClient.getOperation(request, options, callback);
    }
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request, options) {
        return this.operationsClient.listOperationsAsync(request, options);
    }
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request, options, callback) {
        return this.operationsClient.cancelOperation(request, options, callback);
    }
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request, options, callback) {
        return this.operationsClient.deleteOperation(request, options, callback);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified asset resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} asset
     * @returns {string} Resource name string.
     */
    assetPath(project, location, lake, zone, asset) {
        return this.pathTemplates.assetPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            zone: zone,
            asset: asset,
        });
    }
    /**
     * Parse the project from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAssetName(assetName) {
        return this.pathTemplates.assetPathTemplate.match(assetName).project;
    }
    /**
     * Parse the location from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAssetName(assetName) {
        return this.pathTemplates.assetPathTemplate.match(assetName).location;
    }
    /**
     * Parse the lake from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromAssetName(assetName) {
        return this.pathTemplates.assetPathTemplate.match(assetName).lake;
    }
    /**
     * Parse the zone from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromAssetName(assetName) {
        return this.pathTemplates.assetPathTemplate.match(assetName).zone;
    }
    /**
     * Parse the asset from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the asset.
     */
    matchAssetFromAssetName(assetName) {
        return this.pathTemplates.assetPathTemplate.match(assetName).asset;
    }
    /**
     * Return a fully-qualified content resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} content
     * @returns {string} Resource name string.
     */
    contentPath(project, location, lake, content) {
        return this.pathTemplates.contentPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            content: content,
        });
    }
    /**
     * Parse the project from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromContentName(contentName) {
        return this.pathTemplates.contentPathTemplate.match(contentName).project;
    }
    /**
     * Parse the location from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromContentName(contentName) {
        return this.pathTemplates.contentPathTemplate.match(contentName).location;
    }
    /**
     * Parse the lake from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromContentName(contentName) {
        return this.pathTemplates.contentPathTemplate.match(contentName).lake;
    }
    /**
     * Parse the content from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the content.
     */
    matchContentFromContentName(contentName) {
        return this.pathTemplates.contentPathTemplate.match(contentName).content;
    }
    /**
     * Return a fully-qualified dataAttribute resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataTaxonomy
     * @param {string} data_attribute_id
     * @returns {string} Resource name string.
     */
    dataAttributePath(project, location, dataTaxonomy, dataAttributeId) {
        return this.pathTemplates.dataAttributePathTemplate.render({
            project: project,
            location: location,
            dataTaxonomy: dataTaxonomy,
            data_attribute_id: dataAttributeId,
        });
    }
    /**
     * Parse the project from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataAttributeName(dataAttributeName) {
        return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName)
            .project;
    }
    /**
     * Parse the location from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataAttributeName(dataAttributeName) {
        return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName)
            .location;
    }
    /**
     * Parse the dataTaxonomy from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the dataTaxonomy.
     */
    matchDataTaxonomyFromDataAttributeName(dataAttributeName) {
        return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName)
            .dataTaxonomy;
    }
    /**
     * Parse the data_attribute_id from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the data_attribute_id.
     */
    matchDataAttributeIdFromDataAttributeName(dataAttributeName) {
        return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName)
            .data_attribute_id;
    }
    /**
     * Return a fully-qualified dataAttributeBinding resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_attribute_binding_id
     * @returns {string} Resource name string.
     */
    dataAttributeBindingPath(project, location, dataAttributeBindingId) {
        return this.pathTemplates.dataAttributeBindingPathTemplate.render({
            project: project,
            location: location,
            data_attribute_binding_id: dataAttributeBindingId,
        });
    }
    /**
     * Parse the project from DataAttributeBinding resource.
     *
     * @param {string} dataAttributeBindingName
     *   A fully-qualified path representing DataAttributeBinding resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataAttributeBindingName(dataAttributeBindingName) {
        return this.pathTemplates.dataAttributeBindingPathTemplate.match(dataAttributeBindingName).project;
    }
    /**
     * Parse the location from DataAttributeBinding resource.
     *
     * @param {string} dataAttributeBindingName
     *   A fully-qualified path representing DataAttributeBinding resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataAttributeBindingName(dataAttributeBindingName) {
        return this.pathTemplates.dataAttributeBindingPathTemplate.match(dataAttributeBindingName).location;
    }
    /**
     * Parse the data_attribute_binding_id from DataAttributeBinding resource.
     *
     * @param {string} dataAttributeBindingName
     *   A fully-qualified path representing DataAttributeBinding resource.
     * @returns {string} A string representing the data_attribute_binding_id.
     */
    matchDataAttributeBindingIdFromDataAttributeBindingName(dataAttributeBindingName) {
        return this.pathTemplates.dataAttributeBindingPathTemplate.match(dataAttributeBindingName).data_attribute_binding_id;
    }
    /**
     * Return a fully-qualified dataScan resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataScan
     * @returns {string} Resource name string.
     */
    dataScanPath(project, location, dataScan) {
        return this.pathTemplates.dataScanPathTemplate.render({
            project: project,
            location: location,
            dataScan: dataScan,
        });
    }
    /**
     * Parse the project from DataScan resource.
     *
     * @param {string} dataScanName
     *   A fully-qualified path representing DataScan resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataScanName(dataScanName) {
        return this.pathTemplates.dataScanPathTemplate.match(dataScanName).project;
    }
    /**
     * Parse the location from DataScan resource.
     *
     * @param {string} dataScanName
     *   A fully-qualified path representing DataScan resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataScanName(dataScanName) {
        return this.pathTemplates.dataScanPathTemplate.match(dataScanName).location;
    }
    /**
     * Parse the dataScan from DataScan resource.
     *
     * @param {string} dataScanName
     *   A fully-qualified path representing DataScan resource.
     * @returns {string} A string representing the dataScan.
     */
    matchDataScanFromDataScanName(dataScanName) {
        return this.pathTemplates.dataScanPathTemplate.match(dataScanName).dataScan;
    }
    /**
     * Return a fully-qualified dataScanJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataScan
     * @param {string} job
     * @returns {string} Resource name string.
     */
    dataScanJobPath(project, location, dataScan, job) {
        return this.pathTemplates.dataScanJobPathTemplate.render({
            project: project,
            location: location,
            dataScan: dataScan,
            job: job,
        });
    }
    /**
     * Parse the project from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataScanJobName(dataScanJobName) {
        return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
            .project;
    }
    /**
     * Parse the location from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataScanJobName(dataScanJobName) {
        return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
            .location;
    }
    /**
     * Parse the dataScan from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the dataScan.
     */
    matchDataScanFromDataScanJobName(dataScanJobName) {
        return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
            .dataScan;
    }
    /**
     * Parse the job from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromDataScanJobName(dataScanJobName) {
        return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
            .job;
    }
    /**
     * Return a fully-qualified dataTaxonomy resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_taxonomy_id
     * @returns {string} Resource name string.
     */
    dataTaxonomyPath(project, location, dataTaxonomyId) {
        return this.pathTemplates.dataTaxonomyPathTemplate.render({
            project: project,
            location: location,
            data_taxonomy_id: dataTaxonomyId,
        });
    }
    /**
     * Parse the project from DataTaxonomy resource.
     *
     * @param {string} dataTaxonomyName
     *   A fully-qualified path representing DataTaxonomy resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataTaxonomyName(dataTaxonomyName) {
        return this.pathTemplates.dataTaxonomyPathTemplate.match(dataTaxonomyName)
            .project;
    }
    /**
     * Parse the location from DataTaxonomy resource.
     *
     * @param {string} dataTaxonomyName
     *   A fully-qualified path representing DataTaxonomy resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataTaxonomyName(dataTaxonomyName) {
        return this.pathTemplates.dataTaxonomyPathTemplate.match(dataTaxonomyName)
            .location;
    }
    /**
     * Parse the data_taxonomy_id from DataTaxonomy resource.
     *
     * @param {string} dataTaxonomyName
     *   A fully-qualified path representing DataTaxonomy resource.
     * @returns {string} A string representing the data_taxonomy_id.
     */
    matchDataTaxonomyIdFromDataTaxonomyName(dataTaxonomyName) {
        return this.pathTemplates.dataTaxonomyPathTemplate.match(dataTaxonomyName)
            .data_taxonomy_id;
    }
    /**
     * Return a fully-qualified entity resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} entity
     * @returns {string} Resource name string.
     */
    entityPath(project, location, lake, zone, entity) {
        return this.pathTemplates.entityPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            zone: zone,
            entity: entity,
        });
    }
    /**
     * Parse the project from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntityName(entityName) {
        return this.pathTemplates.entityPathTemplate.match(entityName).project;
    }
    /**
     * Parse the location from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntityName(entityName) {
        return this.pathTemplates.entityPathTemplate.match(entityName).location;
    }
    /**
     * Parse the lake from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromEntityName(entityName) {
        return this.pathTemplates.entityPathTemplate.match(entityName).lake;
    }
    /**
     * Parse the zone from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromEntityName(entityName) {
        return this.pathTemplates.entityPathTemplate.match(entityName).zone;
    }
    /**
     * Parse the entity from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the entity.
     */
    matchEntityFromEntityName(entityName) {
        return this.pathTemplates.entityPathTemplate.match(entityName).entity;
    }
    /**
     * Return a fully-qualified environment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} environment
     * @returns {string} Resource name string.
     */
    environmentPath(project, location, lake, environment) {
        return this.pathTemplates.environmentPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            environment: environment,
        });
    }
    /**
     * Parse the project from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .project;
    }
    /**
     * Parse the location from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .location;
    }
    /**
     * Parse the lake from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .lake;
    }
    /**
     * Parse the environment from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .environment;
    }
    /**
     * Return a fully-qualified job resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} task
     * @param {string} job
     * @returns {string} Resource name string.
     */
    jobPath(project, location, lake, task, job) {
        return this.pathTemplates.jobPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            task: task,
            job: job,
        });
    }
    /**
     * Parse the project from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromJobName(jobName) {
        return this.pathTemplates.jobPathTemplate.match(jobName).project;
    }
    /**
     * Parse the location from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromJobName(jobName) {
        return this.pathTemplates.jobPathTemplate.match(jobName).location;
    }
    /**
     * Parse the lake from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromJobName(jobName) {
        return this.pathTemplates.jobPathTemplate.match(jobName).lake;
    }
    /**
     * Parse the task from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the task.
     */
    matchTaskFromJobName(jobName) {
        return this.pathTemplates.jobPathTemplate.match(jobName).task;
    }
    /**
     * Parse the job from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromJobName(jobName) {
        return this.pathTemplates.jobPathTemplate.match(jobName).job;
    }
    /**
     * Return a fully-qualified lake resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @returns {string} Resource name string.
     */
    lakePath(project, location, lake) {
        return this.pathTemplates.lakePathTemplate.render({
            project: project,
            location: location,
            lake: lake,
        });
    }
    /**
     * Parse the project from Lake resource.
     *
     * @param {string} lakeName
     *   A fully-qualified path representing Lake resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLakeName(lakeName) {
        return this.pathTemplates.lakePathTemplate.match(lakeName).project;
    }
    /**
     * Parse the location from Lake resource.
     *
     * @param {string} lakeName
     *   A fully-qualified path representing Lake resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLakeName(lakeName) {
        return this.pathTemplates.lakePathTemplate.match(lakeName).location;
    }
    /**
     * Parse the lake from Lake resource.
     *
     * @param {string} lakeName
     *   A fully-qualified path representing Lake resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromLakeName(lakeName) {
        return this.pathTemplates.lakePathTemplate.match(lakeName).lake;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified partition resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} entity
     * @param {string} partition
     * @returns {string} Resource name string.
     */
    partitionPath(project, location, lake, zone, entity, partition) {
        return this.pathTemplates.partitionPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            zone: zone,
            entity: entity,
            partition: partition,
        });
    }
    /**
     * Parse the project from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPartitionName(partitionName) {
        return this.pathTemplates.partitionPathTemplate.match(partitionName)
            .project;
    }
    /**
     * Parse the location from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPartitionName(partitionName) {
        return this.pathTemplates.partitionPathTemplate.match(partitionName)
            .location;
    }
    /**
     * Parse the lake from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromPartitionName(partitionName) {
        return this.pathTemplates.partitionPathTemplate.match(partitionName).lake;
    }
    /**
     * Parse the zone from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromPartitionName(partitionName) {
        return this.pathTemplates.partitionPathTemplate.match(partitionName).zone;
    }
    /**
     * Parse the entity from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the entity.
     */
    matchEntityFromPartitionName(partitionName) {
        return this.pathTemplates.partitionPathTemplate.match(partitionName).entity;
    }
    /**
     * Parse the partition from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the partition.
     */
    matchPartitionFromPartitionName(partitionName) {
        return this.pathTemplates.partitionPathTemplate.match(partitionName)
            .partition;
    }
    /**
     * Return a fully-qualified projectLocationLakeAction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} action
     * @returns {string} Resource name string.
     */
    projectLocationLakeActionPath(project, location, lake, action) {
        return this.pathTemplates.projectLocationLakeActionPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            action: action,
        });
    }
    /**
     * Parse the project from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationLakeActionName(projectLocationLakeActionName) {
        return this.pathTemplates.projectLocationLakeActionPathTemplate.match(projectLocationLakeActionName).project;
    }
    /**
     * Parse the location from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationLakeActionName(projectLocationLakeActionName) {
        return this.pathTemplates.projectLocationLakeActionPathTemplate.match(projectLocationLakeActionName).location;
    }
    /**
     * Parse the lake from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromProjectLocationLakeActionName(projectLocationLakeActionName) {
        return this.pathTemplates.projectLocationLakeActionPathTemplate.match(projectLocationLakeActionName).lake;
    }
    /**
     * Parse the action from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the action.
     */
    matchActionFromProjectLocationLakeActionName(projectLocationLakeActionName) {
        return this.pathTemplates.projectLocationLakeActionPathTemplate.match(projectLocationLakeActionName).action;
    }
    /**
     * Return a fully-qualified projectLocationLakeZoneAction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} action
     * @returns {string} Resource name string.
     */
    projectLocationLakeZoneActionPath(project, location, lake, zone, action) {
        return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            zone: zone,
            action: action,
        });
    }
    /**
     * Parse the project from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName) {
        return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(projectLocationLakeZoneActionName).project;
    }
    /**
     * Parse the location from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName) {
        return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(projectLocationLakeZoneActionName).location;
    }
    /**
     * Parse the lake from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName) {
        return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(projectLocationLakeZoneActionName).lake;
    }
    /**
     * Parse the zone from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName) {
        return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(projectLocationLakeZoneActionName).zone;
    }
    /**
     * Parse the action from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the action.
     */
    matchActionFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName) {
        return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(projectLocationLakeZoneActionName).action;
    }
    /**
     * Return a fully-qualified projectLocationLakeZoneAssetAction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} asset
     * @param {string} action
     * @returns {string} Resource name string.
     */
    projectLocationLakeZoneAssetActionPath(project, location, lake, zone, asset, action) {
        return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            zone: zone,
            asset: asset,
            action: action,
        });
    }
    /**
     * Parse the project from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName) {
        return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).project;
    }
    /**
     * Parse the location from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName) {
        return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).location;
    }
    /**
     * Parse the lake from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName) {
        return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).lake;
    }
    /**
     * Parse the zone from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName) {
        return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).zone;
    }
    /**
     * Parse the asset from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the asset.
     */
    matchAssetFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName) {
        return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).asset;
    }
    /**
     * Parse the action from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the action.
     */
    matchActionFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName) {
        return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).action;
    }
    /**
     * Return a fully-qualified session resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} environment
     * @param {string} session
     * @returns {string} Resource name string.
     */
    sessionPath(project, location, lake, environment, session) {
        return this.pathTemplates.sessionPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            environment: environment,
            session: session,
        });
    }
    /**
     * Parse the project from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSessionName(sessionName) {
        return this.pathTemplates.sessionPathTemplate.match(sessionName).project;
    }
    /**
     * Parse the location from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSessionName(sessionName) {
        return this.pathTemplates.sessionPathTemplate.match(sessionName).location;
    }
    /**
     * Parse the lake from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromSessionName(sessionName) {
        return this.pathTemplates.sessionPathTemplate.match(sessionName).lake;
    }
    /**
     * Parse the environment from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromSessionName(sessionName) {
        return this.pathTemplates.sessionPathTemplate.match(sessionName)
            .environment;
    }
    /**
     * Parse the session from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromSessionName(sessionName) {
        return this.pathTemplates.sessionPathTemplate.match(sessionName).session;
    }
    /**
     * Return a fully-qualified task resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} task
     * @returns {string} Resource name string.
     */
    taskPath(project, location, lake, task) {
        return this.pathTemplates.taskPathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            task: task,
        });
    }
    /**
     * Parse the project from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTaskName(taskName) {
        return this.pathTemplates.taskPathTemplate.match(taskName).project;
    }
    /**
     * Parse the location from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTaskName(taskName) {
        return this.pathTemplates.taskPathTemplate.match(taskName).location;
    }
    /**
     * Parse the lake from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromTaskName(taskName) {
        return this.pathTemplates.taskPathTemplate.match(taskName).lake;
    }
    /**
     * Parse the task from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the task.
     */
    matchTaskFromTaskName(taskName) {
        return this.pathTemplates.taskPathTemplate.match(taskName).task;
    }
    /**
     * Return a fully-qualified zone resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @returns {string} Resource name string.
     */
    zonePath(project, location, lake, zone) {
        return this.pathTemplates.zonePathTemplate.render({
            project: project,
            location: location,
            lake: lake,
            zone: zone,
        });
    }
    /**
     * Parse the project from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromZoneName(zoneName) {
        return this.pathTemplates.zonePathTemplate.match(zoneName).project;
    }
    /**
     * Parse the location from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromZoneName(zoneName) {
        return this.pathTemplates.zonePathTemplate.match(zoneName).location;
    }
    /**
     * Parse the lake from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromZoneName(zoneName) {
        return this.pathTemplates.zonePathTemplate.match(zoneName).lake;
    }
    /**
     * Parse the zone from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromZoneName(zoneName) {
        return this.pathTemplates.zonePathTemplate.match(zoneName).zone;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.dataplexServiceStub && !this._terminated) {
            return this.dataplexServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.locationsClient.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.DataplexServiceClient = DataplexServiceClient;
//# sourceMappingURL=dataplex_service_client.js.map