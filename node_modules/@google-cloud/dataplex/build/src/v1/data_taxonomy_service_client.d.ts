/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  DataTaxonomyService enables attribute-based governance. The resources
 *  currently offered include DataTaxonomy and DataAttribute.
 * @class
 * @memberof v1
 */
export declare class DataTaxonomyServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    dataTaxonomyServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of DataTaxonomyServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new DataTaxonomyServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Retrieves a DataTaxonomy resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the DataTaxonomy:
     *   projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.DataTaxonomy|DataTaxonomy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.get_data_taxonomy.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_GetDataTaxonomy_async
     */
    getDataTaxonomy(request?: protos.google.cloud.dataplex.v1.IGetDataTaxonomyRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IDataTaxonomy,
        protos.google.cloud.dataplex.v1.IGetDataTaxonomyRequest | undefined,
        {} | undefined
    ]>;
    getDataTaxonomy(request: protos.google.cloud.dataplex.v1.IGetDataTaxonomyRequest, options: CallOptions, callback: Callback<protos.google.cloud.dataplex.v1.IDataTaxonomy, protos.google.cloud.dataplex.v1.IGetDataTaxonomyRequest | null | undefined, {} | null | undefined>): void;
    getDataTaxonomy(request: protos.google.cloud.dataplex.v1.IGetDataTaxonomyRequest, callback: Callback<protos.google.cloud.dataplex.v1.IDataTaxonomy, protos.google.cloud.dataplex.v1.IGetDataTaxonomyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Retrieves a DataAttributeBinding resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the DataAttributeBinding:
     *   projects/{project_number}/locations/{location_id}/dataAttributeBindings/{data_attribute_binding_id}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.DataAttributeBinding|DataAttributeBinding}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.get_data_attribute_binding.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_GetDataAttributeBinding_async
     */
    getDataAttributeBinding(request?: protos.google.cloud.dataplex.v1.IGetDataAttributeBindingRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IDataAttributeBinding,
        (protos.google.cloud.dataplex.v1.IGetDataAttributeBindingRequest | undefined),
        {} | undefined
    ]>;
    getDataAttributeBinding(request: protos.google.cloud.dataplex.v1.IGetDataAttributeBindingRequest, options: CallOptions, callback: Callback<protos.google.cloud.dataplex.v1.IDataAttributeBinding, protos.google.cloud.dataplex.v1.IGetDataAttributeBindingRequest | null | undefined, {} | null | undefined>): void;
    getDataAttributeBinding(request: protos.google.cloud.dataplex.v1.IGetDataAttributeBindingRequest, callback: Callback<protos.google.cloud.dataplex.v1.IDataAttributeBinding, protos.google.cloud.dataplex.v1.IGetDataAttributeBindingRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Retrieves a Data Attribute resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the dataAttribute:
     *   projects/{project_number}/locations/{location_id}/dataTaxonomies/{dataTaxonomy}/attributes/{data_attribute_id}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.DataAttribute|DataAttribute}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.get_data_attribute.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_GetDataAttribute_async
     */
    getDataAttribute(request?: protos.google.cloud.dataplex.v1.IGetDataAttributeRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IDataAttribute,
        protos.google.cloud.dataplex.v1.IGetDataAttributeRequest | undefined,
        {} | undefined
    ]>;
    getDataAttribute(request: protos.google.cloud.dataplex.v1.IGetDataAttributeRequest, options: CallOptions, callback: Callback<protos.google.cloud.dataplex.v1.IDataAttribute, protos.google.cloud.dataplex.v1.IGetDataAttributeRequest | null | undefined, {} | null | undefined>): void;
    getDataAttribute(request: protos.google.cloud.dataplex.v1.IGetDataAttributeRequest, callback: Callback<protos.google.cloud.dataplex.v1.IDataAttribute, protos.google.cloud.dataplex.v1.IGetDataAttributeRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Create a DataTaxonomy resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the data taxonomy location, of the form:
     *   projects/{project_number}/locations/{location_id}
     *   where `location_id` refers to a GCP region.
     * @param {string} request.dataTaxonomyId
     *   Required. DataTaxonomy identifier.
     *   * Must contain only lowercase letters, numbers and hyphens.
     *   * Must start with a letter.
     *   * Must be between 1-63 characters.
     *   * Must end with a number or a letter.
     *   * Must be unique within the Project.
     * @param {google.cloud.dataplex.v1.DataTaxonomy} request.dataTaxonomy
     *   Required. DataTaxonomy resource.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.create_data_taxonomy.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_CreateDataTaxonomy_async
     */
    createDataTaxonomy(request?: protos.google.cloud.dataplex.v1.ICreateDataTaxonomyRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IDataTaxonomy, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createDataTaxonomy(request: protos.google.cloud.dataplex.v1.ICreateDataTaxonomyRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataTaxonomy, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createDataTaxonomy(request: protos.google.cloud.dataplex.v1.ICreateDataTaxonomyRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataTaxonomy, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createDataTaxonomy()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.create_data_taxonomy.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_CreateDataTaxonomy_async
     */
    checkCreateDataTaxonomyProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.DataTaxonomy, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Updates a DataTaxonomy resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update.
     * @param {google.cloud.dataplex.v1.DataTaxonomy} request.dataTaxonomy
     *   Required. Only fields specified in `update_mask` are updated.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.update_data_taxonomy.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_UpdateDataTaxonomy_async
     */
    updateDataTaxonomy(request?: protos.google.cloud.dataplex.v1.IUpdateDataTaxonomyRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IDataTaxonomy, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateDataTaxonomy(request: protos.google.cloud.dataplex.v1.IUpdateDataTaxonomyRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataTaxonomy, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateDataTaxonomy(request: protos.google.cloud.dataplex.v1.IUpdateDataTaxonomyRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataTaxonomy, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateDataTaxonomy()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.update_data_taxonomy.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_UpdateDataTaxonomy_async
     */
    checkUpdateDataTaxonomyProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.DataTaxonomy, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Deletes a DataTaxonomy resource. All attributes within the DataTaxonomy
     * must be deleted before the DataTaxonomy can be deleted.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the DataTaxonomy:
     *   projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}
     * @param {string} [request.etag]
     *   Optional. If the client provided etag value does not match the current etag
     *   value,the DeleteDataTaxonomy method returns an ABORTED error.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.delete_data_taxonomy.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_DeleteDataTaxonomy_async
     */
    deleteDataTaxonomy(request?: protos.google.cloud.dataplex.v1.IDeleteDataTaxonomyRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteDataTaxonomy(request: protos.google.cloud.dataplex.v1.IDeleteDataTaxonomyRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteDataTaxonomy(request: protos.google.cloud.dataplex.v1.IDeleteDataTaxonomyRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteDataTaxonomy()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.delete_data_taxonomy.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_DeleteDataTaxonomy_async
     */
    checkDeleteDataTaxonomyProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Create a DataAttributeBinding resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent data taxonomy
     *   projects/{project_number}/locations/{location_id}
     * @param {string} request.dataAttributeBindingId
     *   Required. DataAttributeBinding identifier.
     *   * Must contain only lowercase letters, numbers and hyphens.
     *   * Must start with a letter.
     *   * Must be between 1-63 characters.
     *   * Must end with a number or a letter.
     *   * Must be unique within the Location.
     * @param {google.cloud.dataplex.v1.DataAttributeBinding} request.dataAttributeBinding
     *   Required. DataAttributeBinding resource.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.create_data_attribute_binding.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_CreateDataAttributeBinding_async
     */
    createDataAttributeBinding(request?: protos.google.cloud.dataplex.v1.ICreateDataAttributeBindingRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IDataAttributeBinding, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createDataAttributeBinding(request: protos.google.cloud.dataplex.v1.ICreateDataAttributeBindingRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataAttributeBinding, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createDataAttributeBinding(request: protos.google.cloud.dataplex.v1.ICreateDataAttributeBindingRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataAttributeBinding, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createDataAttributeBinding()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.create_data_attribute_binding.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_CreateDataAttributeBinding_async
     */
    checkCreateDataAttributeBindingProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.DataAttributeBinding, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Updates a DataAttributeBinding resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update.
     * @param {google.cloud.dataplex.v1.DataAttributeBinding} request.dataAttributeBinding
     *   Required. Only fields specified in `update_mask` are updated.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.update_data_attribute_binding.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_UpdateDataAttributeBinding_async
     */
    updateDataAttributeBinding(request?: protos.google.cloud.dataplex.v1.IUpdateDataAttributeBindingRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IDataAttributeBinding, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateDataAttributeBinding(request: protos.google.cloud.dataplex.v1.IUpdateDataAttributeBindingRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataAttributeBinding, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateDataAttributeBinding(request: protos.google.cloud.dataplex.v1.IUpdateDataAttributeBindingRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataAttributeBinding, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateDataAttributeBinding()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.update_data_attribute_binding.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_UpdateDataAttributeBinding_async
     */
    checkUpdateDataAttributeBindingProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.DataAttributeBinding, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Deletes a DataAttributeBinding resource. All attributes within the
     * DataAttributeBinding must be deleted before the DataAttributeBinding can be
     * deleted.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the DataAttributeBinding:
     *   projects/{project_number}/locations/{location_id}/dataAttributeBindings/{data_attribute_binding_id}
     * @param {string} request.etag
     *   Required. If the client provided etag value does not match the current etag
     *   value, the DeleteDataAttributeBindingRequest method returns an ABORTED
     *   error response. Etags must be used when calling the
     *   DeleteDataAttributeBinding.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.delete_data_attribute_binding.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_DeleteDataAttributeBinding_async
     */
    deleteDataAttributeBinding(request?: protos.google.cloud.dataplex.v1.IDeleteDataAttributeBindingRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteDataAttributeBinding(request: protos.google.cloud.dataplex.v1.IDeleteDataAttributeBindingRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteDataAttributeBinding(request: protos.google.cloud.dataplex.v1.IDeleteDataAttributeBindingRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteDataAttributeBinding()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.delete_data_attribute_binding.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_DeleteDataAttributeBinding_async
     */
    checkDeleteDataAttributeBindingProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Create a DataAttribute resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent data taxonomy
     *   projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}
     * @param {string} request.dataAttributeId
     *   Required. DataAttribute identifier.
     *   * Must contain only lowercase letters, numbers and hyphens.
     *   * Must start with a letter.
     *   * Must be between 1-63 characters.
     *   * Must end with a number or a letter.
     *   * Must be unique within the DataTaxonomy.
     * @param {google.cloud.dataplex.v1.DataAttribute} request.dataAttribute
     *   Required. DataAttribute resource.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.create_data_attribute.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_CreateDataAttribute_async
     */
    createDataAttribute(request?: protos.google.cloud.dataplex.v1.ICreateDataAttributeRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IDataAttribute, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createDataAttribute(request: protos.google.cloud.dataplex.v1.ICreateDataAttributeRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataAttribute, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createDataAttribute(request: protos.google.cloud.dataplex.v1.ICreateDataAttributeRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataAttribute, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createDataAttribute()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.create_data_attribute.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_CreateDataAttribute_async
     */
    checkCreateDataAttributeProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.DataAttribute, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Updates a DataAttribute resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update.
     * @param {google.cloud.dataplex.v1.DataAttribute} request.dataAttribute
     *   Required. Only fields specified in `update_mask` are updated.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.update_data_attribute.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_UpdateDataAttribute_async
     */
    updateDataAttribute(request?: protos.google.cloud.dataplex.v1.IUpdateDataAttributeRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IDataAttribute, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateDataAttribute(request: protos.google.cloud.dataplex.v1.IUpdateDataAttributeRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataAttribute, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateDataAttribute(request: protos.google.cloud.dataplex.v1.IUpdateDataAttributeRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataAttribute, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateDataAttribute()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.update_data_attribute.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_UpdateDataAttribute_async
     */
    checkUpdateDataAttributeProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.DataAttribute, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Deletes a Data Attribute resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the DataAttribute:
     *   projects/{project_number}/locations/{location_id}/dataTaxonomies/{dataTaxonomy}/attributes/{data_attribute_id}
     * @param {string} [request.etag]
     *   Optional. If the client provided etag value does not match the current etag
     *   value, the DeleteDataAttribute method returns an ABORTED error response.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.delete_data_attribute.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_DeleteDataAttribute_async
     */
    deleteDataAttribute(request?: protos.google.cloud.dataplex.v1.IDeleteDataAttributeRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteDataAttribute(request: protos.google.cloud.dataplex.v1.IDeleteDataAttributeRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteDataAttribute(request: protos.google.cloud.dataplex.v1.IDeleteDataAttributeRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteDataAttribute()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.delete_data_attribute.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_DeleteDataAttribute_async
     */
    checkDeleteDataAttributeProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Lists DataTaxonomy resources in a project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the DataTaxonomy location, of the form:
     *   projects/{project_number}/locations/{location_id}
     *   where `location_id` refers to a GCP region.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of DataTaxonomies to return. The service may
     *   return fewer than this value. If unspecified, at most 10 DataTaxonomies
     *   will be returned. The maximum value is 1000; values above 1000 will be
     *   coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous ` ListDataTaxonomies` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to ` ListDataTaxonomies` must match the call that
     *   provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.DataTaxonomy|DataTaxonomy}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listDataTaxonomiesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDataTaxonomies(request?: protos.google.cloud.dataplex.v1.IListDataTaxonomiesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IDataTaxonomy[],
        protos.google.cloud.dataplex.v1.IListDataTaxonomiesRequest | null,
        protos.google.cloud.dataplex.v1.IListDataTaxonomiesResponse
    ]>;
    listDataTaxonomies(request: protos.google.cloud.dataplex.v1.IListDataTaxonomiesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListDataTaxonomiesRequest, protos.google.cloud.dataplex.v1.IListDataTaxonomiesResponse | null | undefined, protos.google.cloud.dataplex.v1.IDataTaxonomy>): void;
    listDataTaxonomies(request: protos.google.cloud.dataplex.v1.IListDataTaxonomiesRequest, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListDataTaxonomiesRequest, protos.google.cloud.dataplex.v1.IListDataTaxonomiesResponse | null | undefined, protos.google.cloud.dataplex.v1.IDataTaxonomy>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the DataTaxonomy location, of the form:
     *   projects/{project_number}/locations/{location_id}
     *   where `location_id` refers to a GCP region.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of DataTaxonomies to return. The service may
     *   return fewer than this value. If unspecified, at most 10 DataTaxonomies
     *   will be returned. The maximum value is 1000; values above 1000 will be
     *   coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous ` ListDataTaxonomies` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to ` ListDataTaxonomies` must match the call that
     *   provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.DataTaxonomy|DataTaxonomy} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDataTaxonomiesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDataTaxonomiesStream(request?: protos.google.cloud.dataplex.v1.IListDataTaxonomiesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listDataTaxonomies`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the DataTaxonomy location, of the form:
     *   projects/{project_number}/locations/{location_id}
     *   where `location_id` refers to a GCP region.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of DataTaxonomies to return. The service may
     *   return fewer than this value. If unspecified, at most 10 DataTaxonomies
     *   will be returned. The maximum value is 1000; values above 1000 will be
     *   coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous ` ListDataTaxonomies` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to ` ListDataTaxonomies` must match the call that
     *   provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.DataTaxonomy|DataTaxonomy}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.list_data_taxonomies.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_ListDataTaxonomies_async
     */
    listDataTaxonomiesAsync(request?: protos.google.cloud.dataplex.v1.IListDataTaxonomiesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dataplex.v1.IDataTaxonomy>;
    /**
     * Lists DataAttributeBinding resources in a project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the Location:
     *   projects/{project_number}/locations/{location_id}
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of DataAttributeBindings to return. The service
     *   may return fewer than this value. If unspecified, at most 10
     *   DataAttributeBindings will be returned. The maximum value is 1000; values
     *   above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListDataAttributeBindings`
     *   call. Provide this to retrieve the subsequent page. When paginating, all
     *   other parameters provided to `ListDataAttributeBindings` must match the
     *   call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     *   Filter using resource: filter=resource:"resource-name"
     *   Filter using attribute: filter=attributes:"attribute-name"
     *   Filter using attribute in paths list:
     *   filter=paths.attributes:"attribute-name"
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.DataAttributeBinding|DataAttributeBinding}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listDataAttributeBindingsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDataAttributeBindings(request?: protos.google.cloud.dataplex.v1.IListDataAttributeBindingsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IDataAttributeBinding[],
        protos.google.cloud.dataplex.v1.IListDataAttributeBindingsRequest | null,
        protos.google.cloud.dataplex.v1.IListDataAttributeBindingsResponse
    ]>;
    listDataAttributeBindings(request: protos.google.cloud.dataplex.v1.IListDataAttributeBindingsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListDataAttributeBindingsRequest, protos.google.cloud.dataplex.v1.IListDataAttributeBindingsResponse | null | undefined, protos.google.cloud.dataplex.v1.IDataAttributeBinding>): void;
    listDataAttributeBindings(request: protos.google.cloud.dataplex.v1.IListDataAttributeBindingsRequest, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListDataAttributeBindingsRequest, protos.google.cloud.dataplex.v1.IListDataAttributeBindingsResponse | null | undefined, protos.google.cloud.dataplex.v1.IDataAttributeBinding>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the Location:
     *   projects/{project_number}/locations/{location_id}
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of DataAttributeBindings to return. The service
     *   may return fewer than this value. If unspecified, at most 10
     *   DataAttributeBindings will be returned. The maximum value is 1000; values
     *   above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListDataAttributeBindings`
     *   call. Provide this to retrieve the subsequent page. When paginating, all
     *   other parameters provided to `ListDataAttributeBindings` must match the
     *   call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     *   Filter using resource: filter=resource:"resource-name"
     *   Filter using attribute: filter=attributes:"attribute-name"
     *   Filter using attribute in paths list:
     *   filter=paths.attributes:"attribute-name"
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.DataAttributeBinding|DataAttributeBinding} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDataAttributeBindingsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDataAttributeBindingsStream(request?: protos.google.cloud.dataplex.v1.IListDataAttributeBindingsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listDataAttributeBindings`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the Location:
     *   projects/{project_number}/locations/{location_id}
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of DataAttributeBindings to return. The service
     *   may return fewer than this value. If unspecified, at most 10
     *   DataAttributeBindings will be returned. The maximum value is 1000; values
     *   above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListDataAttributeBindings`
     *   call. Provide this to retrieve the subsequent page. When paginating, all
     *   other parameters provided to `ListDataAttributeBindings` must match the
     *   call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     *   Filter using resource: filter=resource:"resource-name"
     *   Filter using attribute: filter=attributes:"attribute-name"
     *   Filter using attribute in paths list:
     *   filter=paths.attributes:"attribute-name"
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.DataAttributeBinding|DataAttributeBinding}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.list_data_attribute_bindings.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_ListDataAttributeBindings_async
     */
    listDataAttributeBindingsAsync(request?: protos.google.cloud.dataplex.v1.IListDataAttributeBindingsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dataplex.v1.IDataAttributeBinding>;
    /**
     * Lists Data Attribute resources in a DataTaxonomy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the DataTaxonomy:
     *   projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of DataAttributes to return. The service may
     *   return fewer than this value. If unspecified, at most 10 dataAttributes
     *   will be returned. The maximum value is 1000; values above 1000 will be
     *   coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListDataAttributes` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListDataAttributes` must match the call that
     *   provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.DataAttribute|DataAttribute}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listDataAttributesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDataAttributes(request?: protos.google.cloud.dataplex.v1.IListDataAttributesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IDataAttribute[],
        protos.google.cloud.dataplex.v1.IListDataAttributesRequest | null,
        protos.google.cloud.dataplex.v1.IListDataAttributesResponse
    ]>;
    listDataAttributes(request: protos.google.cloud.dataplex.v1.IListDataAttributesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListDataAttributesRequest, protos.google.cloud.dataplex.v1.IListDataAttributesResponse | null | undefined, protos.google.cloud.dataplex.v1.IDataAttribute>): void;
    listDataAttributes(request: protos.google.cloud.dataplex.v1.IListDataAttributesRequest, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListDataAttributesRequest, protos.google.cloud.dataplex.v1.IListDataAttributesResponse | null | undefined, protos.google.cloud.dataplex.v1.IDataAttribute>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the DataTaxonomy:
     *   projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of DataAttributes to return. The service may
     *   return fewer than this value. If unspecified, at most 10 dataAttributes
     *   will be returned. The maximum value is 1000; values above 1000 will be
     *   coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListDataAttributes` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListDataAttributes` must match the call that
     *   provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.DataAttribute|DataAttribute} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDataAttributesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDataAttributesStream(request?: protos.google.cloud.dataplex.v1.IListDataAttributesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listDataAttributes`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the DataTaxonomy:
     *   projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of DataAttributes to return. The service may
     *   return fewer than this value. If unspecified, at most 10 dataAttributes
     *   will be returned. The maximum value is 1000; values above 1000 will be
     *   coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListDataAttributes` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListDataAttributes` must match the call that
     *   provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.DataAttribute|DataAttribute}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_taxonomy_service.list_data_attributes.js</caption>
     * region_tag:dataplex_v1_generated_DataTaxonomyService_ListDataAttributes_async
     */
    listDataAttributesAsync(request?: protos.google.cloud.dataplex.v1.IListDataAttributesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dataplex.v1.IDataAttribute>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified asset resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} asset
     * @returns {string} Resource name string.
     */
    assetPath(project: string, location: string, lake: string, zone: string, asset: string): string;
    /**
     * Parse the project from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAssetName(assetName: string): string | number;
    /**
     * Parse the location from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAssetName(assetName: string): string | number;
    /**
     * Parse the lake from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromAssetName(assetName: string): string | number;
    /**
     * Parse the zone from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromAssetName(assetName: string): string | number;
    /**
     * Parse the asset from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the asset.
     */
    matchAssetFromAssetName(assetName: string): string | number;
    /**
     * Return a fully-qualified content resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} content
     * @returns {string} Resource name string.
     */
    contentPath(project: string, location: string, lake: string, content: string): string;
    /**
     * Parse the project from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromContentName(contentName: string): string | number;
    /**
     * Parse the location from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromContentName(contentName: string): string | number;
    /**
     * Parse the lake from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromContentName(contentName: string): string | number;
    /**
     * Parse the content from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the content.
     */
    matchContentFromContentName(contentName: string): string | number;
    /**
     * Return a fully-qualified dataAttribute resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataTaxonomy
     * @param {string} data_attribute_id
     * @returns {string} Resource name string.
     */
    dataAttributePath(project: string, location: string, dataTaxonomy: string, dataAttributeId: string): string;
    /**
     * Parse the project from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataAttributeName(dataAttributeName: string): string | number;
    /**
     * Parse the location from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataAttributeName(dataAttributeName: string): string | number;
    /**
     * Parse the dataTaxonomy from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the dataTaxonomy.
     */
    matchDataTaxonomyFromDataAttributeName(dataAttributeName: string): string | number;
    /**
     * Parse the data_attribute_id from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the data_attribute_id.
     */
    matchDataAttributeIdFromDataAttributeName(dataAttributeName: string): string | number;
    /**
     * Return a fully-qualified dataAttributeBinding resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_attribute_binding_id
     * @returns {string} Resource name string.
     */
    dataAttributeBindingPath(project: string, location: string, dataAttributeBindingId: string): string;
    /**
     * Parse the project from DataAttributeBinding resource.
     *
     * @param {string} dataAttributeBindingName
     *   A fully-qualified path representing DataAttributeBinding resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataAttributeBindingName(dataAttributeBindingName: string): string | number;
    /**
     * Parse the location from DataAttributeBinding resource.
     *
     * @param {string} dataAttributeBindingName
     *   A fully-qualified path representing DataAttributeBinding resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataAttributeBindingName(dataAttributeBindingName: string): string | number;
    /**
     * Parse the data_attribute_binding_id from DataAttributeBinding resource.
     *
     * @param {string} dataAttributeBindingName
     *   A fully-qualified path representing DataAttributeBinding resource.
     * @returns {string} A string representing the data_attribute_binding_id.
     */
    matchDataAttributeBindingIdFromDataAttributeBindingName(dataAttributeBindingName: string): string | number;
    /**
     * Return a fully-qualified dataScan resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataScan
     * @returns {string} Resource name string.
     */
    dataScanPath(project: string, location: string, dataScan: string): string;
    /**
     * Parse the project from DataScan resource.
     *
     * @param {string} dataScanName
     *   A fully-qualified path representing DataScan resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataScanName(dataScanName: string): string | number;
    /**
     * Parse the location from DataScan resource.
     *
     * @param {string} dataScanName
     *   A fully-qualified path representing DataScan resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataScanName(dataScanName: string): string | number;
    /**
     * Parse the dataScan from DataScan resource.
     *
     * @param {string} dataScanName
     *   A fully-qualified path representing DataScan resource.
     * @returns {string} A string representing the dataScan.
     */
    matchDataScanFromDataScanName(dataScanName: string): string | number;
    /**
     * Return a fully-qualified dataScanJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataScan
     * @param {string} job
     * @returns {string} Resource name string.
     */
    dataScanJobPath(project: string, location: string, dataScan: string, job: string): string;
    /**
     * Parse the project from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataScanJobName(dataScanJobName: string): string | number;
    /**
     * Parse the location from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataScanJobName(dataScanJobName: string): string | number;
    /**
     * Parse the dataScan from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the dataScan.
     */
    matchDataScanFromDataScanJobName(dataScanJobName: string): string | number;
    /**
     * Parse the job from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromDataScanJobName(dataScanJobName: string): string | number;
    /**
     * Return a fully-qualified dataTaxonomy resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_taxonomy_id
     * @returns {string} Resource name string.
     */
    dataTaxonomyPath(project: string, location: string, dataTaxonomyId: string): string;
    /**
     * Parse the project from DataTaxonomy resource.
     *
     * @param {string} dataTaxonomyName
     *   A fully-qualified path representing DataTaxonomy resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataTaxonomyName(dataTaxonomyName: string): string | number;
    /**
     * Parse the location from DataTaxonomy resource.
     *
     * @param {string} dataTaxonomyName
     *   A fully-qualified path representing DataTaxonomy resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataTaxonomyName(dataTaxonomyName: string): string | number;
    /**
     * Parse the data_taxonomy_id from DataTaxonomy resource.
     *
     * @param {string} dataTaxonomyName
     *   A fully-qualified path representing DataTaxonomy resource.
     * @returns {string} A string representing the data_taxonomy_id.
     */
    matchDataTaxonomyIdFromDataTaxonomyName(dataTaxonomyName: string): string | number;
    /**
     * Return a fully-qualified entity resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} entity
     * @returns {string} Resource name string.
     */
    entityPath(project: string, location: string, lake: string, zone: string, entity: string): string;
    /**
     * Parse the project from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntityName(entityName: string): string | number;
    /**
     * Parse the location from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntityName(entityName: string): string | number;
    /**
     * Parse the lake from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromEntityName(entityName: string): string | number;
    /**
     * Parse the zone from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromEntityName(entityName: string): string | number;
    /**
     * Parse the entity from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the entity.
     */
    matchEntityFromEntityName(entityName: string): string | number;
    /**
     * Return a fully-qualified environment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} environment
     * @returns {string} Resource name string.
     */
    environmentPath(project: string, location: string, lake: string, environment: string): string;
    /**
     * Parse the project from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the location from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the lake from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the environment from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromEnvironmentName(environmentName: string): string | number;
    /**
     * Return a fully-qualified job resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} task
     * @param {string} job
     * @returns {string} Resource name string.
     */
    jobPath(project: string, location: string, lake: string, task: string, job: string): string;
    /**
     * Parse the project from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromJobName(jobName: string): string | number;
    /**
     * Parse the location from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromJobName(jobName: string): string | number;
    /**
     * Parse the lake from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromJobName(jobName: string): string | number;
    /**
     * Parse the task from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the task.
     */
    matchTaskFromJobName(jobName: string): string | number;
    /**
     * Parse the job from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromJobName(jobName: string): string | number;
    /**
     * Return a fully-qualified lake resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @returns {string} Resource name string.
     */
    lakePath(project: string, location: string, lake: string): string;
    /**
     * Parse the project from Lake resource.
     *
     * @param {string} lakeName
     *   A fully-qualified path representing Lake resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLakeName(lakeName: string): string | number;
    /**
     * Parse the location from Lake resource.
     *
     * @param {string} lakeName
     *   A fully-qualified path representing Lake resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLakeName(lakeName: string): string | number;
    /**
     * Parse the lake from Lake resource.
     *
     * @param {string} lakeName
     *   A fully-qualified path representing Lake resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromLakeName(lakeName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified partition resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} entity
     * @param {string} partition
     * @returns {string} Resource name string.
     */
    partitionPath(project: string, location: string, lake: string, zone: string, entity: string, partition: string): string;
    /**
     * Parse the project from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPartitionName(partitionName: string): string | number;
    /**
     * Parse the location from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPartitionName(partitionName: string): string | number;
    /**
     * Parse the lake from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromPartitionName(partitionName: string): string | number;
    /**
     * Parse the zone from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromPartitionName(partitionName: string): string | number;
    /**
     * Parse the entity from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the entity.
     */
    matchEntityFromPartitionName(partitionName: string): string | number;
    /**
     * Parse the partition from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the partition.
     */
    matchPartitionFromPartitionName(partitionName: string): string | number;
    /**
     * Return a fully-qualified projectLocationLakeAction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} action
     * @returns {string} Resource name string.
     */
    projectLocationLakeActionPath(project: string, location: string, lake: string, action: string): string;
    /**
     * Parse the project from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationLakeActionName(projectLocationLakeActionName: string): string | number;
    /**
     * Parse the location from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationLakeActionName(projectLocationLakeActionName: string): string | number;
    /**
     * Parse the lake from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromProjectLocationLakeActionName(projectLocationLakeActionName: string): string | number;
    /**
     * Parse the action from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the action.
     */
    matchActionFromProjectLocationLakeActionName(projectLocationLakeActionName: string): string | number;
    /**
     * Return a fully-qualified projectLocationLakeZoneAction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} action
     * @returns {string} Resource name string.
     */
    projectLocationLakeZoneActionPath(project: string, location: string, lake: string, zone: string, action: string): string;
    /**
     * Parse the project from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string): string | number;
    /**
     * Parse the location from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string): string | number;
    /**
     * Parse the lake from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string): string | number;
    /**
     * Parse the zone from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string): string | number;
    /**
     * Parse the action from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the action.
     */
    matchActionFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string): string | number;
    /**
     * Return a fully-qualified projectLocationLakeZoneAssetAction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} asset
     * @param {string} action
     * @returns {string} Resource name string.
     */
    projectLocationLakeZoneAssetActionPath(project: string, location: string, lake: string, zone: string, asset: string, action: string): string;
    /**
     * Parse the project from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Parse the location from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Parse the lake from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Parse the zone from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Parse the asset from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the asset.
     */
    matchAssetFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Parse the action from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the action.
     */
    matchActionFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Return a fully-qualified session resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} environment
     * @param {string} session
     * @returns {string} Resource name string.
     */
    sessionPath(project: string, location: string, lake: string, environment: string, session: string): string;
    /**
     * Parse the project from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSessionName(sessionName: string): string | number;
    /**
     * Parse the location from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSessionName(sessionName: string): string | number;
    /**
     * Parse the lake from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromSessionName(sessionName: string): string | number;
    /**
     * Parse the environment from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromSessionName(sessionName: string): string | number;
    /**
     * Parse the session from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromSessionName(sessionName: string): string | number;
    /**
     * Return a fully-qualified task resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} task
     * @returns {string} Resource name string.
     */
    taskPath(project: string, location: string, lake: string, task: string): string;
    /**
     * Parse the project from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTaskName(taskName: string): string | number;
    /**
     * Parse the location from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTaskName(taskName: string): string | number;
    /**
     * Parse the lake from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromTaskName(taskName: string): string | number;
    /**
     * Parse the task from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the task.
     */
    matchTaskFromTaskName(taskName: string): string | number;
    /**
     * Return a fully-qualified zone resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @returns {string} Resource name string.
     */
    zonePath(project: string, location: string, lake: string, zone: string): string;
    /**
     * Parse the project from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromZoneName(zoneName: string): string | number;
    /**
     * Parse the location from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromZoneName(zoneName: string): string | number;
    /**
     * Parse the lake from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromZoneName(zoneName: string): string | number;
    /**
     * Parse the zone from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromZoneName(zoneName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
