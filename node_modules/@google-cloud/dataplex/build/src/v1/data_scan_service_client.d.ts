/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  DataScanService manages DataScan resources which can be configured to run
 *  various types of data scanning workload and generate enriched metadata (e.g.
 *  Data Profile, Data Quality) for the data source.
 * @class
 * @memberof v1
 */
export declare class DataScanServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    dataScanServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of DataScanServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new DataScanServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets a DataScan resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the dataScan:
     *   `projects/{project}/locations/{location_id}/dataScans/{data_scan_id}`
     *   where `project` refers to a *project_id* or *project_number* and
     *   `location_id` refers to a GCP region.
     * @param {google.cloud.dataplex.v1.GetDataScanRequest.DataScanView} [request.view]
     *   Optional. Select the DataScan view to return. Defaults to `BASIC`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.DataScan|DataScan}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_scan_service.get_data_scan.js</caption>
     * region_tag:dataplex_v1_generated_DataScanService_GetDataScan_async
     */
    getDataScan(request?: protos.google.cloud.dataplex.v1.IGetDataScanRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IDataScan,
        protos.google.cloud.dataplex.v1.IGetDataScanRequest | undefined,
        {} | undefined
    ]>;
    getDataScan(request: protos.google.cloud.dataplex.v1.IGetDataScanRequest, options: CallOptions, callback: Callback<protos.google.cloud.dataplex.v1.IDataScan, protos.google.cloud.dataplex.v1.IGetDataScanRequest | null | undefined, {} | null | undefined>): void;
    getDataScan(request: protos.google.cloud.dataplex.v1.IGetDataScanRequest, callback: Callback<protos.google.cloud.dataplex.v1.IDataScan, protos.google.cloud.dataplex.v1.IGetDataScanRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Runs an on-demand execution of a DataScan
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the DataScan:
     *   `projects/{project}/locations/{location_id}/dataScans/{data_scan_id}`.
     *   where `project` refers to a *project_id* or *project_number* and
     *   `location_id` refers to a GCP region.
     *
     *   Only **OnDemand** data scans are allowed.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.RunDataScanResponse|RunDataScanResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_scan_service.run_data_scan.js</caption>
     * region_tag:dataplex_v1_generated_DataScanService_RunDataScan_async
     */
    runDataScan(request?: protos.google.cloud.dataplex.v1.IRunDataScanRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IRunDataScanResponse,
        protos.google.cloud.dataplex.v1.IRunDataScanRequest | undefined,
        {} | undefined
    ]>;
    runDataScan(request: protos.google.cloud.dataplex.v1.IRunDataScanRequest, options: CallOptions, callback: Callback<protos.google.cloud.dataplex.v1.IRunDataScanResponse, protos.google.cloud.dataplex.v1.IRunDataScanRequest | null | undefined, {} | null | undefined>): void;
    runDataScan(request: protos.google.cloud.dataplex.v1.IRunDataScanRequest, callback: Callback<protos.google.cloud.dataplex.v1.IRunDataScanResponse, protos.google.cloud.dataplex.v1.IRunDataScanRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets a DataScanJob resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the DataScanJob:
     *   `projects/{project}/locations/{location_id}/dataScans/{data_scan_id}/jobs/{data_scan_job_id}`
     *   where `project` refers to a *project_id* or *project_number* and
     *   `location_id` refers to a GCP region.
     * @param {google.cloud.dataplex.v1.GetDataScanJobRequest.DataScanJobView} [request.view]
     *   Optional. Select the DataScanJob view to return. Defaults to `BASIC`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.DataScanJob|DataScanJob}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_scan_service.get_data_scan_job.js</caption>
     * region_tag:dataplex_v1_generated_DataScanService_GetDataScanJob_async
     */
    getDataScanJob(request?: protos.google.cloud.dataplex.v1.IGetDataScanJobRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IDataScanJob,
        protos.google.cloud.dataplex.v1.IGetDataScanJobRequest | undefined,
        {} | undefined
    ]>;
    getDataScanJob(request: protos.google.cloud.dataplex.v1.IGetDataScanJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.dataplex.v1.IDataScanJob, protos.google.cloud.dataplex.v1.IGetDataScanJobRequest | null | undefined, {} | null | undefined>): void;
    getDataScanJob(request: protos.google.cloud.dataplex.v1.IGetDataScanJobRequest, callback: Callback<protos.google.cloud.dataplex.v1.IDataScanJob, protos.google.cloud.dataplex.v1.IGetDataScanJobRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a DataScan resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent location:
     *   `projects/{project}/locations/{location_id}`
     *   where `project` refers to a *project_id* or *project_number* and
     *   `location_id` refers to a GCP region.
     * @param {google.cloud.dataplex.v1.DataScan} request.dataScan
     *   Required. DataScan resource.
     * @param {string} request.dataScanId
     *   Required. DataScan identifier.
     *
     *   * Must contain only lowercase letters, numbers and hyphens.
     *   * Must start with a letter.
     *   * Must end with a number or a letter.
     *   * Must be between 1-63 characters.
     *   * Must be unique within the customer project / location.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is `false`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_scan_service.create_data_scan.js</caption>
     * region_tag:dataplex_v1_generated_DataScanService_CreateDataScan_async
     */
    createDataScan(request?: protos.google.cloud.dataplex.v1.ICreateDataScanRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IDataScan, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createDataScan(request: protos.google.cloud.dataplex.v1.ICreateDataScanRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataScan, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createDataScan(request: protos.google.cloud.dataplex.v1.ICreateDataScanRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataScan, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createDataScan()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_scan_service.create_data_scan.js</caption>
     * region_tag:dataplex_v1_generated_DataScanService_CreateDataScan_async
     */
    checkCreateDataScanProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.DataScan, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Updates a DataScan resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.dataplex.v1.DataScan} request.dataScan
     *   Required. DataScan resource to be updated.
     *
     *   Only fields specified in `update_mask` are updated.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is `false`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_scan_service.update_data_scan.js</caption>
     * region_tag:dataplex_v1_generated_DataScanService_UpdateDataScan_async
     */
    updateDataScan(request?: protos.google.cloud.dataplex.v1.IUpdateDataScanRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IDataScan, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateDataScan(request: protos.google.cloud.dataplex.v1.IUpdateDataScanRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataScan, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateDataScan(request: protos.google.cloud.dataplex.v1.IUpdateDataScanRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IDataScan, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateDataScan()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_scan_service.update_data_scan.js</caption>
     * region_tag:dataplex_v1_generated_DataScanService_UpdateDataScan_async
     */
    checkUpdateDataScanProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.DataScan, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Deletes a DataScan resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the dataScan:
     *   `projects/{project}/locations/{location_id}/dataScans/{data_scan_id}`
     *   where `project` refers to a *project_id* or *project_number* and
     *   `location_id` refers to a GCP region.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_scan_service.delete_data_scan.js</caption>
     * region_tag:dataplex_v1_generated_DataScanService_DeleteDataScan_async
     */
    deleteDataScan(request?: protos.google.cloud.dataplex.v1.IDeleteDataScanRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteDataScan(request: protos.google.cloud.dataplex.v1.IDeleteDataScanRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteDataScan(request: protos.google.cloud.dataplex.v1.IDeleteDataScanRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteDataScan()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_scan_service.delete_data_scan.js</caption>
     * region_tag:dataplex_v1_generated_DataScanService_DeleteDataScan_async
     */
    checkDeleteDataScanProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Lists DataScans.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent location:
     *   `projects/{project}/locations/{location_id}`
     *   where `project` refers to a *project_id* or *project_number* and
     *   `location_id` refers to a GCP region.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of dataScans to return. The service may return
     *   fewer than this value. If unspecified, at most 500 scans will be returned.
     *   The maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListDataScans` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListDataScans` must match the call that provided the
     *   page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields (`name` or `create_time`) for the result.
     *   If not specified, the ordering is undefined.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.DataScan|DataScan}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listDataScansAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDataScans(request?: protos.google.cloud.dataplex.v1.IListDataScansRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IDataScan[],
        protos.google.cloud.dataplex.v1.IListDataScansRequest | null,
        protos.google.cloud.dataplex.v1.IListDataScansResponse
    ]>;
    listDataScans(request: protos.google.cloud.dataplex.v1.IListDataScansRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListDataScansRequest, protos.google.cloud.dataplex.v1.IListDataScansResponse | null | undefined, protos.google.cloud.dataplex.v1.IDataScan>): void;
    listDataScans(request: protos.google.cloud.dataplex.v1.IListDataScansRequest, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListDataScansRequest, protos.google.cloud.dataplex.v1.IListDataScansResponse | null | undefined, protos.google.cloud.dataplex.v1.IDataScan>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent location:
     *   `projects/{project}/locations/{location_id}`
     *   where `project` refers to a *project_id* or *project_number* and
     *   `location_id` refers to a GCP region.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of dataScans to return. The service may return
     *   fewer than this value. If unspecified, at most 500 scans will be returned.
     *   The maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListDataScans` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListDataScans` must match the call that provided the
     *   page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields (`name` or `create_time`) for the result.
     *   If not specified, the ordering is undefined.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.DataScan|DataScan} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDataScansAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDataScansStream(request?: protos.google.cloud.dataplex.v1.IListDataScansRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listDataScans`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent location:
     *   `projects/{project}/locations/{location_id}`
     *   where `project` refers to a *project_id* or *project_number* and
     *   `location_id` refers to a GCP region.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of dataScans to return. The service may return
     *   fewer than this value. If unspecified, at most 500 scans will be returned.
     *   The maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListDataScans` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListDataScans` must match the call that provided the
     *   page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields (`name` or `create_time`) for the result.
     *   If not specified, the ordering is undefined.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.DataScan|DataScan}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_scan_service.list_data_scans.js</caption>
     * region_tag:dataplex_v1_generated_DataScanService_ListDataScans_async
     */
    listDataScansAsync(request?: protos.google.cloud.dataplex.v1.IListDataScansRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dataplex.v1.IDataScan>;
    /**
     * Lists DataScanJobs under the given DataScan.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent environment:
     *   `projects/{project}/locations/{location_id}/dataScans/{data_scan_id}`
     *   where `project` refers to a *project_id* or *project_number* and
     *   `location_id` refers to a GCP region.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of DataScanJobs to return. The service may return
     *   fewer than this value. If unspecified, at most 10 DataScanJobs will be
     *   returned. The maximum value is 1000; values above 1000 will be coerced to
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListDataScanJobs` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListDataScanJobs` must match the call that provided
     *   the page token.
     * @param {string} [request.filter]
     *   Optional. An expression for filtering the results of the ListDataScanJobs
     *   request.
     *
     *   If unspecified, all datascan jobs will be returned. Multiple filters can be
     *   applied (with `AND`, `OR` logical operators). Filters are case-sensitive.
     *
     *   Allowed fields are:
     *
     *   - `start_time`
     *   - `end_time`
     *
     *   `start_time` and `end_time` expect RFC-3339 formatted strings (e.g.
     *   2018-10-08T18:30:00-07:00).
     *
     *   For instance, 'start_time > 2018-10-08T00:00:00.123456789Z AND end_time <
     *   2018-10-09T00:00:00.123456789Z' limits results to DataScanJobs between
     *   specified start and end times.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.DataScanJob|DataScanJob}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listDataScanJobsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDataScanJobs(request?: protos.google.cloud.dataplex.v1.IListDataScanJobsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IDataScanJob[],
        protos.google.cloud.dataplex.v1.IListDataScanJobsRequest | null,
        protos.google.cloud.dataplex.v1.IListDataScanJobsResponse
    ]>;
    listDataScanJobs(request: protos.google.cloud.dataplex.v1.IListDataScanJobsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListDataScanJobsRequest, protos.google.cloud.dataplex.v1.IListDataScanJobsResponse | null | undefined, protos.google.cloud.dataplex.v1.IDataScanJob>): void;
    listDataScanJobs(request: protos.google.cloud.dataplex.v1.IListDataScanJobsRequest, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListDataScanJobsRequest, protos.google.cloud.dataplex.v1.IListDataScanJobsResponse | null | undefined, protos.google.cloud.dataplex.v1.IDataScanJob>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent environment:
     *   `projects/{project}/locations/{location_id}/dataScans/{data_scan_id}`
     *   where `project` refers to a *project_id* or *project_number* and
     *   `location_id` refers to a GCP region.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of DataScanJobs to return. The service may return
     *   fewer than this value. If unspecified, at most 10 DataScanJobs will be
     *   returned. The maximum value is 1000; values above 1000 will be coerced to
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListDataScanJobs` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListDataScanJobs` must match the call that provided
     *   the page token.
     * @param {string} [request.filter]
     *   Optional. An expression for filtering the results of the ListDataScanJobs
     *   request.
     *
     *   If unspecified, all datascan jobs will be returned. Multiple filters can be
     *   applied (with `AND`, `OR` logical operators). Filters are case-sensitive.
     *
     *   Allowed fields are:
     *
     *   - `start_time`
     *   - `end_time`
     *
     *   `start_time` and `end_time` expect RFC-3339 formatted strings (e.g.
     *   2018-10-08T18:30:00-07:00).
     *
     *   For instance, 'start_time > 2018-10-08T00:00:00.123456789Z AND end_time <
     *   2018-10-09T00:00:00.123456789Z' limits results to DataScanJobs between
     *   specified start and end times.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.DataScanJob|DataScanJob} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDataScanJobsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDataScanJobsStream(request?: protos.google.cloud.dataplex.v1.IListDataScanJobsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listDataScanJobs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent environment:
     *   `projects/{project}/locations/{location_id}/dataScans/{data_scan_id}`
     *   where `project` refers to a *project_id* or *project_number* and
     *   `location_id` refers to a GCP region.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of DataScanJobs to return. The service may return
     *   fewer than this value. If unspecified, at most 10 DataScanJobs will be
     *   returned. The maximum value is 1000; values above 1000 will be coerced to
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListDataScanJobs` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListDataScanJobs` must match the call that provided
     *   the page token.
     * @param {string} [request.filter]
     *   Optional. An expression for filtering the results of the ListDataScanJobs
     *   request.
     *
     *   If unspecified, all datascan jobs will be returned. Multiple filters can be
     *   applied (with `AND`, `OR` logical operators). Filters are case-sensitive.
     *
     *   Allowed fields are:
     *
     *   - `start_time`
     *   - `end_time`
     *
     *   `start_time` and `end_time` expect RFC-3339 formatted strings (e.g.
     *   2018-10-08T18:30:00-07:00).
     *
     *   For instance, 'start_time > 2018-10-08T00:00:00.123456789Z AND end_time <
     *   2018-10-09T00:00:00.123456789Z' limits results to DataScanJobs between
     *   specified start and end times.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.DataScanJob|DataScanJob}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/data_scan_service.list_data_scan_jobs.js</caption>
     * region_tag:dataplex_v1_generated_DataScanService_ListDataScanJobs_async
     */
    listDataScanJobsAsync(request?: protos.google.cloud.dataplex.v1.IListDataScanJobsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dataplex.v1.IDataScanJob>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified asset resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} asset
     * @returns {string} Resource name string.
     */
    assetPath(project: string, location: string, lake: string, zone: string, asset: string): string;
    /**
     * Parse the project from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAssetName(assetName: string): string | number;
    /**
     * Parse the location from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAssetName(assetName: string): string | number;
    /**
     * Parse the lake from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromAssetName(assetName: string): string | number;
    /**
     * Parse the zone from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromAssetName(assetName: string): string | number;
    /**
     * Parse the asset from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the asset.
     */
    matchAssetFromAssetName(assetName: string): string | number;
    /**
     * Return a fully-qualified content resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} content
     * @returns {string} Resource name string.
     */
    contentPath(project: string, location: string, lake: string, content: string): string;
    /**
     * Parse the project from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromContentName(contentName: string): string | number;
    /**
     * Parse the location from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromContentName(contentName: string): string | number;
    /**
     * Parse the lake from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromContentName(contentName: string): string | number;
    /**
     * Parse the content from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the content.
     */
    matchContentFromContentName(contentName: string): string | number;
    /**
     * Return a fully-qualified dataAttribute resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataTaxonomy
     * @param {string} data_attribute_id
     * @returns {string} Resource name string.
     */
    dataAttributePath(project: string, location: string, dataTaxonomy: string, dataAttributeId: string): string;
    /**
     * Parse the project from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataAttributeName(dataAttributeName: string): string | number;
    /**
     * Parse the location from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataAttributeName(dataAttributeName: string): string | number;
    /**
     * Parse the dataTaxonomy from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the dataTaxonomy.
     */
    matchDataTaxonomyFromDataAttributeName(dataAttributeName: string): string | number;
    /**
     * Parse the data_attribute_id from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the data_attribute_id.
     */
    matchDataAttributeIdFromDataAttributeName(dataAttributeName: string): string | number;
    /**
     * Return a fully-qualified dataAttributeBinding resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_attribute_binding_id
     * @returns {string} Resource name string.
     */
    dataAttributeBindingPath(project: string, location: string, dataAttributeBindingId: string): string;
    /**
     * Parse the project from DataAttributeBinding resource.
     *
     * @param {string} dataAttributeBindingName
     *   A fully-qualified path representing DataAttributeBinding resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataAttributeBindingName(dataAttributeBindingName: string): string | number;
    /**
     * Parse the location from DataAttributeBinding resource.
     *
     * @param {string} dataAttributeBindingName
     *   A fully-qualified path representing DataAttributeBinding resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataAttributeBindingName(dataAttributeBindingName: string): string | number;
    /**
     * Parse the data_attribute_binding_id from DataAttributeBinding resource.
     *
     * @param {string} dataAttributeBindingName
     *   A fully-qualified path representing DataAttributeBinding resource.
     * @returns {string} A string representing the data_attribute_binding_id.
     */
    matchDataAttributeBindingIdFromDataAttributeBindingName(dataAttributeBindingName: string): string | number;
    /**
     * Return a fully-qualified dataScan resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataScan
     * @returns {string} Resource name string.
     */
    dataScanPath(project: string, location: string, dataScan: string): string;
    /**
     * Parse the project from DataScan resource.
     *
     * @param {string} dataScanName
     *   A fully-qualified path representing DataScan resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataScanName(dataScanName: string): string | number;
    /**
     * Parse the location from DataScan resource.
     *
     * @param {string} dataScanName
     *   A fully-qualified path representing DataScan resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataScanName(dataScanName: string): string | number;
    /**
     * Parse the dataScan from DataScan resource.
     *
     * @param {string} dataScanName
     *   A fully-qualified path representing DataScan resource.
     * @returns {string} A string representing the dataScan.
     */
    matchDataScanFromDataScanName(dataScanName: string): string | number;
    /**
     * Return a fully-qualified dataScanJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataScan
     * @param {string} job
     * @returns {string} Resource name string.
     */
    dataScanJobPath(project: string, location: string, dataScan: string, job: string): string;
    /**
     * Parse the project from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataScanJobName(dataScanJobName: string): string | number;
    /**
     * Parse the location from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataScanJobName(dataScanJobName: string): string | number;
    /**
     * Parse the dataScan from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the dataScan.
     */
    matchDataScanFromDataScanJobName(dataScanJobName: string): string | number;
    /**
     * Parse the job from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromDataScanJobName(dataScanJobName: string): string | number;
    /**
     * Return a fully-qualified dataTaxonomy resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_taxonomy_id
     * @returns {string} Resource name string.
     */
    dataTaxonomyPath(project: string, location: string, dataTaxonomyId: string): string;
    /**
     * Parse the project from DataTaxonomy resource.
     *
     * @param {string} dataTaxonomyName
     *   A fully-qualified path representing DataTaxonomy resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataTaxonomyName(dataTaxonomyName: string): string | number;
    /**
     * Parse the location from DataTaxonomy resource.
     *
     * @param {string} dataTaxonomyName
     *   A fully-qualified path representing DataTaxonomy resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataTaxonomyName(dataTaxonomyName: string): string | number;
    /**
     * Parse the data_taxonomy_id from DataTaxonomy resource.
     *
     * @param {string} dataTaxonomyName
     *   A fully-qualified path representing DataTaxonomy resource.
     * @returns {string} A string representing the data_taxonomy_id.
     */
    matchDataTaxonomyIdFromDataTaxonomyName(dataTaxonomyName: string): string | number;
    /**
     * Return a fully-qualified entity resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} entity
     * @returns {string} Resource name string.
     */
    entityPath(project: string, location: string, lake: string, zone: string, entity: string): string;
    /**
     * Parse the project from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntityName(entityName: string): string | number;
    /**
     * Parse the location from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntityName(entityName: string): string | number;
    /**
     * Parse the lake from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromEntityName(entityName: string): string | number;
    /**
     * Parse the zone from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromEntityName(entityName: string): string | number;
    /**
     * Parse the entity from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the entity.
     */
    matchEntityFromEntityName(entityName: string): string | number;
    /**
     * Return a fully-qualified environment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} environment
     * @returns {string} Resource name string.
     */
    environmentPath(project: string, location: string, lake: string, environment: string): string;
    /**
     * Parse the project from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the location from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the lake from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the environment from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromEnvironmentName(environmentName: string): string | number;
    /**
     * Return a fully-qualified job resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} task
     * @param {string} job
     * @returns {string} Resource name string.
     */
    jobPath(project: string, location: string, lake: string, task: string, job: string): string;
    /**
     * Parse the project from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromJobName(jobName: string): string | number;
    /**
     * Parse the location from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromJobName(jobName: string): string | number;
    /**
     * Parse the lake from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromJobName(jobName: string): string | number;
    /**
     * Parse the task from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the task.
     */
    matchTaskFromJobName(jobName: string): string | number;
    /**
     * Parse the job from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromJobName(jobName: string): string | number;
    /**
     * Return a fully-qualified lake resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @returns {string} Resource name string.
     */
    lakePath(project: string, location: string, lake: string): string;
    /**
     * Parse the project from Lake resource.
     *
     * @param {string} lakeName
     *   A fully-qualified path representing Lake resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLakeName(lakeName: string): string | number;
    /**
     * Parse the location from Lake resource.
     *
     * @param {string} lakeName
     *   A fully-qualified path representing Lake resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLakeName(lakeName: string): string | number;
    /**
     * Parse the lake from Lake resource.
     *
     * @param {string} lakeName
     *   A fully-qualified path representing Lake resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromLakeName(lakeName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified partition resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} entity
     * @param {string} partition
     * @returns {string} Resource name string.
     */
    partitionPath(project: string, location: string, lake: string, zone: string, entity: string, partition: string): string;
    /**
     * Parse the project from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPartitionName(partitionName: string): string | number;
    /**
     * Parse the location from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPartitionName(partitionName: string): string | number;
    /**
     * Parse the lake from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromPartitionName(partitionName: string): string | number;
    /**
     * Parse the zone from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromPartitionName(partitionName: string): string | number;
    /**
     * Parse the entity from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the entity.
     */
    matchEntityFromPartitionName(partitionName: string): string | number;
    /**
     * Parse the partition from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the partition.
     */
    matchPartitionFromPartitionName(partitionName: string): string | number;
    /**
     * Return a fully-qualified projectLocationLakeAction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} action
     * @returns {string} Resource name string.
     */
    projectLocationLakeActionPath(project: string, location: string, lake: string, action: string): string;
    /**
     * Parse the project from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationLakeActionName(projectLocationLakeActionName: string): string | number;
    /**
     * Parse the location from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationLakeActionName(projectLocationLakeActionName: string): string | number;
    /**
     * Parse the lake from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromProjectLocationLakeActionName(projectLocationLakeActionName: string): string | number;
    /**
     * Parse the action from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the action.
     */
    matchActionFromProjectLocationLakeActionName(projectLocationLakeActionName: string): string | number;
    /**
     * Return a fully-qualified projectLocationLakeZoneAction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} action
     * @returns {string} Resource name string.
     */
    projectLocationLakeZoneActionPath(project: string, location: string, lake: string, zone: string, action: string): string;
    /**
     * Parse the project from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string): string | number;
    /**
     * Parse the location from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string): string | number;
    /**
     * Parse the lake from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string): string | number;
    /**
     * Parse the zone from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string): string | number;
    /**
     * Parse the action from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the action.
     */
    matchActionFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string): string | number;
    /**
     * Return a fully-qualified projectLocationLakeZoneAssetAction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} asset
     * @param {string} action
     * @returns {string} Resource name string.
     */
    projectLocationLakeZoneAssetActionPath(project: string, location: string, lake: string, zone: string, asset: string, action: string): string;
    /**
     * Parse the project from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Parse the location from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Parse the lake from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Parse the zone from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Parse the asset from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the asset.
     */
    matchAssetFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Parse the action from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the action.
     */
    matchActionFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Return a fully-qualified session resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} environment
     * @param {string} session
     * @returns {string} Resource name string.
     */
    sessionPath(project: string, location: string, lake: string, environment: string, session: string): string;
    /**
     * Parse the project from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSessionName(sessionName: string): string | number;
    /**
     * Parse the location from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSessionName(sessionName: string): string | number;
    /**
     * Parse the lake from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromSessionName(sessionName: string): string | number;
    /**
     * Parse the environment from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromSessionName(sessionName: string): string | number;
    /**
     * Parse the session from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromSessionName(sessionName: string): string | number;
    /**
     * Return a fully-qualified task resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} task
     * @returns {string} Resource name string.
     */
    taskPath(project: string, location: string, lake: string, task: string): string;
    /**
     * Parse the project from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTaskName(taskName: string): string | number;
    /**
     * Parse the location from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTaskName(taskName: string): string | number;
    /**
     * Parse the lake from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromTaskName(taskName: string): string | number;
    /**
     * Parse the task from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the task.
     */
    matchTaskFromTaskName(taskName: string): string | number;
    /**
     * Return a fully-qualified zone resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @returns {string} Resource name string.
     */
    zonePath(project: string, location: string, lake: string, zone: string): string;
    /**
     * Parse the project from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromZoneName(zoneName: string): string | number;
    /**
     * Parse the location from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromZoneName(zoneName: string): string | number;
    /**
     * Parse the lake from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromZoneName(zoneName: string): string | number;
    /**
     * Parse the zone from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromZoneName(zoneName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
