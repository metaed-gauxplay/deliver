/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Dataplex service provides data lakes as a service. The primary resources
 *  offered by this service are Lakes, Zones and Assets which collectively allow
 *  a data administrator to organize, manage, secure and catalog data across
 *  their organization located across cloud projects in a variety of storage
 *  systems including Cloud Storage and BigQuery.
 * @class
 * @memberof v1
 */
export declare class DataplexServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    dataplexServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of DataplexServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new DataplexServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Retrieves a lake resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.Lake|Lake}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.get_lake.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_GetLake_async
     */
    getLake(request?: protos.google.cloud.dataplex.v1.IGetLakeRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.ILake,
        protos.google.cloud.dataplex.v1.IGetLakeRequest | undefined,
        {} | undefined
    ]>;
    getLake(request: protos.google.cloud.dataplex.v1.IGetLakeRequest, options: CallOptions, callback: Callback<protos.google.cloud.dataplex.v1.ILake, protos.google.cloud.dataplex.v1.IGetLakeRequest | null | undefined, {} | null | undefined>): void;
    getLake(request: protos.google.cloud.dataplex.v1.IGetLakeRequest, callback: Callback<protos.google.cloud.dataplex.v1.ILake, protos.google.cloud.dataplex.v1.IGetLakeRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Retrieves a zone resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the zone:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.Zone|Zone}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.get_zone.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_GetZone_async
     */
    getZone(request?: protos.google.cloud.dataplex.v1.IGetZoneRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IZone,
        protos.google.cloud.dataplex.v1.IGetZoneRequest | undefined,
        {} | undefined
    ]>;
    getZone(request: protos.google.cloud.dataplex.v1.IGetZoneRequest, options: CallOptions, callback: Callback<protos.google.cloud.dataplex.v1.IZone, protos.google.cloud.dataplex.v1.IGetZoneRequest | null | undefined, {} | null | undefined>): void;
    getZone(request: protos.google.cloud.dataplex.v1.IGetZoneRequest, callback: Callback<protos.google.cloud.dataplex.v1.IZone, protos.google.cloud.dataplex.v1.IGetZoneRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Retrieves an asset resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the asset:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/assets/{asset_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.Asset|Asset}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.get_asset.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_GetAsset_async
     */
    getAsset(request?: protos.google.cloud.dataplex.v1.IGetAssetRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IAsset,
        protos.google.cloud.dataplex.v1.IGetAssetRequest | undefined,
        {} | undefined
    ]>;
    getAsset(request: protos.google.cloud.dataplex.v1.IGetAssetRequest, options: CallOptions, callback: Callback<protos.google.cloud.dataplex.v1.IAsset, protos.google.cloud.dataplex.v1.IGetAssetRequest | null | undefined, {} | null | undefined>): void;
    getAsset(request: protos.google.cloud.dataplex.v1.IGetAssetRequest, callback: Callback<protos.google.cloud.dataplex.v1.IAsset, protos.google.cloud.dataplex.v1.IGetAssetRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Get task resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the task:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/tasks/{tasks_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.Task|Task}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.get_task.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_GetTask_async
     */
    getTask(request?: protos.google.cloud.dataplex.v1.IGetTaskRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.ITask,
        protos.google.cloud.dataplex.v1.IGetTaskRequest | undefined,
        {} | undefined
    ]>;
    getTask(request: protos.google.cloud.dataplex.v1.IGetTaskRequest, options: CallOptions, callback: Callback<protos.google.cloud.dataplex.v1.ITask, protos.google.cloud.dataplex.v1.IGetTaskRequest | null | undefined, {} | null | undefined>): void;
    getTask(request: protos.google.cloud.dataplex.v1.IGetTaskRequest, callback: Callback<protos.google.cloud.dataplex.v1.ITask, protos.google.cloud.dataplex.v1.IGetTaskRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Run an on demand execution of a Task.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the task:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/tasks/{task_id}`.
     * @param {number[]} [request.labels]
     *   Optional. User-defined labels for the task. If the map is left empty, the
     *   task will run with existing labels from task definition. If the map
     *   contains an entry with a new key, the same will be added to existing set of
     *   labels. If the map contains an entry with an existing label key in task
     *   definition, the task will run with new label value for that entry. Clearing
     *   an existing label will require label value to be explicitly set to a hyphen
     *   "-". The label value cannot be empty.
     * @param {number[]} [request.args]
     *   Optional. Execution spec arguments. If the map is left empty, the task will
     *   run with existing execution spec args from task definition. If the map
     *   contains an entry with a new key, the same will be added to existing set of
     *   args. If the map contains an entry with an existing arg key in task
     *   definition, the task will run with new arg value for that entry. Clearing
     *   an existing arg will require arg value to be explicitly set to a hyphen
     *   "-". The arg value cannot be empty.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.RunTaskResponse|RunTaskResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.run_task.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_RunTask_async
     */
    runTask(request?: protos.google.cloud.dataplex.v1.IRunTaskRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IRunTaskResponse,
        protos.google.cloud.dataplex.v1.IRunTaskRequest | undefined,
        {} | undefined
    ]>;
    runTask(request: protos.google.cloud.dataplex.v1.IRunTaskRequest, options: CallOptions, callback: Callback<protos.google.cloud.dataplex.v1.IRunTaskResponse, protos.google.cloud.dataplex.v1.IRunTaskRequest | null | undefined, {} | null | undefined>): void;
    runTask(request: protos.google.cloud.dataplex.v1.IRunTaskRequest, callback: Callback<protos.google.cloud.dataplex.v1.IRunTaskResponse, protos.google.cloud.dataplex.v1.IRunTaskRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Get job resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the job:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/tasks/{task_id}/jobs/{job_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.Job|Job}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.get_job.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_GetJob_async
     */
    getJob(request?: protos.google.cloud.dataplex.v1.IGetJobRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IJob,
        protos.google.cloud.dataplex.v1.IGetJobRequest | undefined,
        {} | undefined
    ]>;
    getJob(request: protos.google.cloud.dataplex.v1.IGetJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.dataplex.v1.IJob, protos.google.cloud.dataplex.v1.IGetJobRequest | null | undefined, {} | null | undefined>): void;
    getJob(request: protos.google.cloud.dataplex.v1.IGetJobRequest, callback: Callback<protos.google.cloud.dataplex.v1.IJob, protos.google.cloud.dataplex.v1.IGetJobRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Cancel jobs running for the task resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the job:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/task/{task_id}/job/{job_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.cancel_job.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CancelJob_async
     */
    cancelJob(request?: protos.google.cloud.dataplex.v1.ICancelJobRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.ICancelJobRequest | undefined,
        {} | undefined
    ]>;
    cancelJob(request: protos.google.cloud.dataplex.v1.ICancelJobRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.ICancelJobRequest | null | undefined, {} | null | undefined>): void;
    cancelJob(request: protos.google.cloud.dataplex.v1.ICancelJobRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.ICancelJobRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Get environment resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the environment:
     *   `projects/{project_id}/locations/{location_id}/lakes/{lake_id}/environments/{environment_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.Environment|Environment}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.get_environment.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_GetEnvironment_async
     */
    getEnvironment(request?: protos.google.cloud.dataplex.v1.IGetEnvironmentRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IEnvironment,
        protos.google.cloud.dataplex.v1.IGetEnvironmentRequest | undefined,
        {} | undefined
    ]>;
    getEnvironment(request: protos.google.cloud.dataplex.v1.IGetEnvironmentRequest, options: CallOptions, callback: Callback<protos.google.cloud.dataplex.v1.IEnvironment, protos.google.cloud.dataplex.v1.IGetEnvironmentRequest | null | undefined, {} | null | undefined>): void;
    getEnvironment(request: protos.google.cloud.dataplex.v1.IGetEnvironmentRequest, callback: Callback<protos.google.cloud.dataplex.v1.IEnvironment, protos.google.cloud.dataplex.v1.IGetEnvironmentRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a lake resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the lake location, of the form:
     *   projects/{project_number}/locations/{location_id}
     *   where `location_id` refers to a GCP region.
     * @param {string} request.lakeId
     *   Required. Lake identifier.
     *   This ID will be used to generate names such as database and dataset names
     *   when publishing metadata to Hive Metastore and BigQuery.
     *   * Must contain only lowercase letters, numbers and hyphens.
     *   * Must start with a letter.
     *   * Must end with a number or a letter.
     *   * Must be between 1-63 characters.
     *   * Must be unique within the customer project / location.
     * @param {google.cloud.dataplex.v1.Lake} request.lake
     *   Required. Lake resource
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.create_lake.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CreateLake_async
     */
    createLake(request?: protos.google.cloud.dataplex.v1.ICreateLakeRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.ILake, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createLake(request: protos.google.cloud.dataplex.v1.ICreateLakeRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.ILake, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createLake(request: protos.google.cloud.dataplex.v1.ICreateLakeRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.ILake, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createLake()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.create_lake.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CreateLake_async
     */
    checkCreateLakeProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.Lake, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Updates a lake resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update.
     * @param {google.cloud.dataplex.v1.Lake} request.lake
     *   Required. Update description.
     *   Only fields specified in `update_mask` are updated.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.update_lake.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_UpdateLake_async
     */
    updateLake(request?: protos.google.cloud.dataplex.v1.IUpdateLakeRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.ILake, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateLake(request: protos.google.cloud.dataplex.v1.IUpdateLakeRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.ILake, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateLake(request: protos.google.cloud.dataplex.v1.IUpdateLakeRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.ILake, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateLake()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.update_lake.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_UpdateLake_async
     */
    checkUpdateLakeProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.Lake, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Deletes a lake resource. All zones within the lake must be deleted before
     * the lake can be deleted.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.delete_lake.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_DeleteLake_async
     */
    deleteLake(request?: protos.google.cloud.dataplex.v1.IDeleteLakeRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteLake(request: protos.google.cloud.dataplex.v1.IDeleteLakeRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteLake(request: protos.google.cloud.dataplex.v1.IDeleteLakeRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteLake()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.delete_lake.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_DeleteLake_async
     */
    checkDeleteLakeProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Creates a zone resource within a lake.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {string} request.zoneId
     *   Required. Zone identifier.
     *   This ID will be used to generate names such as database and dataset names
     *   when publishing metadata to Hive Metastore and BigQuery.
     *   * Must contain only lowercase letters, numbers and hyphens.
     *   * Must start with a letter.
     *   * Must end with a number or a letter.
     *   * Must be between 1-63 characters.
     *   * Must be unique across all lakes from all locations in a project.
     *   * Must not be one of the reserved IDs (i.e. "default", "global-temp")
     * @param {google.cloud.dataplex.v1.Zone} request.zone
     *   Required. Zone resource.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.create_zone.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CreateZone_async
     */
    createZone(request?: protos.google.cloud.dataplex.v1.ICreateZoneRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IZone, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createZone(request: protos.google.cloud.dataplex.v1.ICreateZoneRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IZone, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createZone(request: protos.google.cloud.dataplex.v1.ICreateZoneRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IZone, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createZone()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.create_zone.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CreateZone_async
     */
    checkCreateZoneProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.Zone, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Updates a zone resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update.
     * @param {google.cloud.dataplex.v1.Zone} request.zone
     *   Required. Update description.
     *   Only fields specified in `update_mask` are updated.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.update_zone.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_UpdateZone_async
     */
    updateZone(request?: protos.google.cloud.dataplex.v1.IUpdateZoneRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IZone, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateZone(request: protos.google.cloud.dataplex.v1.IUpdateZoneRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IZone, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateZone(request: protos.google.cloud.dataplex.v1.IUpdateZoneRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IZone, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateZone()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.update_zone.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_UpdateZone_async
     */
    checkUpdateZoneProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.Zone, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Deletes a zone resource. All assets within a zone must be deleted before
     * the zone can be deleted.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the zone:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.delete_zone.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_DeleteZone_async
     */
    deleteZone(request?: protos.google.cloud.dataplex.v1.IDeleteZoneRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteZone(request: protos.google.cloud.dataplex.v1.IDeleteZoneRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteZone(request: protos.google.cloud.dataplex.v1.IDeleteZoneRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteZone()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.delete_zone.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_DeleteZone_async
     */
    checkDeleteZoneProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Creates an asset resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent zone:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}`.
     * @param {string} request.assetId
     *   Required. Asset identifier.
     *   This ID will be used to generate names such as table names when publishing
     *   metadata to Hive Metastore and BigQuery.
     *   * Must contain only lowercase letters, numbers and hyphens.
     *   * Must start with a letter.
     *   * Must end with a number or a letter.
     *   * Must be between 1-63 characters.
     *   * Must be unique within the zone.
     * @param {google.cloud.dataplex.v1.Asset} request.asset
     *   Required. Asset resource.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.create_asset.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CreateAsset_async
     */
    createAsset(request?: protos.google.cloud.dataplex.v1.ICreateAssetRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IAsset, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createAsset(request: protos.google.cloud.dataplex.v1.ICreateAssetRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IAsset, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createAsset(request: protos.google.cloud.dataplex.v1.ICreateAssetRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IAsset, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createAsset()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.create_asset.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CreateAsset_async
     */
    checkCreateAssetProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.Asset, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Updates an asset resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update.
     * @param {google.cloud.dataplex.v1.Asset} request.asset
     *   Required. Update description.
     *   Only fields specified in `update_mask` are updated.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.update_asset.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_UpdateAsset_async
     */
    updateAsset(request?: protos.google.cloud.dataplex.v1.IUpdateAssetRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IAsset, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateAsset(request: protos.google.cloud.dataplex.v1.IUpdateAssetRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IAsset, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateAsset(request: protos.google.cloud.dataplex.v1.IUpdateAssetRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IAsset, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateAsset()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.update_asset.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_UpdateAsset_async
     */
    checkUpdateAssetProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.Asset, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Deletes an asset resource. The referenced storage resource is detached
     * (default) or deleted based on the associated Lifecycle policy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the asset:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/assets/{asset_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.delete_asset.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_DeleteAsset_async
     */
    deleteAsset(request?: protos.google.cloud.dataplex.v1.IDeleteAssetRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteAsset(request: protos.google.cloud.dataplex.v1.IDeleteAssetRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteAsset(request: protos.google.cloud.dataplex.v1.IDeleteAssetRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteAsset()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.delete_asset.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_DeleteAsset_async
     */
    checkDeleteAssetProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Creates a task resource within a lake.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {string} request.taskId
     *   Required. Task identifier.
     * @param {google.cloud.dataplex.v1.Task} request.task
     *   Required. Task resource.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.create_task.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CreateTask_async
     */
    createTask(request?: protos.google.cloud.dataplex.v1.ICreateTaskRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.ITask, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createTask(request: protos.google.cloud.dataplex.v1.ICreateTaskRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.ITask, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createTask(request: protos.google.cloud.dataplex.v1.ICreateTaskRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.ITask, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createTask()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.create_task.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CreateTask_async
     */
    checkCreateTaskProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.Task, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Update the task resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update.
     * @param {google.cloud.dataplex.v1.Task} request.task
     *   Required. Update description.
     *   Only fields specified in `update_mask` are updated.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.update_task.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_UpdateTask_async
     */
    updateTask(request?: protos.google.cloud.dataplex.v1.IUpdateTaskRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.ITask, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateTask(request: protos.google.cloud.dataplex.v1.IUpdateTaskRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.ITask, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateTask(request: protos.google.cloud.dataplex.v1.IUpdateTaskRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.ITask, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateTask()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.update_task.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_UpdateTask_async
     */
    checkUpdateTaskProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.Task, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Delete the task resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the task:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/task/{task_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.delete_task.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_DeleteTask_async
     */
    deleteTask(request?: protos.google.cloud.dataplex.v1.IDeleteTaskRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteTask(request: protos.google.cloud.dataplex.v1.IDeleteTaskRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteTask(request: protos.google.cloud.dataplex.v1.IDeleteTaskRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteTask()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.delete_task.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_DeleteTask_async
     */
    checkDeleteTaskProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Create an environment resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_id}/locations/{location_id}/lakes/{lake_id}`.
     * @param {string} request.environmentId
     *   Required. Environment identifier.
     *   * Must contain only lowercase letters, numbers and hyphens.
     *   * Must start with a letter.
     *   * Must be between 1-63 characters.
     *   * Must end with a number or a letter.
     *   * Must be unique within the lake.
     * @param {google.cloud.dataplex.v1.Environment} request.environment
     *   Required. Environment resource.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.create_environment.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CreateEnvironment_async
     */
    createEnvironment(request?: protos.google.cloud.dataplex.v1.ICreateEnvironmentRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IEnvironment, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createEnvironment(request: protos.google.cloud.dataplex.v1.ICreateEnvironmentRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IEnvironment, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createEnvironment(request: protos.google.cloud.dataplex.v1.ICreateEnvironmentRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IEnvironment, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createEnvironment()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.create_environment.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_CreateEnvironment_async
     */
    checkCreateEnvironmentProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.Environment, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Update the environment resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update.
     * @param {google.cloud.dataplex.v1.Environment} request.environment
     *   Required. Update description.
     *   Only fields specified in `update_mask` are updated.
     * @param {boolean} [request.validateOnly]
     *   Optional. Only validate the request, but do not perform mutations.
     *   The default is false.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.update_environment.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_UpdateEnvironment_async
     */
    updateEnvironment(request?: protos.google.cloud.dataplex.v1.IUpdateEnvironmentRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IEnvironment, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateEnvironment(request: protos.google.cloud.dataplex.v1.IUpdateEnvironmentRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IEnvironment, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateEnvironment(request: protos.google.cloud.dataplex.v1.IUpdateEnvironmentRequest, callback: Callback<LROperation<protos.google.cloud.dataplex.v1.IEnvironment, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateEnvironment()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.update_environment.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_UpdateEnvironment_async
     */
    checkUpdateEnvironmentProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.Environment, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Delete the environment resource. All the child resources must have been
     * deleted before environment deletion can be initiated.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the environment:
     *   `projects/{project_id}/locations/{location_id}/lakes/{lake_id}/environments/{environment_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.delete_environment.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_DeleteEnvironment_async
     */
    deleteEnvironment(request?: protos.google.cloud.dataplex.v1.IDeleteEnvironmentRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteEnvironment(request: protos.google.cloud.dataplex.v1.IDeleteEnvironmentRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteEnvironment(request: protos.google.cloud.dataplex.v1.IDeleteEnvironmentRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteEnvironment()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.delete_environment.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_DeleteEnvironment_async
     */
    checkDeleteEnvironmentProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.dataplex.v1.OperationMetadata>>;
    /**
     * Lists lake resources in a project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the lake location, of the form:
     *   `projects/{project_number}/locations/{location_id}`
     *   where `location_id` refers to a GCP region.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of Lakes to return. The service may return fewer
     *   than this value. If unspecified, at most 10 lakes will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListLakes` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListLakes` must match the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.Lake|Lake}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listLakesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listLakes(request?: protos.google.cloud.dataplex.v1.IListLakesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.ILake[],
        protos.google.cloud.dataplex.v1.IListLakesRequest | null,
        protos.google.cloud.dataplex.v1.IListLakesResponse
    ]>;
    listLakes(request: protos.google.cloud.dataplex.v1.IListLakesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListLakesRequest, protos.google.cloud.dataplex.v1.IListLakesResponse | null | undefined, protos.google.cloud.dataplex.v1.ILake>): void;
    listLakes(request: protos.google.cloud.dataplex.v1.IListLakesRequest, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListLakesRequest, protos.google.cloud.dataplex.v1.IListLakesResponse | null | undefined, protos.google.cloud.dataplex.v1.ILake>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the lake location, of the form:
     *   `projects/{project_number}/locations/{location_id}`
     *   where `location_id` refers to a GCP region.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of Lakes to return. The service may return fewer
     *   than this value. If unspecified, at most 10 lakes will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListLakes` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListLakes` must match the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Lake|Lake} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listLakesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listLakesStream(request?: protos.google.cloud.dataplex.v1.IListLakesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listLakes`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the lake location, of the form:
     *   `projects/{project_number}/locations/{location_id}`
     *   where `location_id` refers to a GCP region.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of Lakes to return. The service may return fewer
     *   than this value. If unspecified, at most 10 lakes will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListLakes` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListLakes` must match the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Lake|Lake}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_lakes.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListLakes_async
     */
    listLakesAsync(request?: protos.google.cloud.dataplex.v1.IListLakesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dataplex.v1.ILake>;
    /**
     * Lists action resources in a lake.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of actions to return. The service may return fewer
     *   than this value. If unspecified, at most 10 actions will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListLakeActions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListLakeActions` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.Action|Action}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listLakeActionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listLakeActions(request?: protos.google.cloud.dataplex.v1.IListLakeActionsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IAction[],
        protos.google.cloud.dataplex.v1.IListLakeActionsRequest | null,
        protos.google.cloud.dataplex.v1.IListActionsResponse
    ]>;
    listLakeActions(request: protos.google.cloud.dataplex.v1.IListLakeActionsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListLakeActionsRequest, protos.google.cloud.dataplex.v1.IListActionsResponse | null | undefined, protos.google.cloud.dataplex.v1.IAction>): void;
    listLakeActions(request: protos.google.cloud.dataplex.v1.IListLakeActionsRequest, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListLakeActionsRequest, protos.google.cloud.dataplex.v1.IListActionsResponse | null | undefined, protos.google.cloud.dataplex.v1.IAction>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of actions to return. The service may return fewer
     *   than this value. If unspecified, at most 10 actions will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListLakeActions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListLakeActions` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Action|Action} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listLakeActionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listLakeActionsStream(request?: protos.google.cloud.dataplex.v1.IListLakeActionsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listLakeActions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of actions to return. The service may return fewer
     *   than this value. If unspecified, at most 10 actions will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListLakeActions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListLakeActions` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Action|Action}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_lake_actions.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListLakeActions_async
     */
    listLakeActionsAsync(request?: protos.google.cloud.dataplex.v1.IListLakeActionsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dataplex.v1.IAction>;
    /**
     * Lists zone resources in a lake.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of zones to return. The service may return fewer
     *   than this value. If unspecified, at most 10 zones will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListZones` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListZones` must match the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.Zone|Zone}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listZonesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listZones(request?: protos.google.cloud.dataplex.v1.IListZonesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IZone[],
        protos.google.cloud.dataplex.v1.IListZonesRequest | null,
        protos.google.cloud.dataplex.v1.IListZonesResponse
    ]>;
    listZones(request: protos.google.cloud.dataplex.v1.IListZonesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListZonesRequest, protos.google.cloud.dataplex.v1.IListZonesResponse | null | undefined, protos.google.cloud.dataplex.v1.IZone>): void;
    listZones(request: protos.google.cloud.dataplex.v1.IListZonesRequest, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListZonesRequest, protos.google.cloud.dataplex.v1.IListZonesResponse | null | undefined, protos.google.cloud.dataplex.v1.IZone>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of zones to return. The service may return fewer
     *   than this value. If unspecified, at most 10 zones will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListZones` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListZones` must match the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Zone|Zone} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listZonesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listZonesStream(request?: protos.google.cloud.dataplex.v1.IListZonesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listZones`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of zones to return. The service may return fewer
     *   than this value. If unspecified, at most 10 zones will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListZones` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListZones` must match the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Zone|Zone}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_zones.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListZones_async
     */
    listZonesAsync(request?: protos.google.cloud.dataplex.v1.IListZonesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dataplex.v1.IZone>;
    /**
     * Lists action resources in a zone.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent zone:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of actions to return. The service may return fewer
     *   than this value. If unspecified, at most 10 actions will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListZoneActions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListZoneActions` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.Action|Action}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listZoneActionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listZoneActions(request?: protos.google.cloud.dataplex.v1.IListZoneActionsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IAction[],
        protos.google.cloud.dataplex.v1.IListZoneActionsRequest | null,
        protos.google.cloud.dataplex.v1.IListActionsResponse
    ]>;
    listZoneActions(request: protos.google.cloud.dataplex.v1.IListZoneActionsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListZoneActionsRequest, protos.google.cloud.dataplex.v1.IListActionsResponse | null | undefined, protos.google.cloud.dataplex.v1.IAction>): void;
    listZoneActions(request: protos.google.cloud.dataplex.v1.IListZoneActionsRequest, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListZoneActionsRequest, protos.google.cloud.dataplex.v1.IListActionsResponse | null | undefined, protos.google.cloud.dataplex.v1.IAction>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent zone:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of actions to return. The service may return fewer
     *   than this value. If unspecified, at most 10 actions will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListZoneActions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListZoneActions` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Action|Action} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listZoneActionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listZoneActionsStream(request?: protos.google.cloud.dataplex.v1.IListZoneActionsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listZoneActions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent zone:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of actions to return. The service may return fewer
     *   than this value. If unspecified, at most 10 actions will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListZoneActions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListZoneActions` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Action|Action}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_zone_actions.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListZoneActions_async
     */
    listZoneActionsAsync(request?: protos.google.cloud.dataplex.v1.IListZoneActionsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dataplex.v1.IAction>;
    /**
     * Lists asset resources in a zone.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent zone:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of asset to return. The service may return fewer
     *   than this value. If unspecified, at most 10 assets will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListAssets` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListAssets` must match the call that provided the page
     *   token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.Asset|Asset}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listAssetsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAssets(request?: protos.google.cloud.dataplex.v1.IListAssetsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IAsset[],
        protos.google.cloud.dataplex.v1.IListAssetsRequest | null,
        protos.google.cloud.dataplex.v1.IListAssetsResponse
    ]>;
    listAssets(request: protos.google.cloud.dataplex.v1.IListAssetsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListAssetsRequest, protos.google.cloud.dataplex.v1.IListAssetsResponse | null | undefined, protos.google.cloud.dataplex.v1.IAsset>): void;
    listAssets(request: protos.google.cloud.dataplex.v1.IListAssetsRequest, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListAssetsRequest, protos.google.cloud.dataplex.v1.IListAssetsResponse | null | undefined, protos.google.cloud.dataplex.v1.IAsset>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent zone:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of asset to return. The service may return fewer
     *   than this value. If unspecified, at most 10 assets will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListAssets` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListAssets` must match the call that provided the page
     *   token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Asset|Asset} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAssetsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAssetsStream(request?: protos.google.cloud.dataplex.v1.IListAssetsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listAssets`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent zone:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of asset to return. The service may return fewer
     *   than this value. If unspecified, at most 10 assets will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListAssets` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListAssets` must match the call that provided the page
     *   token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Asset|Asset}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_assets.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListAssets_async
     */
    listAssetsAsync(request?: protos.google.cloud.dataplex.v1.IListAssetsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dataplex.v1.IAsset>;
    /**
     * Lists action resources in an asset.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent asset:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/assets/{asset_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of actions to return. The service may return fewer
     *   than this value. If unspecified, at most 10 actions will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListAssetActions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListAssetActions` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.Action|Action}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listAssetActionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAssetActions(request?: protos.google.cloud.dataplex.v1.IListAssetActionsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IAction[],
        protos.google.cloud.dataplex.v1.IListAssetActionsRequest | null,
        protos.google.cloud.dataplex.v1.IListActionsResponse
    ]>;
    listAssetActions(request: protos.google.cloud.dataplex.v1.IListAssetActionsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListAssetActionsRequest, protos.google.cloud.dataplex.v1.IListActionsResponse | null | undefined, protos.google.cloud.dataplex.v1.IAction>): void;
    listAssetActions(request: protos.google.cloud.dataplex.v1.IListAssetActionsRequest, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListAssetActionsRequest, protos.google.cloud.dataplex.v1.IListActionsResponse | null | undefined, protos.google.cloud.dataplex.v1.IAction>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent asset:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/assets/{asset_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of actions to return. The service may return fewer
     *   than this value. If unspecified, at most 10 actions will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListAssetActions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListAssetActions` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Action|Action} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAssetActionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAssetActionsStream(request?: protos.google.cloud.dataplex.v1.IListAssetActionsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listAssetActions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent asset:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/assets/{asset_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of actions to return. The service may return fewer
     *   than this value. If unspecified, at most 10 actions will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListAssetActions` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListAssetActions` must match the call that provided
     *   the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Action|Action}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_asset_actions.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListAssetActions_async
     */
    listAssetActionsAsync(request?: protos.google.cloud.dataplex.v1.IListAssetActionsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dataplex.v1.IAction>;
    /**
     * Lists tasks under the given lake.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of tasks to return. The service may return fewer
     *   than this value. If unspecified, at most 10 tasks will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListZones` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListZones` must match the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.Task|Task}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listTasksAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTasks(request?: protos.google.cloud.dataplex.v1.IListTasksRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.ITask[],
        protos.google.cloud.dataplex.v1.IListTasksRequest | null,
        protos.google.cloud.dataplex.v1.IListTasksResponse
    ]>;
    listTasks(request: protos.google.cloud.dataplex.v1.IListTasksRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListTasksRequest, protos.google.cloud.dataplex.v1.IListTasksResponse | null | undefined, protos.google.cloud.dataplex.v1.ITask>): void;
    listTasks(request: protos.google.cloud.dataplex.v1.IListTasksRequest, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListTasksRequest, protos.google.cloud.dataplex.v1.IListTasksResponse | null | undefined, protos.google.cloud.dataplex.v1.ITask>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of tasks to return. The service may return fewer
     *   than this value. If unspecified, at most 10 tasks will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListZones` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListZones` must match the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Task|Task} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTasksAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTasksStream(request?: protos.google.cloud.dataplex.v1.IListTasksRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listTasks`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of tasks to return. The service may return fewer
     *   than this value. If unspecified, at most 10 tasks will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListZones` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListZones` must match the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Task|Task}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_tasks.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListTasks_async
     */
    listTasksAsync(request?: protos.google.cloud.dataplex.v1.IListTasksRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dataplex.v1.ITask>;
    /**
     * Lists Jobs under the given task.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent environment:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/tasks/{task_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of jobs to return. The service may return fewer
     *   than this value. If unspecified, at most 10 jobs will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListJobs` call. Provide this
     *   to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListJobs` must match the call that provided the page
     *   token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.Job|Job}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listJobsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listJobs(request?: protos.google.cloud.dataplex.v1.IListJobsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IJob[],
        protos.google.cloud.dataplex.v1.IListJobsRequest | null,
        protos.google.cloud.dataplex.v1.IListJobsResponse
    ]>;
    listJobs(request: protos.google.cloud.dataplex.v1.IListJobsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListJobsRequest, protos.google.cloud.dataplex.v1.IListJobsResponse | null | undefined, protos.google.cloud.dataplex.v1.IJob>): void;
    listJobs(request: protos.google.cloud.dataplex.v1.IListJobsRequest, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListJobsRequest, protos.google.cloud.dataplex.v1.IListJobsResponse | null | undefined, protos.google.cloud.dataplex.v1.IJob>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent environment:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/tasks/{task_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of jobs to return. The service may return fewer
     *   than this value. If unspecified, at most 10 jobs will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListJobs` call. Provide this
     *   to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListJobs` must match the call that provided the page
     *   token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Job|Job} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listJobsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listJobsStream(request?: protos.google.cloud.dataplex.v1.IListJobsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listJobs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent environment:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/tasks/{task_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of jobs to return. The service may return fewer
     *   than this value. If unspecified, at most 10 jobs will be returned. The
     *   maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListJobs` call. Provide this
     *   to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListJobs` must match the call that provided the page
     *   token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Job|Job}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_jobs.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListJobs_async
     */
    listJobsAsync(request?: protos.google.cloud.dataplex.v1.IListJobsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dataplex.v1.IJob>;
    /**
     * Lists environments under the given lake.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_id}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of environments to return. The service may return
     *   fewer than this value. If unspecified, at most 10 environments will be
     *   returned. The maximum value is 1000; values above 1000 will be coerced to
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListEnvironments` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListEnvironments` must match the call that provided
     *   the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.Environment|Environment}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listEnvironmentsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listEnvironments(request?: protos.google.cloud.dataplex.v1.IListEnvironmentsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.IEnvironment[],
        protos.google.cloud.dataplex.v1.IListEnvironmentsRequest | null,
        protos.google.cloud.dataplex.v1.IListEnvironmentsResponse
    ]>;
    listEnvironments(request: protos.google.cloud.dataplex.v1.IListEnvironmentsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListEnvironmentsRequest, protos.google.cloud.dataplex.v1.IListEnvironmentsResponse | null | undefined, protos.google.cloud.dataplex.v1.IEnvironment>): void;
    listEnvironments(request: protos.google.cloud.dataplex.v1.IListEnvironmentsRequest, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListEnvironmentsRequest, protos.google.cloud.dataplex.v1.IListEnvironmentsResponse | null | undefined, protos.google.cloud.dataplex.v1.IEnvironment>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_id}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of environments to return. The service may return
     *   fewer than this value. If unspecified, at most 10 environments will be
     *   returned. The maximum value is 1000; values above 1000 will be coerced to
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListEnvironments` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListEnvironments` must match the call that provided
     *   the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Environment|Environment} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listEnvironmentsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listEnvironmentsStream(request?: protos.google.cloud.dataplex.v1.IListEnvironmentsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listEnvironments`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent lake:
     *   `projects/{project_id}/locations/{location_id}/lakes/{lake_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of environments to return. The service may return
     *   fewer than this value. If unspecified, at most 10 environments will be
     *   returned. The maximum value is 1000; values above 1000 will be coerced to
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListEnvironments` call.
     *   Provide this to retrieve the subsequent page. When paginating, all other
     *   parameters provided to `ListEnvironments` must match the call that provided
     *   the page token.
     * @param {string} [request.filter]
     *   Optional. Filter request.
     * @param {string} [request.orderBy]
     *   Optional. Order by fields for the result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Environment|Environment}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_environments.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListEnvironments_async
     */
    listEnvironmentsAsync(request?: protos.google.cloud.dataplex.v1.IListEnvironmentsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dataplex.v1.IEnvironment>;
    /**
     * Lists session resources in an environment.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent environment:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/environment/{environment_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of sessions to return. The service may return
     *   fewer than this value. If unspecified, at most 10 sessions will be
     *   returned. The maximum value is 1000; values above 1000 will be coerced to
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListSessions` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListSessions` must match the call that provided the page
     *   token.
     * @param {string} [request.filter]
     *   Optional. Filter request. The following `mode` filter is supported to
     *   return only the sessions belonging to the requester when the mode is USER
     *   and return sessions of all the users when the mode is ADMIN. When no filter
     *   is sent default to USER mode. NOTE: When the mode is ADMIN, the requester
     *   should have `dataplex.environments.listAllSessions` permission to list all
     *   sessions, in absence of the permission, the request fails.
     *
     *   mode = ADMIN | USER
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.Session|Session}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listSessionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSessions(request?: protos.google.cloud.dataplex.v1.IListSessionsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dataplex.v1.ISession[],
        protos.google.cloud.dataplex.v1.IListSessionsRequest | null,
        protos.google.cloud.dataplex.v1.IListSessionsResponse
    ]>;
    listSessions(request: protos.google.cloud.dataplex.v1.IListSessionsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListSessionsRequest, protos.google.cloud.dataplex.v1.IListSessionsResponse | null | undefined, protos.google.cloud.dataplex.v1.ISession>): void;
    listSessions(request: protos.google.cloud.dataplex.v1.IListSessionsRequest, callback: PaginationCallback<protos.google.cloud.dataplex.v1.IListSessionsRequest, protos.google.cloud.dataplex.v1.IListSessionsResponse | null | undefined, protos.google.cloud.dataplex.v1.ISession>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent environment:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/environment/{environment_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of sessions to return. The service may return
     *   fewer than this value. If unspecified, at most 10 sessions will be
     *   returned. The maximum value is 1000; values above 1000 will be coerced to
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListSessions` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListSessions` must match the call that provided the page
     *   token.
     * @param {string} [request.filter]
     *   Optional. Filter request. The following `mode` filter is supported to
     *   return only the sessions belonging to the requester when the mode is USER
     *   and return sessions of all the users when the mode is ADMIN. When no filter
     *   is sent default to USER mode. NOTE: When the mode is ADMIN, the requester
     *   should have `dataplex.environments.listAllSessions` permission to list all
     *   sessions, in absence of the permission, the request fails.
     *
     *   mode = ADMIN | USER
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Session|Session} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listSessionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSessionsStream(request?: protos.google.cloud.dataplex.v1.IListSessionsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listSessions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent environment:
     *   `projects/{project_number}/locations/{location_id}/lakes/{lake_id}/environment/{environment_id}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of sessions to return. The service may return
     *   fewer than this value. If unspecified, at most 10 sessions will be
     *   returned. The maximum value is 1000; values above 1000 will be coerced to
     *   1000.
     * @param {string} [request.pageToken]
     *   Optional. Page token received from a previous `ListSessions` call. Provide
     *   this to retrieve the subsequent page. When paginating, all other parameters
     *   provided to `ListSessions` must match the call that provided the page
     *   token.
     * @param {string} [request.filter]
     *   Optional. Filter request. The following `mode` filter is supported to
     *   return only the sessions belonging to the requester when the mode is USER
     *   and return sessions of all the users when the mode is ADMIN. When no filter
     *   is sent default to USER mode. NOTE: When the mode is ADMIN, the requester
     *   should have `dataplex.environments.listAllSessions` permission to list all
     *   sessions, in absence of the permission, the request fails.
     *
     *   mode = ADMIN | USER
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.dataplex.v1.Session|Session}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dataplex_service.list_sessions.js</caption>
     * region_tag:dataplex_v1_generated_DataplexService_ListSessions_async
     */
    listSessionsAsync(request?: protos.google.cloud.dataplex.v1.IListSessionsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dataplex.v1.ISession>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified asset resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} asset
     * @returns {string} Resource name string.
     */
    assetPath(project: string, location: string, lake: string, zone: string, asset: string): string;
    /**
     * Parse the project from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAssetName(assetName: string): string | number;
    /**
     * Parse the location from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAssetName(assetName: string): string | number;
    /**
     * Parse the lake from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromAssetName(assetName: string): string | number;
    /**
     * Parse the zone from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromAssetName(assetName: string): string | number;
    /**
     * Parse the asset from Asset resource.
     *
     * @param {string} assetName
     *   A fully-qualified path representing Asset resource.
     * @returns {string} A string representing the asset.
     */
    matchAssetFromAssetName(assetName: string): string | number;
    /**
     * Return a fully-qualified content resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} content
     * @returns {string} Resource name string.
     */
    contentPath(project: string, location: string, lake: string, content: string): string;
    /**
     * Parse the project from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromContentName(contentName: string): string | number;
    /**
     * Parse the location from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromContentName(contentName: string): string | number;
    /**
     * Parse the lake from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromContentName(contentName: string): string | number;
    /**
     * Parse the content from Content resource.
     *
     * @param {string} contentName
     *   A fully-qualified path representing Content resource.
     * @returns {string} A string representing the content.
     */
    matchContentFromContentName(contentName: string): string | number;
    /**
     * Return a fully-qualified dataAttribute resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataTaxonomy
     * @param {string} data_attribute_id
     * @returns {string} Resource name string.
     */
    dataAttributePath(project: string, location: string, dataTaxonomy: string, dataAttributeId: string): string;
    /**
     * Parse the project from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataAttributeName(dataAttributeName: string): string | number;
    /**
     * Parse the location from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataAttributeName(dataAttributeName: string): string | number;
    /**
     * Parse the dataTaxonomy from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the dataTaxonomy.
     */
    matchDataTaxonomyFromDataAttributeName(dataAttributeName: string): string | number;
    /**
     * Parse the data_attribute_id from DataAttribute resource.
     *
     * @param {string} dataAttributeName
     *   A fully-qualified path representing DataAttribute resource.
     * @returns {string} A string representing the data_attribute_id.
     */
    matchDataAttributeIdFromDataAttributeName(dataAttributeName: string): string | number;
    /**
     * Return a fully-qualified dataAttributeBinding resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_attribute_binding_id
     * @returns {string} Resource name string.
     */
    dataAttributeBindingPath(project: string, location: string, dataAttributeBindingId: string): string;
    /**
     * Parse the project from DataAttributeBinding resource.
     *
     * @param {string} dataAttributeBindingName
     *   A fully-qualified path representing DataAttributeBinding resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataAttributeBindingName(dataAttributeBindingName: string): string | number;
    /**
     * Parse the location from DataAttributeBinding resource.
     *
     * @param {string} dataAttributeBindingName
     *   A fully-qualified path representing DataAttributeBinding resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataAttributeBindingName(dataAttributeBindingName: string): string | number;
    /**
     * Parse the data_attribute_binding_id from DataAttributeBinding resource.
     *
     * @param {string} dataAttributeBindingName
     *   A fully-qualified path representing DataAttributeBinding resource.
     * @returns {string} A string representing the data_attribute_binding_id.
     */
    matchDataAttributeBindingIdFromDataAttributeBindingName(dataAttributeBindingName: string): string | number;
    /**
     * Return a fully-qualified dataScan resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataScan
     * @returns {string} Resource name string.
     */
    dataScanPath(project: string, location: string, dataScan: string): string;
    /**
     * Parse the project from DataScan resource.
     *
     * @param {string} dataScanName
     *   A fully-qualified path representing DataScan resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataScanName(dataScanName: string): string | number;
    /**
     * Parse the location from DataScan resource.
     *
     * @param {string} dataScanName
     *   A fully-qualified path representing DataScan resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataScanName(dataScanName: string): string | number;
    /**
     * Parse the dataScan from DataScan resource.
     *
     * @param {string} dataScanName
     *   A fully-qualified path representing DataScan resource.
     * @returns {string} A string representing the dataScan.
     */
    matchDataScanFromDataScanName(dataScanName: string): string | number;
    /**
     * Return a fully-qualified dataScanJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataScan
     * @param {string} job
     * @returns {string} Resource name string.
     */
    dataScanJobPath(project: string, location: string, dataScan: string, job: string): string;
    /**
     * Parse the project from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataScanJobName(dataScanJobName: string): string | number;
    /**
     * Parse the location from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataScanJobName(dataScanJobName: string): string | number;
    /**
     * Parse the dataScan from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the dataScan.
     */
    matchDataScanFromDataScanJobName(dataScanJobName: string): string | number;
    /**
     * Parse the job from DataScanJob resource.
     *
     * @param {string} dataScanJobName
     *   A fully-qualified path representing DataScanJob resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromDataScanJobName(dataScanJobName: string): string | number;
    /**
     * Return a fully-qualified dataTaxonomy resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_taxonomy_id
     * @returns {string} Resource name string.
     */
    dataTaxonomyPath(project: string, location: string, dataTaxonomyId: string): string;
    /**
     * Parse the project from DataTaxonomy resource.
     *
     * @param {string} dataTaxonomyName
     *   A fully-qualified path representing DataTaxonomy resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataTaxonomyName(dataTaxonomyName: string): string | number;
    /**
     * Parse the location from DataTaxonomy resource.
     *
     * @param {string} dataTaxonomyName
     *   A fully-qualified path representing DataTaxonomy resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataTaxonomyName(dataTaxonomyName: string): string | number;
    /**
     * Parse the data_taxonomy_id from DataTaxonomy resource.
     *
     * @param {string} dataTaxonomyName
     *   A fully-qualified path representing DataTaxonomy resource.
     * @returns {string} A string representing the data_taxonomy_id.
     */
    matchDataTaxonomyIdFromDataTaxonomyName(dataTaxonomyName: string): string | number;
    /**
     * Return a fully-qualified entity resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} entity
     * @returns {string} Resource name string.
     */
    entityPath(project: string, location: string, lake: string, zone: string, entity: string): string;
    /**
     * Parse the project from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntityName(entityName: string): string | number;
    /**
     * Parse the location from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntityName(entityName: string): string | number;
    /**
     * Parse the lake from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromEntityName(entityName: string): string | number;
    /**
     * Parse the zone from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromEntityName(entityName: string): string | number;
    /**
     * Parse the entity from Entity resource.
     *
     * @param {string} entityName
     *   A fully-qualified path representing Entity resource.
     * @returns {string} A string representing the entity.
     */
    matchEntityFromEntityName(entityName: string): string | number;
    /**
     * Return a fully-qualified environment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} environment
     * @returns {string} Resource name string.
     */
    environmentPath(project: string, location: string, lake: string, environment: string): string;
    /**
     * Parse the project from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the location from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the lake from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the environment from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromEnvironmentName(environmentName: string): string | number;
    /**
     * Return a fully-qualified job resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} task
     * @param {string} job
     * @returns {string} Resource name string.
     */
    jobPath(project: string, location: string, lake: string, task: string, job: string): string;
    /**
     * Parse the project from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromJobName(jobName: string): string | number;
    /**
     * Parse the location from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromJobName(jobName: string): string | number;
    /**
     * Parse the lake from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromJobName(jobName: string): string | number;
    /**
     * Parse the task from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the task.
     */
    matchTaskFromJobName(jobName: string): string | number;
    /**
     * Parse the job from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromJobName(jobName: string): string | number;
    /**
     * Return a fully-qualified lake resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @returns {string} Resource name string.
     */
    lakePath(project: string, location: string, lake: string): string;
    /**
     * Parse the project from Lake resource.
     *
     * @param {string} lakeName
     *   A fully-qualified path representing Lake resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLakeName(lakeName: string): string | number;
    /**
     * Parse the location from Lake resource.
     *
     * @param {string} lakeName
     *   A fully-qualified path representing Lake resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLakeName(lakeName: string): string | number;
    /**
     * Parse the lake from Lake resource.
     *
     * @param {string} lakeName
     *   A fully-qualified path representing Lake resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromLakeName(lakeName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified partition resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} entity
     * @param {string} partition
     * @returns {string} Resource name string.
     */
    partitionPath(project: string, location: string, lake: string, zone: string, entity: string, partition: string): string;
    /**
     * Parse the project from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPartitionName(partitionName: string): string | number;
    /**
     * Parse the location from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPartitionName(partitionName: string): string | number;
    /**
     * Parse the lake from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromPartitionName(partitionName: string): string | number;
    /**
     * Parse the zone from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromPartitionName(partitionName: string): string | number;
    /**
     * Parse the entity from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the entity.
     */
    matchEntityFromPartitionName(partitionName: string): string | number;
    /**
     * Parse the partition from Partition resource.
     *
     * @param {string} partitionName
     *   A fully-qualified path representing Partition resource.
     * @returns {string} A string representing the partition.
     */
    matchPartitionFromPartitionName(partitionName: string): string | number;
    /**
     * Return a fully-qualified projectLocationLakeAction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} action
     * @returns {string} Resource name string.
     */
    projectLocationLakeActionPath(project: string, location: string, lake: string, action: string): string;
    /**
     * Parse the project from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationLakeActionName(projectLocationLakeActionName: string): string | number;
    /**
     * Parse the location from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationLakeActionName(projectLocationLakeActionName: string): string | number;
    /**
     * Parse the lake from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromProjectLocationLakeActionName(projectLocationLakeActionName: string): string | number;
    /**
     * Parse the action from ProjectLocationLakeAction resource.
     *
     * @param {string} projectLocationLakeActionName
     *   A fully-qualified path representing project_location_lake_action resource.
     * @returns {string} A string representing the action.
     */
    matchActionFromProjectLocationLakeActionName(projectLocationLakeActionName: string): string | number;
    /**
     * Return a fully-qualified projectLocationLakeZoneAction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} action
     * @returns {string} Resource name string.
     */
    projectLocationLakeZoneActionPath(project: string, location: string, lake: string, zone: string, action: string): string;
    /**
     * Parse the project from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string): string | number;
    /**
     * Parse the location from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string): string | number;
    /**
     * Parse the lake from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string): string | number;
    /**
     * Parse the zone from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string): string | number;
    /**
     * Parse the action from ProjectLocationLakeZoneAction resource.
     *
     * @param {string} projectLocationLakeZoneActionName
     *   A fully-qualified path representing project_location_lake_zone_action resource.
     * @returns {string} A string representing the action.
     */
    matchActionFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string): string | number;
    /**
     * Return a fully-qualified projectLocationLakeZoneAssetAction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @param {string} asset
     * @param {string} action
     * @returns {string} Resource name string.
     */
    projectLocationLakeZoneAssetActionPath(project: string, location: string, lake: string, zone: string, asset: string, action: string): string;
    /**
     * Parse the project from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Parse the location from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Parse the lake from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Parse the zone from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Parse the asset from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the asset.
     */
    matchAssetFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Parse the action from ProjectLocationLakeZoneAssetAction resource.
     *
     * @param {string} projectLocationLakeZoneAssetActionName
     *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
     * @returns {string} A string representing the action.
     */
    matchActionFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string): string | number;
    /**
     * Return a fully-qualified session resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} environment
     * @param {string} session
     * @returns {string} Resource name string.
     */
    sessionPath(project: string, location: string, lake: string, environment: string, session: string): string;
    /**
     * Parse the project from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSessionName(sessionName: string): string | number;
    /**
     * Parse the location from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSessionName(sessionName: string): string | number;
    /**
     * Parse the lake from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromSessionName(sessionName: string): string | number;
    /**
     * Parse the environment from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromSessionName(sessionName: string): string | number;
    /**
     * Parse the session from Session resource.
     *
     * @param {string} sessionName
     *   A fully-qualified path representing Session resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromSessionName(sessionName: string): string | number;
    /**
     * Return a fully-qualified task resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} task
     * @returns {string} Resource name string.
     */
    taskPath(project: string, location: string, lake: string, task: string): string;
    /**
     * Parse the project from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTaskName(taskName: string): string | number;
    /**
     * Parse the location from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTaskName(taskName: string): string | number;
    /**
     * Parse the lake from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromTaskName(taskName: string): string | number;
    /**
     * Parse the task from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the task.
     */
    matchTaskFromTaskName(taskName: string): string | number;
    /**
     * Return a fully-qualified zone resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} lake
     * @param {string} zone
     * @returns {string} Resource name string.
     */
    zonePath(project: string, location: string, lake: string, zone: string): string;
    /**
     * Parse the project from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromZoneName(zoneName: string): string | number;
    /**
     * Parse the location from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromZoneName(zoneName: string): string | number;
    /**
     * Parse the lake from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the lake.
     */
    matchLakeFromZoneName(zoneName: string): string | number;
    /**
     * Parse the zone from Zone resource.
     *
     * @param {string} zoneName
     *   A fully-qualified path representing Zone resource.
     * @returns {string} A string representing the zone.
     */
    matchZoneFromZoneName(zoneName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
