"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudDeployClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/cloud_deploy_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./cloud_deploy_client_config.json");
const version = require('../../../package.json').version;
/**
 *  CloudDeploy service creates and manages Continuous Delivery operations
 *  on Google Cloud Platform via Skaffold (https://skaffold.dev).
 * @class
 * @memberof v1
 */
class CloudDeployClient {
    /**
     * Construct an instance of CloudDeployClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new CloudDeployClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);
        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            buildPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/builds/{build}'),
            clusterPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/clusters/{cluster}'),
            configPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/config'),
            deliveryPipelinePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}'),
            jobRunPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/releases/{release}/rollouts/{rollout}/jobRuns/{job_run}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            membershipPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/memberships/{membership}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            releasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/releases/{release}'),
            rolloutPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/releases/{release}/rollouts/{rollout}'),
            servicePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/services/{service}'),
            targetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/targets/{target}'),
            workerPoolPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/workerPools/{worker_pool}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listDeliveryPipelines: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'deliveryPipelines'),
            listTargets: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'targets'),
            listReleases: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'releases'),
            listRollouts: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'rollouts'),
            listJobRuns: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'jobRuns'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.cloud.location.Locations.GetLocation',
                    get: '/v1/{name=projects/*/locations/*}',
                },
                {
                    selector: 'google.cloud.location.Locations.ListLocations',
                    get: '/v1/{name=projects/*}/locations',
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
                    get: '/v1/{resource=projects/*/locations/*/deliveryPipelines/*}:getIamPolicy',
                    additional_bindings: [
                        {
                            get: '/v1/{resource=projects/*/locations/*/targets/*}:getIamPolicy',
                        },
                    ],
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
                    post: '/v1/{resource=projects/*/locations/*/deliveryPipelines/*}:setIamPolicy',
                    body: '*',
                    additional_bindings: [
                        {
                            post: '/v1/{resource=projects/*/locations/*/targets/*}:setIamPolicy',
                            body: '*',
                        },
                    ],
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
                    post: '/v1/{resource=projects/*/locations/*/deliveryPipelines/*}:testIamPermissions',
                    body: '*',
                    additional_bindings: [
                        {
                            post: '/v1/{resource=projects/*/locations/*/targets/*}:testIamPermissions',
                            body: '*',
                        },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.CancelOperation',
                    post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
                    body: '*',
                },
                {
                    selector: 'google.longrunning.Operations.DeleteOperation',
                    delete: '/v1/{name=projects/*/locations/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v1/{name=projects/*/locations/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v1/{name=projects/*/locations/*}/operations',
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const createDeliveryPipelineResponse = protoFilesRoot.lookup('.google.cloud.deploy.v1.DeliveryPipeline');
        const createDeliveryPipelineMetadata = protoFilesRoot.lookup('.google.cloud.deploy.v1.OperationMetadata');
        const updateDeliveryPipelineResponse = protoFilesRoot.lookup('.google.cloud.deploy.v1.DeliveryPipeline');
        const updateDeliveryPipelineMetadata = protoFilesRoot.lookup('.google.cloud.deploy.v1.OperationMetadata');
        const deleteDeliveryPipelineResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteDeliveryPipelineMetadata = protoFilesRoot.lookup('.google.cloud.deploy.v1.OperationMetadata');
        const createTargetResponse = protoFilesRoot.lookup('.google.cloud.deploy.v1.Target');
        const createTargetMetadata = protoFilesRoot.lookup('.google.cloud.deploy.v1.OperationMetadata');
        const updateTargetResponse = protoFilesRoot.lookup('.google.cloud.deploy.v1.Target');
        const updateTargetMetadata = protoFilesRoot.lookup('.google.cloud.deploy.v1.OperationMetadata');
        const deleteTargetResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteTargetMetadata = protoFilesRoot.lookup('.google.cloud.deploy.v1.OperationMetadata');
        const createReleaseResponse = protoFilesRoot.lookup('.google.cloud.deploy.v1.Release');
        const createReleaseMetadata = protoFilesRoot.lookup('.google.cloud.deploy.v1.OperationMetadata');
        const createRolloutResponse = protoFilesRoot.lookup('.google.cloud.deploy.v1.Rollout');
        const createRolloutMetadata = protoFilesRoot.lookup('.google.cloud.deploy.v1.OperationMetadata');
        this.descriptors.longrunning = {
            createDeliveryPipeline: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createDeliveryPipelineResponse.decode.bind(createDeliveryPipelineResponse), createDeliveryPipelineMetadata.decode.bind(createDeliveryPipelineMetadata)),
            updateDeliveryPipeline: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateDeliveryPipelineResponse.decode.bind(updateDeliveryPipelineResponse), updateDeliveryPipelineMetadata.decode.bind(updateDeliveryPipelineMetadata)),
            deleteDeliveryPipeline: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteDeliveryPipelineResponse.decode.bind(deleteDeliveryPipelineResponse), deleteDeliveryPipelineMetadata.decode.bind(deleteDeliveryPipelineMetadata)),
            createTarget: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createTargetResponse.decode.bind(createTargetResponse), createTargetMetadata.decode.bind(createTargetMetadata)),
            updateTarget: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateTargetResponse.decode.bind(updateTargetResponse), updateTargetMetadata.decode.bind(updateTargetMetadata)),
            deleteTarget: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteTargetResponse.decode.bind(deleteTargetResponse), deleteTargetMetadata.decode.bind(deleteTargetMetadata)),
            createRelease: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createReleaseResponse.decode.bind(createReleaseResponse), createReleaseMetadata.decode.bind(createReleaseMetadata)),
            createRollout: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createRolloutResponse.decode.bind(createRolloutResponse), createRolloutMetadata.decode.bind(createRolloutMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.deploy.v1.CloudDeploy', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.cloudDeployStub) {
            return this.cloudDeployStub;
        }
        // Put together the "service stub" for
        // google.cloud.deploy.v1.CloudDeploy.
        this.cloudDeployStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.deploy.v1.CloudDeploy')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.deploy.v1.CloudDeploy, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const cloudDeployStubMethods = [
            'listDeliveryPipelines',
            'getDeliveryPipeline',
            'createDeliveryPipeline',
            'updateDeliveryPipeline',
            'deleteDeliveryPipeline',
            'listTargets',
            'getTarget',
            'createTarget',
            'updateTarget',
            'deleteTarget',
            'listReleases',
            'getRelease',
            'createRelease',
            'abandonRelease',
            'approveRollout',
            'advanceRollout',
            'cancelRollout',
            'listRollouts',
            'getRollout',
            'createRollout',
            'ignoreJob',
            'retryJob',
            'listJobRuns',
            'getJobRun',
            'terminateJobRun',
            'getConfig',
        ];
        for (const methodName of cloudDeployStubMethods) {
            const callPromise = this.cloudDeployStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.cloudDeployStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'clouddeploy.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'clouddeploy.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    getDeliveryPipeline(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getDeliveryPipeline(request, options, callback);
    }
    getTarget(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getTarget(request, options, callback);
    }
    getRelease(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getRelease(request, options, callback);
    }
    abandonRelease(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.abandonRelease(request, options, callback);
    }
    approveRollout(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.approveRollout(request, options, callback);
    }
    advanceRollout(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.advanceRollout(request, options, callback);
    }
    cancelRollout(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.cancelRollout(request, options, callback);
    }
    getRollout(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getRollout(request, options, callback);
    }
    ignoreJob(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                rollout: (_a = request.rollout) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.ignoreJob(request, options, callback);
    }
    retryJob(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                rollout: (_a = request.rollout) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.retryJob(request, options, callback);
    }
    getJobRun(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getJobRun(request, options, callback);
    }
    terminateJobRun(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.terminateJobRun(request, options, callback);
    }
    getConfig(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getConfig(request, options, callback);
    }
    createDeliveryPipeline(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createDeliveryPipeline(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createDeliveryPipeline()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.create_delivery_pipeline.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_CreateDeliveryPipeline_async
     */
    async checkCreateDeliveryPipelineProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createDeliveryPipeline, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateDeliveryPipeline(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'delivery_pipeline.name': (_a = request.deliveryPipeline.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateDeliveryPipeline(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateDeliveryPipeline()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.update_delivery_pipeline.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_UpdateDeliveryPipeline_async
     */
    async checkUpdateDeliveryPipelineProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateDeliveryPipeline, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteDeliveryPipeline(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteDeliveryPipeline(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteDeliveryPipeline()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.delete_delivery_pipeline.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_DeleteDeliveryPipeline_async
     */
    async checkDeleteDeliveryPipelineProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteDeliveryPipeline, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createTarget(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createTarget(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createTarget()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.create_target.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_CreateTarget_async
     */
    async checkCreateTargetProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createTarget, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateTarget(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'target.name': (_a = request.target.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateTarget(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateTarget()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.update_target.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_UpdateTarget_async
     */
    async checkUpdateTargetProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateTarget, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteTarget(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteTarget(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteTarget()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.delete_target.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_DeleteTarget_async
     */
    async checkDeleteTargetProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteTarget, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createRelease(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createRelease(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createRelease()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.create_release.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_CreateRelease_async
     */
    async checkCreateReleaseProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createRelease, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createRollout(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createRollout(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createRollout()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.create_rollout.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_CreateRollout_async
     */
    async checkCreateRolloutProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createRollout, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listDeliveryPipelines(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listDeliveryPipelines(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of pipelines. Format must
     *   be projects/{project_id}/locations/{location_name}.
     * @param {number} request.pageSize
     *   The maximum number of pipelines to return. The service may return
     *   fewer than this value. If unspecified, at most 50 pipelines will
     *   be returned. The maximum value is 1000; values above 1000 will be set
     *   to 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListDeliveryPipelines` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} request.filter
     *   Filter pipelines to be returned. See https://google.aip.dev/160 for more
     *   details.
     * @param {string} request.orderBy
     *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.deploy.v1.DeliveryPipeline|DeliveryPipeline} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDeliveryPipelinesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDeliveryPipelinesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDeliveryPipelines'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDeliveryPipelines.createStream(this.innerApiCalls.listDeliveryPipelines, request, callSettings);
    }
    /**
     * Equivalent to `listDeliveryPipelines`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of pipelines. Format must
     *   be projects/{project_id}/locations/{location_name}.
     * @param {number} request.pageSize
     *   The maximum number of pipelines to return. The service may return
     *   fewer than this value. If unspecified, at most 50 pipelines will
     *   be returned. The maximum value is 1000; values above 1000 will be set
     *   to 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListDeliveryPipelines` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} request.filter
     *   Filter pipelines to be returned. See https://google.aip.dev/160 for more
     *   details.
     * @param {string} request.orderBy
     *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.deploy.v1.DeliveryPipeline|DeliveryPipeline}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.list_delivery_pipelines.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_ListDeliveryPipelines_async
     */
    listDeliveryPipelinesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDeliveryPipelines'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDeliveryPipelines.asyncIterate(this.innerApiCalls['listDeliveryPipelines'], request, callSettings);
    }
    listTargets(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listTargets(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of targets. Format must be
     *   projects/{project_id}/locations/{location_name}.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `Target` objects to return. The service may
     *   return fewer than this value. If unspecified, at most 50 `Target` objects
     *   will be returned. The maximum value is 1000; values above 1000 will be set
     *   to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListTargets` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter targets to be returned. See https://google.aip.dev/160 for
     *   more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.deploy.v1.Target|Target} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTargetsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTargetsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listTargets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTargets.createStream(this.innerApiCalls.listTargets, request, callSettings);
    }
    /**
     * Equivalent to `listTargets`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of targets. Format must be
     *   projects/{project_id}/locations/{location_name}.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `Target` objects to return. The service may
     *   return fewer than this value. If unspecified, at most 50 `Target` objects
     *   will be returned. The maximum value is 1000; values above 1000 will be set
     *   to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListTargets` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter targets to be returned. See https://google.aip.dev/160 for
     *   more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.deploy.v1.Target|Target}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.list_targets.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_ListTargets_async
     */
    listTargetsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listTargets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTargets.asyncIterate(this.innerApiCalls['listTargets'], request, callSettings);
    }
    listReleases(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listReleases(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The `DeliveryPipeline` which owns this collection of `Release`
     *   objects.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `Release` objects to return. The service
     *   may return fewer than this value. If unspecified, at most 50 `Release`
     *   objects will be returned. The maximum value is 1000; values above 1000 will
     *   be set to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListReleases` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter releases to be returned. See https://google.aip.dev/160
     *   for more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.deploy.v1.Release|Release} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listReleasesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listReleasesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listReleases'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listReleases.createStream(this.innerApiCalls.listReleases, request, callSettings);
    }
    /**
     * Equivalent to `listReleases`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The `DeliveryPipeline` which owns this collection of `Release`
     *   objects.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `Release` objects to return. The service
     *   may return fewer than this value. If unspecified, at most 50 `Release`
     *   objects will be returned. The maximum value is 1000; values above 1000 will
     *   be set to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListReleases` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter releases to be returned. See https://google.aip.dev/160
     *   for more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.deploy.v1.Release|Release}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.list_releases.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_ListReleases_async
     */
    listReleasesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listReleases'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listReleases.asyncIterate(this.innerApiCalls['listReleases'], request, callSettings);
    }
    listRollouts(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listRollouts(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The `Release` which owns this collection of `Rollout` objects.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `Rollout` objects to return. The service
     *   may return fewer than this value. If unspecified, at most 50 `Rollout`
     *   objects will be returned. The maximum value is 1000; values above 1000 will
     *   be set to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListRollouts` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter rollouts to be returned. See https://google.aip.dev/160
     *   for more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.deploy.v1.Rollout|Rollout} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listRolloutsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listRolloutsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listRollouts'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRollouts.createStream(this.innerApiCalls.listRollouts, request, callSettings);
    }
    /**
     * Equivalent to `listRollouts`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The `Release` which owns this collection of `Rollout` objects.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `Rollout` objects to return. The service
     *   may return fewer than this value. If unspecified, at most 50 `Rollout`
     *   objects will be returned. The maximum value is 1000; values above 1000 will
     *   be set to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListRollouts` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter rollouts to be returned. See https://google.aip.dev/160
     *   for more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.deploy.v1.Rollout|Rollout}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.list_rollouts.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_ListRollouts_async
     */
    listRolloutsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listRollouts'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRollouts.asyncIterate(this.innerApiCalls['listRollouts'], request, callSettings);
    }
    listJobRuns(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listJobRuns(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The `Rollout` which owns this collection of `JobRun` objects.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `JobRun` objects to return. The service may
     *   return fewer than this value. If unspecified, at most 50 `JobRun` objects
     *   will be returned. The maximum value is 1000; values above 1000 will be set
     *   to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListJobRuns` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match the call that provided
     *   the page token.
     * @param {string} [request.filter]
     *   Optional. Filter results to be returned. See https://google.aip.dev/160 for
     *   more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.deploy.v1.JobRun|JobRun} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listJobRunsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listJobRunsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listJobRuns'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listJobRuns.createStream(this.innerApiCalls.listJobRuns, request, callSettings);
    }
    /**
     * Equivalent to `listJobRuns`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The `Rollout` which owns this collection of `JobRun` objects.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `JobRun` objects to return. The service may
     *   return fewer than this value. If unspecified, at most 50 `JobRun` objects
     *   will be returned. The maximum value is 1000; values above 1000 will be set
     *   to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListJobRuns` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match the call that provided
     *   the page token.
     * @param {string} [request.filter]
     *   Optional. Filter results to be returned. See https://google.aip.dev/160 for
     *   more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.deploy.v1.JobRun|JobRun}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.list_job_runs.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_ListJobRuns_async
     */
    listJobRunsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listJobRuns'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listJobRuns.asyncIterate(this.innerApiCalls['listJobRuns'], request, callSettings);
    }
    /**
     * Gets the access control policy for a resource. Returns an empty policy
     * if the resource exists and does not have a policy set.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {Object} [request.options]
     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
     *   `GetIamPolicy`. This field is only used by Cloud IAM.
     *
     *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    getIamPolicy(request, options, callback) {
        return this.iamClient.getIamPolicy(request, options, callback);
    }
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    setIamPolicy(request, options, callback) {
        return this.iamClient.setIamPolicy(request, options, callback);
    }
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     */
    testIamPermissions(request, options, callback) {
        return this.iamClient.testIamPermissions(request, options, callback);
    }
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request, options, callback) {
        return this.locationsClient.getLocation(request, options, callback);
    }
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request, options) {
        return this.locationsClient.listLocationsAsync(request, options);
    }
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request, options, callback) {
        return this.operationsClient.getOperation(request, options, callback);
    }
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request, options) {
        return this.operationsClient.listOperationsAsync(request, options);
    }
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request, options, callback) {
        return this.operationsClient.cancelOperation(request, options, callback);
    }
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request, options, callback) {
        return this.operationsClient.deleteOperation(request, options, callback);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified build resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} build
     * @returns {string} Resource name string.
     */
    buildPath(project, location, build) {
        return this.pathTemplates.buildPathTemplate.render({
            project: project,
            location: location,
            build: build,
        });
    }
    /**
     * Parse the project from Build resource.
     *
     * @param {string} buildName
     *   A fully-qualified path representing Build resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBuildName(buildName) {
        return this.pathTemplates.buildPathTemplate.match(buildName).project;
    }
    /**
     * Parse the location from Build resource.
     *
     * @param {string} buildName
     *   A fully-qualified path representing Build resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromBuildName(buildName) {
        return this.pathTemplates.buildPathTemplate.match(buildName).location;
    }
    /**
     * Parse the build from Build resource.
     *
     * @param {string} buildName
     *   A fully-qualified path representing Build resource.
     * @returns {string} A string representing the build.
     */
    matchBuildFromBuildName(buildName) {
        return this.pathTemplates.buildPathTemplate.match(buildName).build;
    }
    /**
     * Return a fully-qualified cluster resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} cluster
     * @returns {string} Resource name string.
     */
    clusterPath(project, location, cluster) {
        return this.pathTemplates.clusterPathTemplate.render({
            project: project,
            location: location,
            cluster: cluster,
        });
    }
    /**
     * Parse the project from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromClusterName(clusterName) {
        return this.pathTemplates.clusterPathTemplate.match(clusterName).project;
    }
    /**
     * Parse the location from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromClusterName(clusterName) {
        return this.pathTemplates.clusterPathTemplate.match(clusterName).location;
    }
    /**
     * Parse the cluster from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromClusterName(clusterName) {
        return this.pathTemplates.clusterPathTemplate.match(clusterName).cluster;
    }
    /**
     * Return a fully-qualified config resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    configPath(project, location) {
        return this.pathTemplates.configPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Config resource.
     *
     * @param {string} configName
     *   A fully-qualified path representing Config resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromConfigName(configName) {
        return this.pathTemplates.configPathTemplate.match(configName).project;
    }
    /**
     * Parse the location from Config resource.
     *
     * @param {string} configName
     *   A fully-qualified path representing Config resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromConfigName(configName) {
        return this.pathTemplates.configPathTemplate.match(configName).location;
    }
    /**
     * Return a fully-qualified deliveryPipeline resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} delivery_pipeline
     * @returns {string} Resource name string.
     */
    deliveryPipelinePath(project, location, deliveryPipeline) {
        return this.pathTemplates.deliveryPipelinePathTemplate.render({
            project: project,
            location: location,
            delivery_pipeline: deliveryPipeline,
        });
    }
    /**
     * Parse the project from DeliveryPipeline resource.
     *
     * @param {string} deliveryPipelineName
     *   A fully-qualified path representing DeliveryPipeline resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDeliveryPipelineName(deliveryPipelineName) {
        return this.pathTemplates.deliveryPipelinePathTemplate.match(deliveryPipelineName).project;
    }
    /**
     * Parse the location from DeliveryPipeline resource.
     *
     * @param {string} deliveryPipelineName
     *   A fully-qualified path representing DeliveryPipeline resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDeliveryPipelineName(deliveryPipelineName) {
        return this.pathTemplates.deliveryPipelinePathTemplate.match(deliveryPipelineName).location;
    }
    /**
     * Parse the delivery_pipeline from DeliveryPipeline resource.
     *
     * @param {string} deliveryPipelineName
     *   A fully-qualified path representing DeliveryPipeline resource.
     * @returns {string} A string representing the delivery_pipeline.
     */
    matchDeliveryPipelineFromDeliveryPipelineName(deliveryPipelineName) {
        return this.pathTemplates.deliveryPipelinePathTemplate.match(deliveryPipelineName).delivery_pipeline;
    }
    /**
     * Return a fully-qualified jobRun resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} delivery_pipeline
     * @param {string} release
     * @param {string} rollout
     * @param {string} job_run
     * @returns {string} Resource name string.
     */
    jobRunPath(project, location, deliveryPipeline, release, rollout, jobRun) {
        return this.pathTemplates.jobRunPathTemplate.render({
            project: project,
            location: location,
            delivery_pipeline: deliveryPipeline,
            release: release,
            rollout: rollout,
            job_run: jobRun,
        });
    }
    /**
     * Parse the project from JobRun resource.
     *
     * @param {string} jobRunName
     *   A fully-qualified path representing JobRun resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromJobRunName(jobRunName) {
        return this.pathTemplates.jobRunPathTemplate.match(jobRunName).project;
    }
    /**
     * Parse the location from JobRun resource.
     *
     * @param {string} jobRunName
     *   A fully-qualified path representing JobRun resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromJobRunName(jobRunName) {
        return this.pathTemplates.jobRunPathTemplate.match(jobRunName).location;
    }
    /**
     * Parse the delivery_pipeline from JobRun resource.
     *
     * @param {string} jobRunName
     *   A fully-qualified path representing JobRun resource.
     * @returns {string} A string representing the delivery_pipeline.
     */
    matchDeliveryPipelineFromJobRunName(jobRunName) {
        return this.pathTemplates.jobRunPathTemplate.match(jobRunName)
            .delivery_pipeline;
    }
    /**
     * Parse the release from JobRun resource.
     *
     * @param {string} jobRunName
     *   A fully-qualified path representing JobRun resource.
     * @returns {string} A string representing the release.
     */
    matchReleaseFromJobRunName(jobRunName) {
        return this.pathTemplates.jobRunPathTemplate.match(jobRunName).release;
    }
    /**
     * Parse the rollout from JobRun resource.
     *
     * @param {string} jobRunName
     *   A fully-qualified path representing JobRun resource.
     * @returns {string} A string representing the rollout.
     */
    matchRolloutFromJobRunName(jobRunName) {
        return this.pathTemplates.jobRunPathTemplate.match(jobRunName).rollout;
    }
    /**
     * Parse the job_run from JobRun resource.
     *
     * @param {string} jobRunName
     *   A fully-qualified path representing JobRun resource.
     * @returns {string} A string representing the job_run.
     */
    matchJobRunFromJobRunName(jobRunName) {
        return this.pathTemplates.jobRunPathTemplate.match(jobRunName).job_run;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified membership resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} membership
     * @returns {string} Resource name string.
     */
    membershipPath(project, location, membership) {
        return this.pathTemplates.membershipPathTemplate.render({
            project: project,
            location: location,
            membership: membership,
        });
    }
    /**
     * Parse the project from Membership resource.
     *
     * @param {string} membershipName
     *   A fully-qualified path representing Membership resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromMembershipName(membershipName) {
        return this.pathTemplates.membershipPathTemplate.match(membershipName)
            .project;
    }
    /**
     * Parse the location from Membership resource.
     *
     * @param {string} membershipName
     *   A fully-qualified path representing Membership resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromMembershipName(membershipName) {
        return this.pathTemplates.membershipPathTemplate.match(membershipName)
            .location;
    }
    /**
     * Parse the membership from Membership resource.
     *
     * @param {string} membershipName
     *   A fully-qualified path representing Membership resource.
     * @returns {string} A string representing the membership.
     */
    matchMembershipFromMembershipName(membershipName) {
        return this.pathTemplates.membershipPathTemplate.match(membershipName)
            .membership;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified release resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} delivery_pipeline
     * @param {string} release
     * @returns {string} Resource name string.
     */
    releasePath(project, location, deliveryPipeline, release) {
        return this.pathTemplates.releasePathTemplate.render({
            project: project,
            location: location,
            delivery_pipeline: deliveryPipeline,
            release: release,
        });
    }
    /**
     * Parse the project from Release resource.
     *
     * @param {string} releaseName
     *   A fully-qualified path representing Release resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromReleaseName(releaseName) {
        return this.pathTemplates.releasePathTemplate.match(releaseName).project;
    }
    /**
     * Parse the location from Release resource.
     *
     * @param {string} releaseName
     *   A fully-qualified path representing Release resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromReleaseName(releaseName) {
        return this.pathTemplates.releasePathTemplate.match(releaseName).location;
    }
    /**
     * Parse the delivery_pipeline from Release resource.
     *
     * @param {string} releaseName
     *   A fully-qualified path representing Release resource.
     * @returns {string} A string representing the delivery_pipeline.
     */
    matchDeliveryPipelineFromReleaseName(releaseName) {
        return this.pathTemplates.releasePathTemplate.match(releaseName)
            .delivery_pipeline;
    }
    /**
     * Parse the release from Release resource.
     *
     * @param {string} releaseName
     *   A fully-qualified path representing Release resource.
     * @returns {string} A string representing the release.
     */
    matchReleaseFromReleaseName(releaseName) {
        return this.pathTemplates.releasePathTemplate.match(releaseName).release;
    }
    /**
     * Return a fully-qualified rollout resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} delivery_pipeline
     * @param {string} release
     * @param {string} rollout
     * @returns {string} Resource name string.
     */
    rolloutPath(project, location, deliveryPipeline, release, rollout) {
        return this.pathTemplates.rolloutPathTemplate.render({
            project: project,
            location: location,
            delivery_pipeline: deliveryPipeline,
            release: release,
            rollout: rollout,
        });
    }
    /**
     * Parse the project from Rollout resource.
     *
     * @param {string} rolloutName
     *   A fully-qualified path representing Rollout resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromRolloutName(rolloutName) {
        return this.pathTemplates.rolloutPathTemplate.match(rolloutName).project;
    }
    /**
     * Parse the location from Rollout resource.
     *
     * @param {string} rolloutName
     *   A fully-qualified path representing Rollout resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromRolloutName(rolloutName) {
        return this.pathTemplates.rolloutPathTemplate.match(rolloutName).location;
    }
    /**
     * Parse the delivery_pipeline from Rollout resource.
     *
     * @param {string} rolloutName
     *   A fully-qualified path representing Rollout resource.
     * @returns {string} A string representing the delivery_pipeline.
     */
    matchDeliveryPipelineFromRolloutName(rolloutName) {
        return this.pathTemplates.rolloutPathTemplate.match(rolloutName)
            .delivery_pipeline;
    }
    /**
     * Parse the release from Rollout resource.
     *
     * @param {string} rolloutName
     *   A fully-qualified path representing Rollout resource.
     * @returns {string} A string representing the release.
     */
    matchReleaseFromRolloutName(rolloutName) {
        return this.pathTemplates.rolloutPathTemplate.match(rolloutName).release;
    }
    /**
     * Parse the rollout from Rollout resource.
     *
     * @param {string} rolloutName
     *   A fully-qualified path representing Rollout resource.
     * @returns {string} A string representing the rollout.
     */
    matchRolloutFromRolloutName(rolloutName) {
        return this.pathTemplates.rolloutPathTemplate.match(rolloutName).rollout;
    }
    /**
     * Return a fully-qualified service resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} service
     * @returns {string} Resource name string.
     */
    servicePath(project, location, service) {
        return this.pathTemplates.servicePathTemplate.render({
            project: project,
            location: location,
            service: service,
        });
    }
    /**
     * Parse the project from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromServiceName(serviceName) {
        return this.pathTemplates.servicePathTemplate.match(serviceName).project;
    }
    /**
     * Parse the location from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromServiceName(serviceName) {
        return this.pathTemplates.servicePathTemplate.match(serviceName).location;
    }
    /**
     * Parse the service from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromServiceName(serviceName) {
        return this.pathTemplates.servicePathTemplate.match(serviceName).service;
    }
    /**
     * Return a fully-qualified target resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} target
     * @returns {string} Resource name string.
     */
    targetPath(project, location, target) {
        return this.pathTemplates.targetPathTemplate.render({
            project: project,
            location: location,
            target: target,
        });
    }
    /**
     * Parse the project from Target resource.
     *
     * @param {string} targetName
     *   A fully-qualified path representing Target resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTargetName(targetName) {
        return this.pathTemplates.targetPathTemplate.match(targetName).project;
    }
    /**
     * Parse the location from Target resource.
     *
     * @param {string} targetName
     *   A fully-qualified path representing Target resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTargetName(targetName) {
        return this.pathTemplates.targetPathTemplate.match(targetName).location;
    }
    /**
     * Parse the target from Target resource.
     *
     * @param {string} targetName
     *   A fully-qualified path representing Target resource.
     * @returns {string} A string representing the target.
     */
    matchTargetFromTargetName(targetName) {
        return this.pathTemplates.targetPathTemplate.match(targetName).target;
    }
    /**
     * Return a fully-qualified workerPool resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} worker_pool
     * @returns {string} Resource name string.
     */
    workerPoolPath(project, location, workerPool) {
        return this.pathTemplates.workerPoolPathTemplate.render({
            project: project,
            location: location,
            worker_pool: workerPool,
        });
    }
    /**
     * Parse the project from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWorkerPoolName(workerPoolName) {
        return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName)
            .project;
    }
    /**
     * Parse the location from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWorkerPoolName(workerPoolName) {
        return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName)
            .location;
    }
    /**
     * Parse the worker_pool from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the worker_pool.
     */
    matchWorkerPoolFromWorkerPoolName(workerPoolName) {
        return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName)
            .worker_pool;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.cloudDeployStub && !this._terminated) {
            return this.cloudDeployStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.iamClient.close();
                this.locationsClient.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.CloudDeployClient = CloudDeployClient;
//# sourceMappingURL=cloud_deploy_client.js.map