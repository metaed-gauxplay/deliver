/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, IamClient, IamProtos, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  CloudDeploy service creates and manages Continuous Delivery operations
 *  on Google Cloud Platform via Skaffold (https://skaffold.dev).
 * @class
 * @memberof v1
 */
export declare class CloudDeployClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    iamClient: IamClient;
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    cloudDeployStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of CloudDeployClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new CloudDeployClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets details of a single DeliveryPipeline.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the `DeliveryPipeline`. Format must be
     *   projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.deploy.v1.DeliveryPipeline|DeliveryPipeline}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.get_delivery_pipeline.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_GetDeliveryPipeline_async
     */
    getDeliveryPipeline(request?: protos.google.cloud.deploy.v1.IGetDeliveryPipelineRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.IDeliveryPipeline,
        protos.google.cloud.deploy.v1.IGetDeliveryPipelineRequest | undefined,
        {} | undefined
    ]>;
    getDeliveryPipeline(request: protos.google.cloud.deploy.v1.IGetDeliveryPipelineRequest, options: CallOptions, callback: Callback<protos.google.cloud.deploy.v1.IDeliveryPipeline, protos.google.cloud.deploy.v1.IGetDeliveryPipelineRequest | null | undefined, {} | null | undefined>): void;
    getDeliveryPipeline(request: protos.google.cloud.deploy.v1.IGetDeliveryPipelineRequest, callback: Callback<protos.google.cloud.deploy.v1.IDeliveryPipeline, protos.google.cloud.deploy.v1.IGetDeliveryPipelineRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets details of a single Target.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the `Target`. Format must be
     *   projects/{project_id}/locations/{location_name}/targets/{target_name}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.deploy.v1.Target|Target}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.get_target.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_GetTarget_async
     */
    getTarget(request?: protos.google.cloud.deploy.v1.IGetTargetRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.ITarget,
        protos.google.cloud.deploy.v1.IGetTargetRequest | undefined,
        {} | undefined
    ]>;
    getTarget(request: protos.google.cloud.deploy.v1.IGetTargetRequest, options: CallOptions, callback: Callback<protos.google.cloud.deploy.v1.ITarget, protos.google.cloud.deploy.v1.IGetTargetRequest | null | undefined, {} | null | undefined>): void;
    getTarget(request: protos.google.cloud.deploy.v1.IGetTargetRequest, callback: Callback<protos.google.cloud.deploy.v1.ITarget, protos.google.cloud.deploy.v1.IGetTargetRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets details of a single Release.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the `Release`. Format must be
     *   projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}/releases/{release_name}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.deploy.v1.Release|Release}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.get_release.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_GetRelease_async
     */
    getRelease(request?: protos.google.cloud.deploy.v1.IGetReleaseRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.IRelease,
        protos.google.cloud.deploy.v1.IGetReleaseRequest | undefined,
        {} | undefined
    ]>;
    getRelease(request: protos.google.cloud.deploy.v1.IGetReleaseRequest, options: CallOptions, callback: Callback<protos.google.cloud.deploy.v1.IRelease, protos.google.cloud.deploy.v1.IGetReleaseRequest | null | undefined, {} | null | undefined>): void;
    getRelease(request: protos.google.cloud.deploy.v1.IGetReleaseRequest, callback: Callback<protos.google.cloud.deploy.v1.IRelease, protos.google.cloud.deploy.v1.IGetReleaseRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Abandons a Release in the Delivery Pipeline.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the Release. Format is
     *   projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/
     *   releases/{release}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.deploy.v1.AbandonReleaseResponse|AbandonReleaseResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.abandon_release.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_AbandonRelease_async
     */
    abandonRelease(request?: protos.google.cloud.deploy.v1.IAbandonReleaseRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.IAbandonReleaseResponse,
        protos.google.cloud.deploy.v1.IAbandonReleaseRequest | undefined,
        {} | undefined
    ]>;
    abandonRelease(request: protos.google.cloud.deploy.v1.IAbandonReleaseRequest, options: CallOptions, callback: Callback<protos.google.cloud.deploy.v1.IAbandonReleaseResponse, protos.google.cloud.deploy.v1.IAbandonReleaseRequest | null | undefined, {} | null | undefined>): void;
    abandonRelease(request: protos.google.cloud.deploy.v1.IAbandonReleaseRequest, callback: Callback<protos.google.cloud.deploy.v1.IAbandonReleaseResponse, protos.google.cloud.deploy.v1.IAbandonReleaseRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Approves a Rollout.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the Rollout. Format is
     *   projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/
     *   releases/{release}/rollouts/{rollout}.
     * @param {boolean} request.approved
     *   Required. True = approve; false = reject
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.deploy.v1.ApproveRolloutResponse|ApproveRolloutResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.approve_rollout.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_ApproveRollout_async
     */
    approveRollout(request?: protos.google.cloud.deploy.v1.IApproveRolloutRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.IApproveRolloutResponse,
        protos.google.cloud.deploy.v1.IApproveRolloutRequest | undefined,
        {} | undefined
    ]>;
    approveRollout(request: protos.google.cloud.deploy.v1.IApproveRolloutRequest, options: CallOptions, callback: Callback<protos.google.cloud.deploy.v1.IApproveRolloutResponse, protos.google.cloud.deploy.v1.IApproveRolloutRequest | null | undefined, {} | null | undefined>): void;
    approveRollout(request: protos.google.cloud.deploy.v1.IApproveRolloutRequest, callback: Callback<protos.google.cloud.deploy.v1.IApproveRolloutResponse, protos.google.cloud.deploy.v1.IApproveRolloutRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Advances a Rollout in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the Rollout. Format is
     *   projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/
     *   releases/{release}/rollouts/{rollout}.
     * @param {string} request.phaseId
     *   Required. The phase ID to advance the `Rollout` to.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.deploy.v1.AdvanceRolloutResponse|AdvanceRolloutResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.advance_rollout.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_AdvanceRollout_async
     */
    advanceRollout(request?: protos.google.cloud.deploy.v1.IAdvanceRolloutRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.IAdvanceRolloutResponse,
        protos.google.cloud.deploy.v1.IAdvanceRolloutRequest | undefined,
        {} | undefined
    ]>;
    advanceRollout(request: protos.google.cloud.deploy.v1.IAdvanceRolloutRequest, options: CallOptions, callback: Callback<protos.google.cloud.deploy.v1.IAdvanceRolloutResponse, protos.google.cloud.deploy.v1.IAdvanceRolloutRequest | null | undefined, {} | null | undefined>): void;
    advanceRollout(request: protos.google.cloud.deploy.v1.IAdvanceRolloutRequest, callback: Callback<protos.google.cloud.deploy.v1.IAdvanceRolloutResponse, protos.google.cloud.deploy.v1.IAdvanceRolloutRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Cancels a Rollout in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the Rollout. Format is
     *   projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/
     *   releases/{release}/rollouts/{rollout}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.deploy.v1.CancelRolloutResponse|CancelRolloutResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.cancel_rollout.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_CancelRollout_async
     */
    cancelRollout(request?: protos.google.cloud.deploy.v1.ICancelRolloutRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.ICancelRolloutResponse,
        protos.google.cloud.deploy.v1.ICancelRolloutRequest | undefined,
        {} | undefined
    ]>;
    cancelRollout(request: protos.google.cloud.deploy.v1.ICancelRolloutRequest, options: CallOptions, callback: Callback<protos.google.cloud.deploy.v1.ICancelRolloutResponse, protos.google.cloud.deploy.v1.ICancelRolloutRequest | null | undefined, {} | null | undefined>): void;
    cancelRollout(request: protos.google.cloud.deploy.v1.ICancelRolloutRequest, callback: Callback<protos.google.cloud.deploy.v1.ICancelRolloutResponse, protos.google.cloud.deploy.v1.ICancelRolloutRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets details of a single Rollout.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the `Rollout`. Format must be
     *   projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}/releases/{release_name}/rollouts/{rollout_name}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.deploy.v1.Rollout|Rollout}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.get_rollout.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_GetRollout_async
     */
    getRollout(request?: protos.google.cloud.deploy.v1.IGetRolloutRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.IRollout,
        protos.google.cloud.deploy.v1.IGetRolloutRequest | undefined,
        {} | undefined
    ]>;
    getRollout(request: protos.google.cloud.deploy.v1.IGetRolloutRequest, options: CallOptions, callback: Callback<protos.google.cloud.deploy.v1.IRollout, protos.google.cloud.deploy.v1.IGetRolloutRequest | null | undefined, {} | null | undefined>): void;
    getRollout(request: protos.google.cloud.deploy.v1.IGetRolloutRequest, callback: Callback<protos.google.cloud.deploy.v1.IRollout, protos.google.cloud.deploy.v1.IGetRolloutRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Ignores the specified Job in a Rollout.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.rollout
     *   Required. Name of the Rollout. Format is
     *   projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/
     *   releases/{release}/rollouts/{rollout}.
     * @param {string} request.phaseId
     *   Required. The phase ID the Job to ignore belongs to.
     * @param {string} request.jobId
     *   Required. The job ID for the Job to ignore.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.deploy.v1.IgnoreJobResponse|IgnoreJobResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.ignore_job.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_IgnoreJob_async
     */
    ignoreJob(request?: protos.google.cloud.deploy.v1.IIgnoreJobRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.IIgnoreJobResponse,
        protos.google.cloud.deploy.v1.IIgnoreJobRequest | undefined,
        {} | undefined
    ]>;
    ignoreJob(request: protos.google.cloud.deploy.v1.IIgnoreJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.deploy.v1.IIgnoreJobResponse, protos.google.cloud.deploy.v1.IIgnoreJobRequest | null | undefined, {} | null | undefined>): void;
    ignoreJob(request: protos.google.cloud.deploy.v1.IIgnoreJobRequest, callback: Callback<protos.google.cloud.deploy.v1.IIgnoreJobResponse, protos.google.cloud.deploy.v1.IIgnoreJobRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Retries the specified Job in a Rollout.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.rollout
     *   Required. Name of the Rollout. Format is
     *   projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/
     *   releases/{release}/rollouts/{rollout}.
     * @param {string} request.phaseId
     *   Required. The phase ID the Job to retry belongs to.
     * @param {string} request.jobId
     *   Required. The job ID for the Job to retry.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.deploy.v1.RetryJobResponse|RetryJobResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.retry_job.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_RetryJob_async
     */
    retryJob(request?: protos.google.cloud.deploy.v1.IRetryJobRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.IRetryJobResponse,
        protos.google.cloud.deploy.v1.IRetryJobRequest | undefined,
        {} | undefined
    ]>;
    retryJob(request: protos.google.cloud.deploy.v1.IRetryJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.deploy.v1.IRetryJobResponse, protos.google.cloud.deploy.v1.IRetryJobRequest | null | undefined, {} | null | undefined>): void;
    retryJob(request: protos.google.cloud.deploy.v1.IRetryJobRequest, callback: Callback<protos.google.cloud.deploy.v1.IRetryJobResponse, protos.google.cloud.deploy.v1.IRetryJobRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets details of a single JobRun.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the `JobRun`. Format must be
     *   projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}/releases/{release_name}/rollouts/{rollout_name}/jobRuns/{job_run_name}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.deploy.v1.JobRun|JobRun}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.get_job_run.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_GetJobRun_async
     */
    getJobRun(request?: protos.google.cloud.deploy.v1.IGetJobRunRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.IJobRun,
        protos.google.cloud.deploy.v1.IGetJobRunRequest | undefined,
        {} | undefined
    ]>;
    getJobRun(request: protos.google.cloud.deploy.v1.IGetJobRunRequest, options: CallOptions, callback: Callback<protos.google.cloud.deploy.v1.IJobRun, protos.google.cloud.deploy.v1.IGetJobRunRequest | null | undefined, {} | null | undefined>): void;
    getJobRun(request: protos.google.cloud.deploy.v1.IGetJobRunRequest, callback: Callback<protos.google.cloud.deploy.v1.IJobRun, protos.google.cloud.deploy.v1.IGetJobRunRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Terminates a Job Run in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the `JobRun`. Format must be
     *   projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/
     *   releases/{release}/rollouts/{rollout}/jobRuns/{jobRun}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.deploy.v1.TerminateJobRunResponse|TerminateJobRunResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.terminate_job_run.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_TerminateJobRun_async
     */
    terminateJobRun(request?: protos.google.cloud.deploy.v1.ITerminateJobRunRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.ITerminateJobRunResponse,
        protos.google.cloud.deploy.v1.ITerminateJobRunRequest | undefined,
        {} | undefined
    ]>;
    terminateJobRun(request: protos.google.cloud.deploy.v1.ITerminateJobRunRequest, options: CallOptions, callback: Callback<protos.google.cloud.deploy.v1.ITerminateJobRunResponse, protos.google.cloud.deploy.v1.ITerminateJobRunRequest | null | undefined, {} | null | undefined>): void;
    terminateJobRun(request: protos.google.cloud.deploy.v1.ITerminateJobRunRequest, callback: Callback<protos.google.cloud.deploy.v1.ITerminateJobRunResponse, protos.google.cloud.deploy.v1.ITerminateJobRunRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the configuration for a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of requested configuration.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.deploy.v1.Config|Config}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.get_config.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_GetConfig_async
     */
    getConfig(request?: protos.google.cloud.deploy.v1.IGetConfigRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.IConfig,
        protos.google.cloud.deploy.v1.IGetConfigRequest | undefined,
        {} | undefined
    ]>;
    getConfig(request: protos.google.cloud.deploy.v1.IGetConfigRequest, options: CallOptions, callback: Callback<protos.google.cloud.deploy.v1.IConfig, protos.google.cloud.deploy.v1.IGetConfigRequest | null | undefined, {} | null | undefined>): void;
    getConfig(request: protos.google.cloud.deploy.v1.IGetConfigRequest, callback: Callback<protos.google.cloud.deploy.v1.IConfig, protos.google.cloud.deploy.v1.IGetConfigRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new DeliveryPipeline in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent collection in which the `DeliveryPipeline` should be
     *   created. Format should be projects/{project_id}/locations/{location_name}.
     * @param {string} request.deliveryPipelineId
     *   Required. ID of the `DeliveryPipeline`.
     * @param {google.cloud.deploy.v1.DeliveryPipeline} request.deliveryPipeline
     *   Required. The `DeliveryPipeline` to create.
     * @param {string} [request.requestId]
     *   Optional. A request ID to identify requests. Specify a unique request ID
     *   so that if you must retry your request, the server will know to ignore
     *   the request if it has already been completed. The server will guarantee
     *   that for at least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and the
     *   request times out. If you make the request again with the same request ID,
     *   the server can check if original operation with the same request ID was
     *   received, and if so, will ignore the second request. This prevents clients
     *   from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {boolean} [request.validateOnly]
     *   Optional. If set to true, the request is validated and the user is provided
     *   with an expected result, but no actual change is made.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.create_delivery_pipeline.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_CreateDeliveryPipeline_async
     */
    createDeliveryPipeline(request?: protos.google.cloud.deploy.v1.ICreateDeliveryPipelineRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.deploy.v1.IDeliveryPipeline, protos.google.cloud.deploy.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createDeliveryPipeline(request: protos.google.cloud.deploy.v1.ICreateDeliveryPipelineRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.deploy.v1.IDeliveryPipeline, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createDeliveryPipeline(request: protos.google.cloud.deploy.v1.ICreateDeliveryPipelineRequest, callback: Callback<LROperation<protos.google.cloud.deploy.v1.IDeliveryPipeline, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createDeliveryPipeline()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.create_delivery_pipeline.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_CreateDeliveryPipeline_async
     */
    checkCreateDeliveryPipelineProgress(name: string): Promise<LROperation<protos.google.cloud.deploy.v1.DeliveryPipeline, protos.google.cloud.deploy.v1.OperationMetadata>>;
    /**
     * Updates the parameters of a single DeliveryPipeline.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Field mask is used to specify the fields to be overwritten in the
     *   `DeliveryPipeline` resource by the update.
     *   The fields specified in the update_mask are relative to the resource, not
     *   the full request. A field will be overwritten if it is in the mask. If the
     *   user does not provide a mask then all fields will be overwritten.
     * @param {google.cloud.deploy.v1.DeliveryPipeline} request.deliveryPipeline
     *   Required. The `DeliveryPipeline` to update.
     * @param {string} [request.requestId]
     *   Optional. A request ID to identify requests. Specify a unique request ID
     *   so that if you must retry your request, the server will know to ignore
     *   the request if it has already been completed. The server will guarantee
     *   that for at least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and the
     *   request times out. If you make the request again with the same request ID,
     *   the server can check if original operation with the same request ID was
     *   received, and if so, will ignore the second request. This prevents clients
     *   from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {boolean} [request.allowMissing]
     *   Optional. If set to true, updating a `DeliveryPipeline` that does not exist
     *   will result in the creation of a new `DeliveryPipeline`.
     * @param {boolean} [request.validateOnly]
     *   Optional. If set to true, the request is validated and the user is provided
     *   with an expected result, but no actual change is made.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.update_delivery_pipeline.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_UpdateDeliveryPipeline_async
     */
    updateDeliveryPipeline(request?: protos.google.cloud.deploy.v1.IUpdateDeliveryPipelineRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.deploy.v1.IDeliveryPipeline, protos.google.cloud.deploy.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateDeliveryPipeline(request: protos.google.cloud.deploy.v1.IUpdateDeliveryPipelineRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.deploy.v1.IDeliveryPipeline, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateDeliveryPipeline(request: protos.google.cloud.deploy.v1.IUpdateDeliveryPipelineRequest, callback: Callback<LROperation<protos.google.cloud.deploy.v1.IDeliveryPipeline, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateDeliveryPipeline()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.update_delivery_pipeline.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_UpdateDeliveryPipeline_async
     */
    checkUpdateDeliveryPipelineProgress(name: string): Promise<LROperation<protos.google.cloud.deploy.v1.DeliveryPipeline, protos.google.cloud.deploy.v1.OperationMetadata>>;
    /**
     * Deletes a single DeliveryPipeline.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the `DeliveryPipeline` to delete. Format should be
     *   projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}.
     * @param {string} [request.requestId]
     *   Optional. A request ID to identify requests. Specify a unique request ID
     *   so that if you must retry your request, the server will know to ignore
     *   the request if it has already been completed. The server will guarantee
     *   that for at least 60 minutes after the first request.
     *
     *   For example, consider a situation where you make an initial request and the
     *   request times out. If you make the request again with the same request ID,
     *   the server can check if original operation with the same request ID was
     *   received, and if so, will ignore the second request. This prevents clients
     *   from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {boolean} [request.allowMissing]
     *   Optional. If set to true, then deleting an already deleted or non-existing
     *   `DeliveryPipeline` will succeed.
     * @param {boolean} [request.validateOnly]
     *   Optional. If set, validate the request and preview the review, but do not
     *   actually post it.
     * @param {boolean} [request.force]
     *   Optional. If set to true, all child resources under this pipeline will also
     *   be deleted. Otherwise, the request will only work if the pipeline has no
     *   child resources.
     * @param {string} [request.etag]
     *   Optional. This checksum is computed by the server based on the value of
     *   other fields, and may be sent on update and delete requests to ensure the
     *   client has an up-to-date value before proceeding.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.delete_delivery_pipeline.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_DeleteDeliveryPipeline_async
     */
    deleteDeliveryPipeline(request?: protos.google.cloud.deploy.v1.IDeleteDeliveryPipelineRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.deploy.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteDeliveryPipeline(request: protos.google.cloud.deploy.v1.IDeleteDeliveryPipelineRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteDeliveryPipeline(request: protos.google.cloud.deploy.v1.IDeleteDeliveryPipelineRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteDeliveryPipeline()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.delete_delivery_pipeline.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_DeleteDeliveryPipeline_async
     */
    checkDeleteDeliveryPipelineProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.deploy.v1.OperationMetadata>>;
    /**
     * Creates a new Target in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent collection in which the `Target` should be created.
     *   Format should be
     *   projects/{project_id}/locations/{location_name}.
     * @param {string} request.targetId
     *   Required. ID of the `Target`.
     * @param {google.cloud.deploy.v1.Target} request.target
     *   Required. The `Target` to create.
     * @param {string} [request.requestId]
     *   Optional. A request ID to identify requests. Specify a unique request ID
     *   so that if you must retry your request, the server will know to ignore
     *   the request if it has already been completed. The server will guarantee
     *   that for at least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and the
     *   request times out. If you make the request again with the same request ID,
     *   the server can check if original operation with the same request ID was
     *   received, and if so, will ignore the second request. This prevents clients
     *   from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {boolean} [request.validateOnly]
     *   Optional. If set to true, the request is validated and the user is provided
     *   with an expected result, but no actual change is made.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.create_target.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_CreateTarget_async
     */
    createTarget(request?: protos.google.cloud.deploy.v1.ICreateTargetRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.deploy.v1.ITarget, protos.google.cloud.deploy.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createTarget(request: protos.google.cloud.deploy.v1.ICreateTargetRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.deploy.v1.ITarget, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createTarget(request: protos.google.cloud.deploy.v1.ICreateTargetRequest, callback: Callback<LROperation<protos.google.cloud.deploy.v1.ITarget, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createTarget()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.create_target.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_CreateTarget_async
     */
    checkCreateTargetProgress(name: string): Promise<LROperation<protos.google.cloud.deploy.v1.Target, protos.google.cloud.deploy.v1.OperationMetadata>>;
    /**
     * Updates the parameters of a single Target.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Field mask is used to specify the fields to be overwritten in the
     *   Target resource by the update.
     *   The fields specified in the update_mask are relative to the resource, not
     *   the full request. A field will be overwritten if it is in the mask. If the
     *   user does not provide a mask then all fields will be overwritten.
     * @param {google.cloud.deploy.v1.Target} request.target
     *   Required. The `Target` to update.
     * @param {string} [request.requestId]
     *   Optional. A request ID to identify requests. Specify a unique request ID
     *   so that if you must retry your request, the server will know to ignore
     *   the request if it has already been completed. The server will guarantee
     *   that for at least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and the
     *   request times out. If you make the request again with the same request ID,
     *   the server can check if original operation with the same request ID was
     *   received, and if so, will ignore the second request. This prevents clients
     *   from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {boolean} [request.allowMissing]
     *   Optional. If set to true, updating a `Target` that does not exist will
     *   result in the creation of a new `Target`.
     * @param {boolean} [request.validateOnly]
     *   Optional. If set to true, the request is validated and the user is provided
     *   with an expected result, but no actual change is made.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.update_target.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_UpdateTarget_async
     */
    updateTarget(request?: protos.google.cloud.deploy.v1.IUpdateTargetRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.deploy.v1.ITarget, protos.google.cloud.deploy.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateTarget(request: protos.google.cloud.deploy.v1.IUpdateTargetRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.deploy.v1.ITarget, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateTarget(request: protos.google.cloud.deploy.v1.IUpdateTargetRequest, callback: Callback<LROperation<protos.google.cloud.deploy.v1.ITarget, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateTarget()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.update_target.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_UpdateTarget_async
     */
    checkUpdateTargetProgress(name: string): Promise<LROperation<protos.google.cloud.deploy.v1.Target, protos.google.cloud.deploy.v1.OperationMetadata>>;
    /**
     * Deletes a single Target.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the `Target` to delete. Format should be
     *   projects/{project_id}/locations/{location_name}/targets/{target_name}.
     * @param {string} [request.requestId]
     *   Optional. A request ID to identify requests. Specify a unique request ID
     *   so that if you must retry your request, the server will know to ignore
     *   the request if it has already been completed. The server will guarantee
     *   that for at least 60 minutes after the first request.
     *
     *   For example, consider a situation where you make an initial request and the
     *   request times out. If you make the request again with the same request ID,
     *   the server can check if original operation with the same request ID was
     *   received, and if so, will ignore the second request. This prevents clients
     *   from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {boolean} [request.allowMissing]
     *   Optional. If set to true, then deleting an already deleted or non-existing
     *   `Target` will succeed.
     * @param {boolean} [request.validateOnly]
     *   Optional. If set, validate the request and preview the review, but do not
     *   actually post it.
     * @param {string} [request.etag]
     *   Optional. This checksum is computed by the server based on the value of
     *   other fields, and may be sent on update and delete requests to ensure the
     *   client has an up-to-date value before proceeding.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.delete_target.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_DeleteTarget_async
     */
    deleteTarget(request?: protos.google.cloud.deploy.v1.IDeleteTargetRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.deploy.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteTarget(request: protos.google.cloud.deploy.v1.IDeleteTargetRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteTarget(request: protos.google.cloud.deploy.v1.IDeleteTargetRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteTarget()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.delete_target.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_DeleteTarget_async
     */
    checkDeleteTargetProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.deploy.v1.OperationMetadata>>;
    /**
     * Creates a new Release in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent collection in which the `Release` should be created.
     *   Format should be
     *   projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}.
     * @param {string} request.releaseId
     *   Required. ID of the `Release`.
     * @param {google.cloud.deploy.v1.Release} request.release
     *   Required. The `Release` to create.
     * @param {string} [request.requestId]
     *   Optional. A request ID to identify requests. Specify a unique request ID
     *   so that if you must retry your request, the server will know to ignore
     *   the request if it has already been completed. The server will guarantee
     *   that for at least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and the
     *   request times out. If you make the request again with the same request ID,
     *   the server can check if original operation with the same request ID was
     *   received, and if so, will ignore the second request. This prevents clients
     *   from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {boolean} [request.validateOnly]
     *   Optional. If set to true, the request is validated and the user is provided
     *   with an expected result, but no actual change is made.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.create_release.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_CreateRelease_async
     */
    createRelease(request?: protos.google.cloud.deploy.v1.ICreateReleaseRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.deploy.v1.IRelease, protos.google.cloud.deploy.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createRelease(request: protos.google.cloud.deploy.v1.ICreateReleaseRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.deploy.v1.IRelease, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createRelease(request: protos.google.cloud.deploy.v1.ICreateReleaseRequest, callback: Callback<LROperation<protos.google.cloud.deploy.v1.IRelease, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createRelease()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.create_release.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_CreateRelease_async
     */
    checkCreateReleaseProgress(name: string): Promise<LROperation<protos.google.cloud.deploy.v1.Release, protos.google.cloud.deploy.v1.OperationMetadata>>;
    /**
     * Creates a new Rollout in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent collection in which the `Rollout` should be created.
     *   Format should be
     *   projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}/releases/{release_name}.
     * @param {string} request.rolloutId
     *   Required. ID of the `Rollout`.
     * @param {google.cloud.deploy.v1.Rollout} request.rollout
     *   Required. The `Rollout` to create.
     * @param {string} [request.requestId]
     *   Optional. A request ID to identify requests. Specify a unique request ID
     *   so that if you must retry your request, the server will know to ignore
     *   the request if it has already been completed. The server will guarantee
     *   that for at least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and the
     *   request times out. If you make the request again with the same request ID,
     *   the server can check if original operation with the same request ID was
     *   received, and if so, will ignore the second request. This prevents clients
     *   from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {boolean} [request.validateOnly]
     *   Optional. If set to true, the request is validated and the user is provided
     *   with an expected result, but no actual change is made.
     * @param {string} [request.startingPhaseId]
     *   Optional. The starting phase ID for the `Rollout`. If empty the `Rollout`
     *   will start at the first phase.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.create_rollout.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_CreateRollout_async
     */
    createRollout(request?: protos.google.cloud.deploy.v1.ICreateRolloutRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.deploy.v1.IRollout, protos.google.cloud.deploy.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createRollout(request: protos.google.cloud.deploy.v1.ICreateRolloutRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.deploy.v1.IRollout, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createRollout(request: protos.google.cloud.deploy.v1.ICreateRolloutRequest, callback: Callback<LROperation<protos.google.cloud.deploy.v1.IRollout, protos.google.cloud.deploy.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createRollout()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.create_rollout.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_CreateRollout_async
     */
    checkCreateRolloutProgress(name: string): Promise<LROperation<protos.google.cloud.deploy.v1.Rollout, protos.google.cloud.deploy.v1.OperationMetadata>>;
    /**
     * Lists DeliveryPipelines in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of pipelines. Format must
     *   be projects/{project_id}/locations/{location_name}.
     * @param {number} request.pageSize
     *   The maximum number of pipelines to return. The service may return
     *   fewer than this value. If unspecified, at most 50 pipelines will
     *   be returned. The maximum value is 1000; values above 1000 will be set
     *   to 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListDeliveryPipelines` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} request.filter
     *   Filter pipelines to be returned. See https://google.aip.dev/160 for more
     *   details.
     * @param {string} request.orderBy
     *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.deploy.v1.DeliveryPipeline|DeliveryPipeline}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listDeliveryPipelinesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDeliveryPipelines(request?: protos.google.cloud.deploy.v1.IListDeliveryPipelinesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.IDeliveryPipeline[],
        protos.google.cloud.deploy.v1.IListDeliveryPipelinesRequest | null,
        protos.google.cloud.deploy.v1.IListDeliveryPipelinesResponse
    ]>;
    listDeliveryPipelines(request: protos.google.cloud.deploy.v1.IListDeliveryPipelinesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.deploy.v1.IListDeliveryPipelinesRequest, protos.google.cloud.deploy.v1.IListDeliveryPipelinesResponse | null | undefined, protos.google.cloud.deploy.v1.IDeliveryPipeline>): void;
    listDeliveryPipelines(request: protos.google.cloud.deploy.v1.IListDeliveryPipelinesRequest, callback: PaginationCallback<protos.google.cloud.deploy.v1.IListDeliveryPipelinesRequest, protos.google.cloud.deploy.v1.IListDeliveryPipelinesResponse | null | undefined, protos.google.cloud.deploy.v1.IDeliveryPipeline>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of pipelines. Format must
     *   be projects/{project_id}/locations/{location_name}.
     * @param {number} request.pageSize
     *   The maximum number of pipelines to return. The service may return
     *   fewer than this value. If unspecified, at most 50 pipelines will
     *   be returned. The maximum value is 1000; values above 1000 will be set
     *   to 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListDeliveryPipelines` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} request.filter
     *   Filter pipelines to be returned. See https://google.aip.dev/160 for more
     *   details.
     * @param {string} request.orderBy
     *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.deploy.v1.DeliveryPipeline|DeliveryPipeline} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDeliveryPipelinesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDeliveryPipelinesStream(request?: protos.google.cloud.deploy.v1.IListDeliveryPipelinesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listDeliveryPipelines`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of pipelines. Format must
     *   be projects/{project_id}/locations/{location_name}.
     * @param {number} request.pageSize
     *   The maximum number of pipelines to return. The service may return
     *   fewer than this value. If unspecified, at most 50 pipelines will
     *   be returned. The maximum value is 1000; values above 1000 will be set
     *   to 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListDeliveryPipelines` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} request.filter
     *   Filter pipelines to be returned. See https://google.aip.dev/160 for more
     *   details.
     * @param {string} request.orderBy
     *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.deploy.v1.DeliveryPipeline|DeliveryPipeline}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.list_delivery_pipelines.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_ListDeliveryPipelines_async
     */
    listDeliveryPipelinesAsync(request?: protos.google.cloud.deploy.v1.IListDeliveryPipelinesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.deploy.v1.IDeliveryPipeline>;
    /**
     * Lists Targets in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of targets. Format must be
     *   projects/{project_id}/locations/{location_name}.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `Target` objects to return. The service may
     *   return fewer than this value. If unspecified, at most 50 `Target` objects
     *   will be returned. The maximum value is 1000; values above 1000 will be set
     *   to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListTargets` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter targets to be returned. See https://google.aip.dev/160 for
     *   more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.deploy.v1.Target|Target}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listTargetsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTargets(request?: protos.google.cloud.deploy.v1.IListTargetsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.ITarget[],
        protos.google.cloud.deploy.v1.IListTargetsRequest | null,
        protos.google.cloud.deploy.v1.IListTargetsResponse
    ]>;
    listTargets(request: protos.google.cloud.deploy.v1.IListTargetsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.deploy.v1.IListTargetsRequest, protos.google.cloud.deploy.v1.IListTargetsResponse | null | undefined, protos.google.cloud.deploy.v1.ITarget>): void;
    listTargets(request: protos.google.cloud.deploy.v1.IListTargetsRequest, callback: PaginationCallback<protos.google.cloud.deploy.v1.IListTargetsRequest, protos.google.cloud.deploy.v1.IListTargetsResponse | null | undefined, protos.google.cloud.deploy.v1.ITarget>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of targets. Format must be
     *   projects/{project_id}/locations/{location_name}.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `Target` objects to return. The service may
     *   return fewer than this value. If unspecified, at most 50 `Target` objects
     *   will be returned. The maximum value is 1000; values above 1000 will be set
     *   to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListTargets` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter targets to be returned. See https://google.aip.dev/160 for
     *   more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.deploy.v1.Target|Target} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTargetsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTargetsStream(request?: protos.google.cloud.deploy.v1.IListTargetsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listTargets`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of targets. Format must be
     *   projects/{project_id}/locations/{location_name}.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `Target` objects to return. The service may
     *   return fewer than this value. If unspecified, at most 50 `Target` objects
     *   will be returned. The maximum value is 1000; values above 1000 will be set
     *   to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListTargets` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter targets to be returned. See https://google.aip.dev/160 for
     *   more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.deploy.v1.Target|Target}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.list_targets.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_ListTargets_async
     */
    listTargetsAsync(request?: protos.google.cloud.deploy.v1.IListTargetsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.deploy.v1.ITarget>;
    /**
     * Lists Releases in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The `DeliveryPipeline` which owns this collection of `Release`
     *   objects.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `Release` objects to return. The service
     *   may return fewer than this value. If unspecified, at most 50 `Release`
     *   objects will be returned. The maximum value is 1000; values above 1000 will
     *   be set to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListReleases` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter releases to be returned. See https://google.aip.dev/160
     *   for more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.deploy.v1.Release|Release}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listReleasesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listReleases(request?: protos.google.cloud.deploy.v1.IListReleasesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.IRelease[],
        protos.google.cloud.deploy.v1.IListReleasesRequest | null,
        protos.google.cloud.deploy.v1.IListReleasesResponse
    ]>;
    listReleases(request: protos.google.cloud.deploy.v1.IListReleasesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.deploy.v1.IListReleasesRequest, protos.google.cloud.deploy.v1.IListReleasesResponse | null | undefined, protos.google.cloud.deploy.v1.IRelease>): void;
    listReleases(request: protos.google.cloud.deploy.v1.IListReleasesRequest, callback: PaginationCallback<protos.google.cloud.deploy.v1.IListReleasesRequest, protos.google.cloud.deploy.v1.IListReleasesResponse | null | undefined, protos.google.cloud.deploy.v1.IRelease>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The `DeliveryPipeline` which owns this collection of `Release`
     *   objects.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `Release` objects to return. The service
     *   may return fewer than this value. If unspecified, at most 50 `Release`
     *   objects will be returned. The maximum value is 1000; values above 1000 will
     *   be set to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListReleases` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter releases to be returned. See https://google.aip.dev/160
     *   for more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.deploy.v1.Release|Release} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listReleasesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listReleasesStream(request?: protos.google.cloud.deploy.v1.IListReleasesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listReleases`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The `DeliveryPipeline` which owns this collection of `Release`
     *   objects.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `Release` objects to return. The service
     *   may return fewer than this value. If unspecified, at most 50 `Release`
     *   objects will be returned. The maximum value is 1000; values above 1000 will
     *   be set to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListReleases` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter releases to be returned. See https://google.aip.dev/160
     *   for more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.deploy.v1.Release|Release}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.list_releases.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_ListReleases_async
     */
    listReleasesAsync(request?: protos.google.cloud.deploy.v1.IListReleasesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.deploy.v1.IRelease>;
    /**
     * Lists Rollouts in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The `Release` which owns this collection of `Rollout` objects.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `Rollout` objects to return. The service
     *   may return fewer than this value. If unspecified, at most 50 `Rollout`
     *   objects will be returned. The maximum value is 1000; values above 1000 will
     *   be set to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListRollouts` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter rollouts to be returned. See https://google.aip.dev/160
     *   for more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.deploy.v1.Rollout|Rollout}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listRolloutsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listRollouts(request?: protos.google.cloud.deploy.v1.IListRolloutsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.IRollout[],
        protos.google.cloud.deploy.v1.IListRolloutsRequest | null,
        protos.google.cloud.deploy.v1.IListRolloutsResponse
    ]>;
    listRollouts(request: protos.google.cloud.deploy.v1.IListRolloutsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.deploy.v1.IListRolloutsRequest, protos.google.cloud.deploy.v1.IListRolloutsResponse | null | undefined, protos.google.cloud.deploy.v1.IRollout>): void;
    listRollouts(request: protos.google.cloud.deploy.v1.IListRolloutsRequest, callback: PaginationCallback<protos.google.cloud.deploy.v1.IListRolloutsRequest, protos.google.cloud.deploy.v1.IListRolloutsResponse | null | undefined, protos.google.cloud.deploy.v1.IRollout>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The `Release` which owns this collection of `Rollout` objects.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `Rollout` objects to return. The service
     *   may return fewer than this value. If unspecified, at most 50 `Rollout`
     *   objects will be returned. The maximum value is 1000; values above 1000 will
     *   be set to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListRollouts` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter rollouts to be returned. See https://google.aip.dev/160
     *   for more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.deploy.v1.Rollout|Rollout} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listRolloutsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listRolloutsStream(request?: protos.google.cloud.deploy.v1.IListRolloutsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listRollouts`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The `Release` which owns this collection of `Rollout` objects.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `Rollout` objects to return. The service
     *   may return fewer than this value. If unspecified, at most 50 `Rollout`
     *   objects will be returned. The maximum value is 1000; values above 1000 will
     *   be set to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListRollouts` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match
     *   the call that provided the page token.
     * @param {string} [request.filter]
     *   Optional. Filter rollouts to be returned. See https://google.aip.dev/160
     *   for more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.deploy.v1.Rollout|Rollout}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.list_rollouts.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_ListRollouts_async
     */
    listRolloutsAsync(request?: protos.google.cloud.deploy.v1.IListRolloutsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.deploy.v1.IRollout>;
    /**
     * Lists JobRuns in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The `Rollout` which owns this collection of `JobRun` objects.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `JobRun` objects to return. The service may
     *   return fewer than this value. If unspecified, at most 50 `JobRun` objects
     *   will be returned. The maximum value is 1000; values above 1000 will be set
     *   to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListJobRuns` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match the call that provided
     *   the page token.
     * @param {string} [request.filter]
     *   Optional. Filter results to be returned. See https://google.aip.dev/160 for
     *   more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.deploy.v1.JobRun|JobRun}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listJobRunsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listJobRuns(request?: protos.google.cloud.deploy.v1.IListJobRunsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.deploy.v1.IJobRun[],
        protos.google.cloud.deploy.v1.IListJobRunsRequest | null,
        protos.google.cloud.deploy.v1.IListJobRunsResponse
    ]>;
    listJobRuns(request: protos.google.cloud.deploy.v1.IListJobRunsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.deploy.v1.IListJobRunsRequest, protos.google.cloud.deploy.v1.IListJobRunsResponse | null | undefined, protos.google.cloud.deploy.v1.IJobRun>): void;
    listJobRuns(request: protos.google.cloud.deploy.v1.IListJobRunsRequest, callback: PaginationCallback<protos.google.cloud.deploy.v1.IListJobRunsRequest, protos.google.cloud.deploy.v1.IListJobRunsResponse | null | undefined, protos.google.cloud.deploy.v1.IJobRun>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The `Rollout` which owns this collection of `JobRun` objects.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `JobRun` objects to return. The service may
     *   return fewer than this value. If unspecified, at most 50 `JobRun` objects
     *   will be returned. The maximum value is 1000; values above 1000 will be set
     *   to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListJobRuns` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match the call that provided
     *   the page token.
     * @param {string} [request.filter]
     *   Optional. Filter results to be returned. See https://google.aip.dev/160 for
     *   more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.deploy.v1.JobRun|JobRun} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listJobRunsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listJobRunsStream(request?: protos.google.cloud.deploy.v1.IListJobRunsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listJobRuns`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The `Rollout` which owns this collection of `JobRun` objects.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of `JobRun` objects to return. The service may
     *   return fewer than this value. If unspecified, at most 50 `JobRun` objects
     *   will be returned. The maximum value is 1000; values above 1000 will be set
     *   to 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListJobRuns` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters match the call that provided
     *   the page token.
     * @param {string} [request.filter]
     *   Optional. Filter results to be returned. See https://google.aip.dev/160 for
     *   more details.
     * @param {string} [request.orderBy]
     *   Optional. Field to sort by. See https://google.aip.dev/132#ordering for
     *   more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.deploy.v1.JobRun|JobRun}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_deploy.list_job_runs.js</caption>
     * region_tag:clouddeploy_v1_generated_CloudDeploy_ListJobRuns_async
     */
    listJobRunsAsync(request?: protos.google.cloud.deploy.v1.IListJobRunsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.deploy.v1.IJobRun>;
    /**
     * Gets the access control policy for a resource. Returns an empty policy
     * if the resource exists and does not have a policy set.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {Object} [request.options]
     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
     *   `GetIamPolicy`. This field is only used by Cloud IAM.
     *
     *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    getIamPolicy(request: IamProtos.google.iam.v1.GetIamPolicyRequest, options?: gax.CallOptions | Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined, {} | null | undefined>, callback?: Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined, {} | null | undefined>): Promise<[IamProtos.google.iam.v1.Policy]>;
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    setIamPolicy(request: IamProtos.google.iam.v1.SetIamPolicyRequest, options?: gax.CallOptions | Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined, {} | null | undefined>, callback?: Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined, {} | null | undefined>): Promise<[IamProtos.google.iam.v1.Policy]>;
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     */
    testIamPermissions(request: IamProtos.google.iam.v1.TestIamPermissionsRequest, options?: gax.CallOptions | Callback<IamProtos.google.iam.v1.TestIamPermissionsResponse, IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined, {} | null | undefined>, callback?: Callback<IamProtos.google.iam.v1.TestIamPermissionsResponse, IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined, {} | null | undefined>): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified build resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} build
     * @returns {string} Resource name string.
     */
    buildPath(project: string, location: string, build: string): string;
    /**
     * Parse the project from Build resource.
     *
     * @param {string} buildName
     *   A fully-qualified path representing Build resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBuildName(buildName: string): string | number;
    /**
     * Parse the location from Build resource.
     *
     * @param {string} buildName
     *   A fully-qualified path representing Build resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromBuildName(buildName: string): string | number;
    /**
     * Parse the build from Build resource.
     *
     * @param {string} buildName
     *   A fully-qualified path representing Build resource.
     * @returns {string} A string representing the build.
     */
    matchBuildFromBuildName(buildName: string): string | number;
    /**
     * Return a fully-qualified cluster resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} cluster
     * @returns {string} Resource name string.
     */
    clusterPath(project: string, location: string, cluster: string): string;
    /**
     * Parse the project from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromClusterName(clusterName: string): string | number;
    /**
     * Parse the location from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromClusterName(clusterName: string): string | number;
    /**
     * Parse the cluster from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromClusterName(clusterName: string): string | number;
    /**
     * Return a fully-qualified config resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    configPath(project: string, location: string): string;
    /**
     * Parse the project from Config resource.
     *
     * @param {string} configName
     *   A fully-qualified path representing Config resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromConfigName(configName: string): string | number;
    /**
     * Parse the location from Config resource.
     *
     * @param {string} configName
     *   A fully-qualified path representing Config resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromConfigName(configName: string): string | number;
    /**
     * Return a fully-qualified deliveryPipeline resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} delivery_pipeline
     * @returns {string} Resource name string.
     */
    deliveryPipelinePath(project: string, location: string, deliveryPipeline: string): string;
    /**
     * Parse the project from DeliveryPipeline resource.
     *
     * @param {string} deliveryPipelineName
     *   A fully-qualified path representing DeliveryPipeline resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDeliveryPipelineName(deliveryPipelineName: string): string | number;
    /**
     * Parse the location from DeliveryPipeline resource.
     *
     * @param {string} deliveryPipelineName
     *   A fully-qualified path representing DeliveryPipeline resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDeliveryPipelineName(deliveryPipelineName: string): string | number;
    /**
     * Parse the delivery_pipeline from DeliveryPipeline resource.
     *
     * @param {string} deliveryPipelineName
     *   A fully-qualified path representing DeliveryPipeline resource.
     * @returns {string} A string representing the delivery_pipeline.
     */
    matchDeliveryPipelineFromDeliveryPipelineName(deliveryPipelineName: string): string | number;
    /**
     * Return a fully-qualified jobRun resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} delivery_pipeline
     * @param {string} release
     * @param {string} rollout
     * @param {string} job_run
     * @returns {string} Resource name string.
     */
    jobRunPath(project: string, location: string, deliveryPipeline: string, release: string, rollout: string, jobRun: string): string;
    /**
     * Parse the project from JobRun resource.
     *
     * @param {string} jobRunName
     *   A fully-qualified path representing JobRun resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromJobRunName(jobRunName: string): string | number;
    /**
     * Parse the location from JobRun resource.
     *
     * @param {string} jobRunName
     *   A fully-qualified path representing JobRun resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromJobRunName(jobRunName: string): string | number;
    /**
     * Parse the delivery_pipeline from JobRun resource.
     *
     * @param {string} jobRunName
     *   A fully-qualified path representing JobRun resource.
     * @returns {string} A string representing the delivery_pipeline.
     */
    matchDeliveryPipelineFromJobRunName(jobRunName: string): string | number;
    /**
     * Parse the release from JobRun resource.
     *
     * @param {string} jobRunName
     *   A fully-qualified path representing JobRun resource.
     * @returns {string} A string representing the release.
     */
    matchReleaseFromJobRunName(jobRunName: string): string | number;
    /**
     * Parse the rollout from JobRun resource.
     *
     * @param {string} jobRunName
     *   A fully-qualified path representing JobRun resource.
     * @returns {string} A string representing the rollout.
     */
    matchRolloutFromJobRunName(jobRunName: string): string | number;
    /**
     * Parse the job_run from JobRun resource.
     *
     * @param {string} jobRunName
     *   A fully-qualified path representing JobRun resource.
     * @returns {string} A string representing the job_run.
     */
    matchJobRunFromJobRunName(jobRunName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified membership resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} membership
     * @returns {string} Resource name string.
     */
    membershipPath(project: string, location: string, membership: string): string;
    /**
     * Parse the project from Membership resource.
     *
     * @param {string} membershipName
     *   A fully-qualified path representing Membership resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromMembershipName(membershipName: string): string | number;
    /**
     * Parse the location from Membership resource.
     *
     * @param {string} membershipName
     *   A fully-qualified path representing Membership resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromMembershipName(membershipName: string): string | number;
    /**
     * Parse the membership from Membership resource.
     *
     * @param {string} membershipName
     *   A fully-qualified path representing Membership resource.
     * @returns {string} A string representing the membership.
     */
    matchMembershipFromMembershipName(membershipName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified release resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} delivery_pipeline
     * @param {string} release
     * @returns {string} Resource name string.
     */
    releasePath(project: string, location: string, deliveryPipeline: string, release: string): string;
    /**
     * Parse the project from Release resource.
     *
     * @param {string} releaseName
     *   A fully-qualified path representing Release resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromReleaseName(releaseName: string): string | number;
    /**
     * Parse the location from Release resource.
     *
     * @param {string} releaseName
     *   A fully-qualified path representing Release resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromReleaseName(releaseName: string): string | number;
    /**
     * Parse the delivery_pipeline from Release resource.
     *
     * @param {string} releaseName
     *   A fully-qualified path representing Release resource.
     * @returns {string} A string representing the delivery_pipeline.
     */
    matchDeliveryPipelineFromReleaseName(releaseName: string): string | number;
    /**
     * Parse the release from Release resource.
     *
     * @param {string} releaseName
     *   A fully-qualified path representing Release resource.
     * @returns {string} A string representing the release.
     */
    matchReleaseFromReleaseName(releaseName: string): string | number;
    /**
     * Return a fully-qualified rollout resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} delivery_pipeline
     * @param {string} release
     * @param {string} rollout
     * @returns {string} Resource name string.
     */
    rolloutPath(project: string, location: string, deliveryPipeline: string, release: string, rollout: string): string;
    /**
     * Parse the project from Rollout resource.
     *
     * @param {string} rolloutName
     *   A fully-qualified path representing Rollout resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromRolloutName(rolloutName: string): string | number;
    /**
     * Parse the location from Rollout resource.
     *
     * @param {string} rolloutName
     *   A fully-qualified path representing Rollout resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromRolloutName(rolloutName: string): string | number;
    /**
     * Parse the delivery_pipeline from Rollout resource.
     *
     * @param {string} rolloutName
     *   A fully-qualified path representing Rollout resource.
     * @returns {string} A string representing the delivery_pipeline.
     */
    matchDeliveryPipelineFromRolloutName(rolloutName: string): string | number;
    /**
     * Parse the release from Rollout resource.
     *
     * @param {string} rolloutName
     *   A fully-qualified path representing Rollout resource.
     * @returns {string} A string representing the release.
     */
    matchReleaseFromRolloutName(rolloutName: string): string | number;
    /**
     * Parse the rollout from Rollout resource.
     *
     * @param {string} rolloutName
     *   A fully-qualified path representing Rollout resource.
     * @returns {string} A string representing the rollout.
     */
    matchRolloutFromRolloutName(rolloutName: string): string | number;
    /**
     * Return a fully-qualified service resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} service
     * @returns {string} Resource name string.
     */
    servicePath(project: string, location: string, service: string): string;
    /**
     * Parse the project from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromServiceName(serviceName: string): string | number;
    /**
     * Parse the location from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromServiceName(serviceName: string): string | number;
    /**
     * Parse the service from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromServiceName(serviceName: string): string | number;
    /**
     * Return a fully-qualified target resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} target
     * @returns {string} Resource name string.
     */
    targetPath(project: string, location: string, target: string): string;
    /**
     * Parse the project from Target resource.
     *
     * @param {string} targetName
     *   A fully-qualified path representing Target resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTargetName(targetName: string): string | number;
    /**
     * Parse the location from Target resource.
     *
     * @param {string} targetName
     *   A fully-qualified path representing Target resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTargetName(targetName: string): string | number;
    /**
     * Parse the target from Target resource.
     *
     * @param {string} targetName
     *   A fully-qualified path representing Target resource.
     * @returns {string} A string representing the target.
     */
    matchTargetFromTargetName(targetName: string): string | number;
    /**
     * Return a fully-qualified workerPool resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} worker_pool
     * @returns {string} Resource name string.
     */
    workerPoolPath(project: string, location: string, workerPool: string): string;
    /**
     * Parse the project from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWorkerPoolName(workerPoolName: string): string | number;
    /**
     * Parse the location from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWorkerPoolName(workerPoolName: string): string | number;
    /**
     * Parse the worker_pool from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the worker_pool.
     */
    matchWorkerPoolFromWorkerPoolName(workerPoolName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
