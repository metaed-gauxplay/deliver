"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudBuildClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/cloud_build_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./cloud_build_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Creates and manages builds on Google Cloud Platform.
 *
 *  The main concept used by this API is a `Build`, which describes the location
 *  of the source to build, how to build the source, and where to store the
 *  built artifacts, if any.
 *
 *  A user can list previously-requested builds or get builds by their ID to
 *  determine the status of the build.
 * @class
 * @memberof v1
 */
class CloudBuildClient {
    /**
     * Construct an instance of CloudBuildClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new CloudBuildClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            cryptoKeyPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            networkPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/global/networks/{network}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            projectBuildPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/builds/{build}'),
            projectConfigPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/githubEnterpriseConfigs/{config}'),
            projectLocationBuildPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/builds/{build}'),
            projectLocationConfigPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/githubEnterpriseConfigs/{config}'),
            projectLocationTriggerPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/triggers/{trigger}'),
            projectTriggerPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/triggers/{trigger}'),
            repositoryPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/connections/{connection}/repositories/{repository}'),
            secretVersionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/secrets/{secret}/versions/{version}'),
            serviceAccountPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/serviceAccounts/{service_account}'),
            subscriptionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/subscriptions/{subscription}'),
            topicPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/topics/{topic}'),
            workerPoolPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/workerPools/{worker_pool}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listBuilds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'builds'),
            listBuildTriggers: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'triggers'),
            listWorkerPools: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'workerPools'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.longrunning.Operations.CancelOperation',
                    post: '/v1/{name=operations/**}:cancel',
                    body: '*',
                    additional_bindings: [
                        {
                            post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
                            body: '*',
                        },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v1/{name=operations/**}',
                    additional_bindings: [
                        { get: '/v1/{name=projects/*/locations/*/operations/*}' },
                    ],
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const createBuildResponse = protoFilesRoot.lookup('.google.devtools.cloudbuild.v1.Build');
        const createBuildMetadata = protoFilesRoot.lookup('.google.devtools.cloudbuild.v1.BuildOperationMetadata');
        const retryBuildResponse = protoFilesRoot.lookup('.google.devtools.cloudbuild.v1.Build');
        const retryBuildMetadata = protoFilesRoot.lookup('.google.devtools.cloudbuild.v1.BuildOperationMetadata');
        const approveBuildResponse = protoFilesRoot.lookup('.google.devtools.cloudbuild.v1.Build');
        const approveBuildMetadata = protoFilesRoot.lookup('.google.devtools.cloudbuild.v1.BuildOperationMetadata');
        const runBuildTriggerResponse = protoFilesRoot.lookup('.google.devtools.cloudbuild.v1.Build');
        const runBuildTriggerMetadata = protoFilesRoot.lookup('.google.devtools.cloudbuild.v1.BuildOperationMetadata');
        const createWorkerPoolResponse = protoFilesRoot.lookup('.google.devtools.cloudbuild.v1.WorkerPool');
        const createWorkerPoolMetadata = protoFilesRoot.lookup('.google.devtools.cloudbuild.v1.CreateWorkerPoolOperationMetadata');
        const deleteWorkerPoolResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteWorkerPoolMetadata = protoFilesRoot.lookup('.google.devtools.cloudbuild.v1.DeleteWorkerPoolOperationMetadata');
        const updateWorkerPoolResponse = protoFilesRoot.lookup('.google.devtools.cloudbuild.v1.WorkerPool');
        const updateWorkerPoolMetadata = protoFilesRoot.lookup('.google.devtools.cloudbuild.v1.UpdateWorkerPoolOperationMetadata');
        this.descriptors.longrunning = {
            createBuild: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createBuildResponse.decode.bind(createBuildResponse), createBuildMetadata.decode.bind(createBuildMetadata)),
            retryBuild: new this._gaxModule.LongrunningDescriptor(this.operationsClient, retryBuildResponse.decode.bind(retryBuildResponse), retryBuildMetadata.decode.bind(retryBuildMetadata)),
            approveBuild: new this._gaxModule.LongrunningDescriptor(this.operationsClient, approveBuildResponse.decode.bind(approveBuildResponse), approveBuildMetadata.decode.bind(approveBuildMetadata)),
            runBuildTrigger: new this._gaxModule.LongrunningDescriptor(this.operationsClient, runBuildTriggerResponse.decode.bind(runBuildTriggerResponse), runBuildTriggerMetadata.decode.bind(runBuildTriggerMetadata)),
            createWorkerPool: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createWorkerPoolResponse.decode.bind(createWorkerPoolResponse), createWorkerPoolMetadata.decode.bind(createWorkerPoolMetadata)),
            deleteWorkerPool: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteWorkerPoolResponse.decode.bind(deleteWorkerPoolResponse), deleteWorkerPoolMetadata.decode.bind(deleteWorkerPoolMetadata)),
            updateWorkerPool: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateWorkerPoolResponse.decode.bind(updateWorkerPoolResponse), updateWorkerPoolMetadata.decode.bind(updateWorkerPoolMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.devtools.cloudbuild.v1.CloudBuild', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.cloudBuildStub) {
            return this.cloudBuildStub;
        }
        // Put together the "service stub" for
        // google.devtools.cloudbuild.v1.CloudBuild.
        this.cloudBuildStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.devtools.cloudbuild.v1.CloudBuild')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.devtools.cloudbuild.v1.CloudBuild, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const cloudBuildStubMethods = [
            'createBuild',
            'getBuild',
            'listBuilds',
            'cancelBuild',
            'retryBuild',
            'approveBuild',
            'createBuildTrigger',
            'getBuildTrigger',
            'listBuildTriggers',
            'deleteBuildTrigger',
            'updateBuildTrigger',
            'runBuildTrigger',
            'receiveTriggerWebhook',
            'createWorkerPool',
            'getWorkerPool',
            'deleteWorkerPool',
            'updateWorkerPool',
            'listWorkerPools',
        ];
        for (const methodName of cloudBuildStubMethods) {
            const callPromise = this.cloudBuildStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.cloudBuildStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'cloudbuild.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'cloudbuild.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    getBuild(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.name;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/builds/[^/]+'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.getBuild(request, options, callback);
    }
    cancelBuild(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.name;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/builds/[^/]+'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.cancelBuild(request, options, callback);
    }
    createBuildTrigger(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.parent;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.createBuildTrigger(request, options, callback);
    }
    getBuildTrigger(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.name;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/triggers/[^/]+'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.getBuildTrigger(request, options, callback);
    }
    deleteBuildTrigger(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.name;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/triggers/[^/]+'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.deleteBuildTrigger(request, options, callback);
    }
    updateBuildTrigger(request, optionsOrCallback, callback) {
        var _a, _b, _c;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = (_a = request.trigger) === null || _a === void 0 ? void 0 : _a.resourceName;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/triggers/[^/]+'));
                if (match) {
                    const parameterValue = (_c = (_b = match.groups) === null || _b === void 0 ? void 0 : _b['location']) !== null && _c !== void 0 ? _c : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.updateBuildTrigger(request, options, callback);
    }
    receiveTriggerWebhook(request, optionsOrCallback, callback) {
        var _a, _b, _c;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project_id: (_a = request.projectId) !== null && _a !== void 0 ? _a : '',
                trigger: (_b = request.trigger) !== null && _b !== void 0 ? _b : '',
                name: (_c = request.name) !== null && _c !== void 0 ? _c : '',
            });
        this.initialize();
        return this.innerApiCalls.receiveTriggerWebhook(request, options, callback);
    }
    getWorkerPool(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.name;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/workerPools/[^/]+'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.getWorkerPool(request, options, callback);
    }
    createBuild(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.parent;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.createBuild(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createBuild()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_build.create_build.js</caption>
     * region_tag:cloudbuild_v1_generated_CloudBuild_CreateBuild_async
     */
    async checkCreateBuildProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createBuild, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    retryBuild(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.name;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/builds/[^/]+'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.retryBuild(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `retryBuild()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_build.retry_build.js</caption>
     * region_tag:cloudbuild_v1_generated_CloudBuild_RetryBuild_async
     */
    async checkRetryBuildProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.retryBuild, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    approveBuild(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.name;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/builds/[^/]+'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.approveBuild(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `approveBuild()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_build.approve_build.js</caption>
     * region_tag:cloudbuild_v1_generated_CloudBuild_ApproveBuild_async
     */
    async checkApproveBuildProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.approveBuild, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    runBuildTrigger(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.name;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/triggers/[^/]+'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.runBuildTrigger(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `runBuildTrigger()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_build.run_build_trigger.js</caption>
     * region_tag:cloudbuild_v1_generated_CloudBuild_RunBuildTrigger_async
     */
    async checkRunBuildTriggerProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.runBuildTrigger, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createWorkerPool(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.parent;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.createWorkerPool(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createWorkerPool()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_build.create_worker_pool.js</caption>
     * region_tag:cloudbuild_v1_generated_CloudBuild_CreateWorkerPool_async
     */
    async checkCreateWorkerPoolProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createWorkerPool, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteWorkerPool(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.name;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/workerPools/[^/]+'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.deleteWorkerPool(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteWorkerPool()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_build.delete_worker_pool.js</caption>
     * region_tag:cloudbuild_v1_generated_CloudBuild_DeleteWorkerPool_async
     */
    async checkDeleteWorkerPoolProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteWorkerPool, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateWorkerPool(request, optionsOrCallback, callback) {
        var _a, _b, _c;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = (_a = request.workerPool) === null || _a === void 0 ? void 0 : _a.name;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)/workerPools/[^/]+'));
                if (match) {
                    const parameterValue = (_c = (_b = match.groups) === null || _b === void 0 ? void 0 : _b['location']) !== null && _c !== void 0 ? _c : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.updateWorkerPool(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateWorkerPool()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_build.update_worker_pool.js</caption>
     * region_tag:cloudbuild_v1_generated_CloudBuild_UpdateWorkerPool_async
     */
    async checkUpdateWorkerPoolProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateWorkerPool, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listBuilds(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.parent;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.listBuilds(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The parent of the collection of `Builds`.
     *   Format: `projects/{project}/locations/{location}`
     * @param {string} request.projectId
     *   Required. ID of the project.
     * @param {number} request.pageSize
     *   Number of results to return in the list.
     * @param {string} request.pageToken
     *   The page token for the next page of Builds.
     *
     *   If unspecified, the first page of results is returned.
     *
     *   If the token is rejected for any reason, INVALID_ARGUMENT will be thrown.
     *   In this case, the token should be discarded, and pagination should be
     *   restarted from the first page of results.
     *
     *   See https://google.aip.dev/158 for more.
     * @param {string} request.filter
     *   The raw filter text to constrain the results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.devtools.cloudbuild.v1.Build|Build} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listBuildsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listBuildsStream(request, options) {
        var _a, _b;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.parent;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        const defaultCallSettings = this._defaults['listBuilds'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listBuilds.createStream(this.innerApiCalls.listBuilds, request, callSettings);
    }
    /**
     * Equivalent to `listBuilds`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The parent of the collection of `Builds`.
     *   Format: `projects/{project}/locations/{location}`
     * @param {string} request.projectId
     *   Required. ID of the project.
     * @param {number} request.pageSize
     *   Number of results to return in the list.
     * @param {string} request.pageToken
     *   The page token for the next page of Builds.
     *
     *   If unspecified, the first page of results is returned.
     *
     *   If the token is rejected for any reason, INVALID_ARGUMENT will be thrown.
     *   In this case, the token should be discarded, and pagination should be
     *   restarted from the first page of results.
     *
     *   See https://google.aip.dev/158 for more.
     * @param {string} request.filter
     *   The raw filter text to constrain the results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.devtools.cloudbuild.v1.Build|Build}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_build.list_builds.js</caption>
     * region_tag:cloudbuild_v1_generated_CloudBuild_ListBuilds_async
     */
    listBuildsAsync(request, options) {
        var _a, _b;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.parent;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        const defaultCallSettings = this._defaults['listBuilds'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listBuilds.asyncIterate(this.innerApiCalls['listBuilds'], request, callSettings);
    }
    listBuildTriggers(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.parent;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.listBuildTriggers(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The parent of the collection of `Triggers`.
     *   Format: `projects/{project}/locations/{location}`
     * @param {string} request.projectId
     *   Required. ID of the project for which to list BuildTriggers.
     * @param {number} request.pageSize
     *   Number of results to return in the list.
     * @param {string} request.pageToken
     *   Token to provide to skip to a particular spot in the list.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.devtools.cloudbuild.v1.BuildTrigger|BuildTrigger} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listBuildTriggersAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listBuildTriggersStream(request, options) {
        var _a, _b;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.parent;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        const defaultCallSettings = this._defaults['listBuildTriggers'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listBuildTriggers.createStream(this.innerApiCalls.listBuildTriggers, request, callSettings);
    }
    /**
     * Equivalent to `listBuildTriggers`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The parent of the collection of `Triggers`.
     *   Format: `projects/{project}/locations/{location}`
     * @param {string} request.projectId
     *   Required. ID of the project for which to list BuildTriggers.
     * @param {number} request.pageSize
     *   Number of results to return in the list.
     * @param {string} request.pageToken
     *   Token to provide to skip to a particular spot in the list.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.devtools.cloudbuild.v1.BuildTrigger|BuildTrigger}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_build.list_build_triggers.js</caption>
     * region_tag:cloudbuild_v1_generated_CloudBuild_ListBuildTriggers_async
     */
    listBuildTriggersAsync(request, options) {
        var _a, _b;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.parent;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        const defaultCallSettings = this._defaults['listBuildTriggers'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listBuildTriggers.asyncIterate(this.innerApiCalls['listBuildTriggers'], request, callSettings);
    }
    listWorkerPools(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.parent;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.listWorkerPools(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent of the collection of `WorkerPools`.
     *   Format: `projects/{project}/locations/{location}`.
     * @param {number} request.pageSize
     *   The maximum number of `WorkerPool`s to return. The service may return
     *   fewer than this value. If omitted, the server will use a sensible default.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListWorkerPools` call. Provide this
     *   to retrieve the subsequent page.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.devtools.cloudbuild.v1.WorkerPool|WorkerPool} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listWorkerPoolsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listWorkerPoolsStream(request, options) {
        var _a, _b;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.parent;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        const defaultCallSettings = this._defaults['listWorkerPools'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listWorkerPools.createStream(this.innerApiCalls.listWorkerPools, request, callSettings);
    }
    /**
     * Equivalent to `listWorkerPools`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent of the collection of `WorkerPools`.
     *   Format: `projects/{project}/locations/{location}`.
     * @param {number} request.pageSize
     *   The maximum number of `WorkerPool`s to return. The service may return
     *   fewer than this value. If omitted, the server will use a sensible default.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListWorkerPools` call. Provide this
     *   to retrieve the subsequent page.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.devtools.cloudbuild.v1.WorkerPool|WorkerPool}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_build.list_worker_pools.js</caption>
     * region_tag:cloudbuild_v1_generated_CloudBuild_ListWorkerPools_async
     */
    listWorkerPoolsAsync(request, options) {
        var _a, _b;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.parent;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue
                    .toString()
                    .match(RegExp('projects/[^/]+/locations/(?<location>[^/]+)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['location']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { location: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        const defaultCallSettings = this._defaults['listWorkerPools'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listWorkerPools.asyncIterate(this.innerApiCalls['listWorkerPools'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified cryptoKey resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} keyring
     * @param {string} key
     * @returns {string} Resource name string.
     */
    cryptoKeyPath(project, location, keyring, key) {
        return this.pathTemplates.cryptoKeyPathTemplate.render({
            project: project,
            location: location,
            keyring: keyring,
            key: key,
        });
    }
    /**
     * Parse the project from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCryptoKeyName(cryptoKeyName) {
        return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName)
            .project;
    }
    /**
     * Parse the location from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCryptoKeyName(cryptoKeyName) {
        return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName)
            .location;
    }
    /**
     * Parse the keyring from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the keyring.
     */
    matchKeyringFromCryptoKeyName(cryptoKeyName) {
        return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName)
            .keyring;
    }
    /**
     * Parse the key from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the key.
     */
    matchKeyFromCryptoKeyName(cryptoKeyName) {
        return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).key;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified network resource name string.
     *
     * @param {string} project
     * @param {string} network
     * @returns {string} Resource name string.
     */
    networkPath(project, network) {
        return this.pathTemplates.networkPathTemplate.render({
            project: project,
            network: network,
        });
    }
    /**
     * Parse the project from Network resource.
     *
     * @param {string} networkName
     *   A fully-qualified path representing Network resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromNetworkName(networkName) {
        return this.pathTemplates.networkPathTemplate.match(networkName).project;
    }
    /**
     * Parse the network from Network resource.
     *
     * @param {string} networkName
     *   A fully-qualified path representing Network resource.
     * @returns {string} A string representing the network.
     */
    matchNetworkFromNetworkName(networkName) {
        return this.pathTemplates.networkPathTemplate.match(networkName).network;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified projectBuild resource name string.
     *
     * @param {string} project
     * @param {string} build
     * @returns {string} Resource name string.
     */
    projectBuildPath(project, build) {
        return this.pathTemplates.projectBuildPathTemplate.render({
            project: project,
            build: build,
        });
    }
    /**
     * Parse the project from ProjectBuild resource.
     *
     * @param {string} projectBuildName
     *   A fully-qualified path representing project_build resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectBuildName(projectBuildName) {
        return this.pathTemplates.projectBuildPathTemplate.match(projectBuildName)
            .project;
    }
    /**
     * Parse the build from ProjectBuild resource.
     *
     * @param {string} projectBuildName
     *   A fully-qualified path representing project_build resource.
     * @returns {string} A string representing the build.
     */
    matchBuildFromProjectBuildName(projectBuildName) {
        return this.pathTemplates.projectBuildPathTemplate.match(projectBuildName)
            .build;
    }
    /**
     * Return a fully-qualified projectConfig resource name string.
     *
     * @param {string} project
     * @param {string} config
     * @returns {string} Resource name string.
     */
    projectConfigPath(project, config) {
        return this.pathTemplates.projectConfigPathTemplate.render({
            project: project,
            config: config,
        });
    }
    /**
     * Parse the project from ProjectConfig resource.
     *
     * @param {string} projectConfigName
     *   A fully-qualified path representing project_config resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectConfigName(projectConfigName) {
        return this.pathTemplates.projectConfigPathTemplate.match(projectConfigName)
            .project;
    }
    /**
     * Parse the config from ProjectConfig resource.
     *
     * @param {string} projectConfigName
     *   A fully-qualified path representing project_config resource.
     * @returns {string} A string representing the config.
     */
    matchConfigFromProjectConfigName(projectConfigName) {
        return this.pathTemplates.projectConfigPathTemplate.match(projectConfigName)
            .config;
    }
    /**
     * Return a fully-qualified projectLocationBuild resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} build
     * @returns {string} Resource name string.
     */
    projectLocationBuildPath(project, location, build) {
        return this.pathTemplates.projectLocationBuildPathTemplate.render({
            project: project,
            location: location,
            build: build,
        });
    }
    /**
     * Parse the project from ProjectLocationBuild resource.
     *
     * @param {string} projectLocationBuildName
     *   A fully-qualified path representing project_location_build resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationBuildName(projectLocationBuildName) {
        return this.pathTemplates.projectLocationBuildPathTemplate.match(projectLocationBuildName).project;
    }
    /**
     * Parse the location from ProjectLocationBuild resource.
     *
     * @param {string} projectLocationBuildName
     *   A fully-qualified path representing project_location_build resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationBuildName(projectLocationBuildName) {
        return this.pathTemplates.projectLocationBuildPathTemplate.match(projectLocationBuildName).location;
    }
    /**
     * Parse the build from ProjectLocationBuild resource.
     *
     * @param {string} projectLocationBuildName
     *   A fully-qualified path representing project_location_build resource.
     * @returns {string} A string representing the build.
     */
    matchBuildFromProjectLocationBuildName(projectLocationBuildName) {
        return this.pathTemplates.projectLocationBuildPathTemplate.match(projectLocationBuildName).build;
    }
    /**
     * Return a fully-qualified projectLocationConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} config
     * @returns {string} Resource name string.
     */
    projectLocationConfigPath(project, location, config) {
        return this.pathTemplates.projectLocationConfigPathTemplate.render({
            project: project,
            location: location,
            config: config,
        });
    }
    /**
     * Parse the project from ProjectLocationConfig resource.
     *
     * @param {string} projectLocationConfigName
     *   A fully-qualified path representing project_location_config resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationConfigName(projectLocationConfigName) {
        return this.pathTemplates.projectLocationConfigPathTemplate.match(projectLocationConfigName).project;
    }
    /**
     * Parse the location from ProjectLocationConfig resource.
     *
     * @param {string} projectLocationConfigName
     *   A fully-qualified path representing project_location_config resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationConfigName(projectLocationConfigName) {
        return this.pathTemplates.projectLocationConfigPathTemplate.match(projectLocationConfigName).location;
    }
    /**
     * Parse the config from ProjectLocationConfig resource.
     *
     * @param {string} projectLocationConfigName
     *   A fully-qualified path representing project_location_config resource.
     * @returns {string} A string representing the config.
     */
    matchConfigFromProjectLocationConfigName(projectLocationConfigName) {
        return this.pathTemplates.projectLocationConfigPathTemplate.match(projectLocationConfigName).config;
    }
    /**
     * Return a fully-qualified projectLocationTrigger resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} trigger
     * @returns {string} Resource name string.
     */
    projectLocationTriggerPath(project, location, trigger) {
        return this.pathTemplates.projectLocationTriggerPathTemplate.render({
            project: project,
            location: location,
            trigger: trigger,
        });
    }
    /**
     * Parse the project from ProjectLocationTrigger resource.
     *
     * @param {string} projectLocationTriggerName
     *   A fully-qualified path representing project_location_trigger resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationTriggerName(projectLocationTriggerName) {
        return this.pathTemplates.projectLocationTriggerPathTemplate.match(projectLocationTriggerName).project;
    }
    /**
     * Parse the location from ProjectLocationTrigger resource.
     *
     * @param {string} projectLocationTriggerName
     *   A fully-qualified path representing project_location_trigger resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationTriggerName(projectLocationTriggerName) {
        return this.pathTemplates.projectLocationTriggerPathTemplate.match(projectLocationTriggerName).location;
    }
    /**
     * Parse the trigger from ProjectLocationTrigger resource.
     *
     * @param {string} projectLocationTriggerName
     *   A fully-qualified path representing project_location_trigger resource.
     * @returns {string} A string representing the trigger.
     */
    matchTriggerFromProjectLocationTriggerName(projectLocationTriggerName) {
        return this.pathTemplates.projectLocationTriggerPathTemplate.match(projectLocationTriggerName).trigger;
    }
    /**
     * Return a fully-qualified projectTrigger resource name string.
     *
     * @param {string} project
     * @param {string} trigger
     * @returns {string} Resource name string.
     */
    projectTriggerPath(project, trigger) {
        return this.pathTemplates.projectTriggerPathTemplate.render({
            project: project,
            trigger: trigger,
        });
    }
    /**
     * Parse the project from ProjectTrigger resource.
     *
     * @param {string} projectTriggerName
     *   A fully-qualified path representing project_trigger resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectTriggerName(projectTriggerName) {
        return this.pathTemplates.projectTriggerPathTemplate.match(projectTriggerName).project;
    }
    /**
     * Parse the trigger from ProjectTrigger resource.
     *
     * @param {string} projectTriggerName
     *   A fully-qualified path representing project_trigger resource.
     * @returns {string} A string representing the trigger.
     */
    matchTriggerFromProjectTriggerName(projectTriggerName) {
        return this.pathTemplates.projectTriggerPathTemplate.match(projectTriggerName).trigger;
    }
    /**
     * Return a fully-qualified repository resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} connection
     * @param {string} repository
     * @returns {string} Resource name string.
     */
    repositoryPath(project, location, connection, repository) {
        return this.pathTemplates.repositoryPathTemplate.render({
            project: project,
            location: location,
            connection: connection,
            repository: repository,
        });
    }
    /**
     * Parse the project from Repository resource.
     *
     * @param {string} repositoryName
     *   A fully-qualified path representing Repository resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromRepositoryName(repositoryName) {
        return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
            .project;
    }
    /**
     * Parse the location from Repository resource.
     *
     * @param {string} repositoryName
     *   A fully-qualified path representing Repository resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromRepositoryName(repositoryName) {
        return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
            .location;
    }
    /**
     * Parse the connection from Repository resource.
     *
     * @param {string} repositoryName
     *   A fully-qualified path representing Repository resource.
     * @returns {string} A string representing the connection.
     */
    matchConnectionFromRepositoryName(repositoryName) {
        return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
            .connection;
    }
    /**
     * Parse the repository from Repository resource.
     *
     * @param {string} repositoryName
     *   A fully-qualified path representing Repository resource.
     * @returns {string} A string representing the repository.
     */
    matchRepositoryFromRepositoryName(repositoryName) {
        return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
            .repository;
    }
    /**
     * Return a fully-qualified secretVersion resource name string.
     *
     * @param {string} project
     * @param {string} secret
     * @param {string} version
     * @returns {string} Resource name string.
     */
    secretVersionPath(project, secret, version) {
        return this.pathTemplates.secretVersionPathTemplate.render({
            project: project,
            secret: secret,
            version: version,
        });
    }
    /**
     * Parse the project from SecretVersion resource.
     *
     * @param {string} secretVersionName
     *   A fully-qualified path representing SecretVersion resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSecretVersionName(secretVersionName) {
        return this.pathTemplates.secretVersionPathTemplate.match(secretVersionName)
            .project;
    }
    /**
     * Parse the secret from SecretVersion resource.
     *
     * @param {string} secretVersionName
     *   A fully-qualified path representing SecretVersion resource.
     * @returns {string} A string representing the secret.
     */
    matchSecretFromSecretVersionName(secretVersionName) {
        return this.pathTemplates.secretVersionPathTemplate.match(secretVersionName)
            .secret;
    }
    /**
     * Parse the version from SecretVersion resource.
     *
     * @param {string} secretVersionName
     *   A fully-qualified path representing SecretVersion resource.
     * @returns {string} A string representing the version.
     */
    matchVersionFromSecretVersionName(secretVersionName) {
        return this.pathTemplates.secretVersionPathTemplate.match(secretVersionName)
            .version;
    }
    /**
     * Return a fully-qualified serviceAccount resource name string.
     *
     * @param {string} project
     * @param {string} service_account
     * @returns {string} Resource name string.
     */
    serviceAccountPath(project, serviceAccount) {
        return this.pathTemplates.serviceAccountPathTemplate.render({
            project: project,
            service_account: serviceAccount,
        });
    }
    /**
     * Parse the project from ServiceAccount resource.
     *
     * @param {string} serviceAccountName
     *   A fully-qualified path representing ServiceAccount resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromServiceAccountName(serviceAccountName) {
        return this.pathTemplates.serviceAccountPathTemplate.match(serviceAccountName).project;
    }
    /**
     * Parse the service_account from ServiceAccount resource.
     *
     * @param {string} serviceAccountName
     *   A fully-qualified path representing ServiceAccount resource.
     * @returns {string} A string representing the service_account.
     */
    matchServiceAccountFromServiceAccountName(serviceAccountName) {
        return this.pathTemplates.serviceAccountPathTemplate.match(serviceAccountName).service_account;
    }
    /**
     * Return a fully-qualified subscription resource name string.
     *
     * @param {string} project
     * @param {string} subscription
     * @returns {string} Resource name string.
     */
    subscriptionPath(project, subscription) {
        return this.pathTemplates.subscriptionPathTemplate.render({
            project: project,
            subscription: subscription,
        });
    }
    /**
     * Parse the project from Subscription resource.
     *
     * @param {string} subscriptionName
     *   A fully-qualified path representing Subscription resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSubscriptionName(subscriptionName) {
        return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName)
            .project;
    }
    /**
     * Parse the subscription from Subscription resource.
     *
     * @param {string} subscriptionName
     *   A fully-qualified path representing Subscription resource.
     * @returns {string} A string representing the subscription.
     */
    matchSubscriptionFromSubscriptionName(subscriptionName) {
        return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName)
            .subscription;
    }
    /**
     * Return a fully-qualified topic resource name string.
     *
     * @param {string} project
     * @param {string} topic
     * @returns {string} Resource name string.
     */
    topicPath(project, topic) {
        return this.pathTemplates.topicPathTemplate.render({
            project: project,
            topic: topic,
        });
    }
    /**
     * Parse the project from Topic resource.
     *
     * @param {string} topicName
     *   A fully-qualified path representing Topic resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTopicName(topicName) {
        return this.pathTemplates.topicPathTemplate.match(topicName).project;
    }
    /**
     * Parse the topic from Topic resource.
     *
     * @param {string} topicName
     *   A fully-qualified path representing Topic resource.
     * @returns {string} A string representing the topic.
     */
    matchTopicFromTopicName(topicName) {
        return this.pathTemplates.topicPathTemplate.match(topicName).topic;
    }
    /**
     * Return a fully-qualified workerPool resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} worker_pool
     * @returns {string} Resource name string.
     */
    workerPoolPath(project, location, workerPool) {
        return this.pathTemplates.workerPoolPathTemplate.render({
            project: project,
            location: location,
            worker_pool: workerPool,
        });
    }
    /**
     * Parse the project from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWorkerPoolName(workerPoolName) {
        return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName)
            .project;
    }
    /**
     * Parse the location from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWorkerPoolName(workerPoolName) {
        return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName)
            .location;
    }
    /**
     * Parse the worker_pool from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the worker_pool.
     */
    matchWorkerPoolFromWorkerPoolName(workerPoolName) {
        return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName)
            .worker_pool;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.cloudBuildStub && !this._terminated) {
            return this.cloudBuildStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.CloudBuildClient = CloudBuildClient;
//# sourceMappingURL=cloud_build_client.js.map