"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.OsConfigServiceClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/os_config_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./os_config_service_client_config.json");
const version = require('../../../package.json').version;
/**
 *  OS Config API
 *
 *  The OS Config service is a server-side component that you can use to
 *  manage package installations and patch jobs for virtual machine instances.
 * @class
 * @memberof v1
 */
class OsConfigServiceClient {
    /**
     * Construct an instance of OsConfigServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new OsConfigServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            inventoryPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/instances/{instance}/inventory'),
            oSPolicyAssignmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/osPolicyAssignments/{os_policy_assignment}'),
            oSPolicyAssignmentReportPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/instances/{instance}/osPolicyAssignments/{assignment}/report'),
            patchDeploymentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/patchDeployments/{patch_deployment}'),
            patchJobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/patchJobs/{patch_job}'),
            vulnerabilityReportPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/instances/{instance}/vulnerabilityReport'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listPatchJobs: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'patchJobs'),
            listPatchJobInstanceDetails: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'patchJobInstanceDetails'),
            listPatchDeployments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'patchDeployments'),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.osconfig.v1.OsConfigService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.osConfigServiceStub) {
            return this.osConfigServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.osconfig.v1.OsConfigService.
        this.osConfigServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.osconfig.v1.OsConfigService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.osconfig.v1.OsConfigService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const osConfigServiceStubMethods = [
            'executePatchJob',
            'getPatchJob',
            'cancelPatchJob',
            'listPatchJobs',
            'listPatchJobInstanceDetails',
            'createPatchDeployment',
            'getPatchDeployment',
            'listPatchDeployments',
            'deletePatchDeployment',
            'updatePatchDeployment',
            'pausePatchDeployment',
            'resumePatchDeployment',
        ];
        for (const methodName of osConfigServiceStubMethods) {
            const callPromise = this.osConfigServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] || undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.osConfigServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'osconfig.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'osconfig.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    executePatchJob(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.executePatchJob(request, options, callback);
    }
    getPatchJob(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getPatchJob(request, options, callback);
    }
    cancelPatchJob(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.cancelPatchJob(request, options, callback);
    }
    createPatchDeployment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createPatchDeployment(request, options, callback);
    }
    getPatchDeployment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getPatchDeployment(request, options, callback);
    }
    deletePatchDeployment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deletePatchDeployment(request, options, callback);
    }
    updatePatchDeployment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'patch_deployment.name': (_a = request.patchDeployment.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updatePatchDeployment(request, options, callback);
    }
    pausePatchDeployment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.pausePatchDeployment(request, options, callback);
    }
    resumePatchDeployment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.resumePatchDeployment(request, options, callback);
    }
    listPatchJobs(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listPatchJobs(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. In the form of `projects/*`
     * @param {number} request.pageSize
     *   The maximum number of instance status to return.
     * @param {string} request.pageToken
     *   A pagination token returned from a previous call
     *   that indicates where this listing should continue from.
     * @param {string} request.filter
     *   If provided, this field specifies the criteria that must be met by patch
     *   jobs to be included in the response.
     *   Currently, filtering is only available on the patch_deployment field.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.osconfig.v1.PatchJob|PatchJob} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listPatchJobsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listPatchJobsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPatchJobs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPatchJobs.createStream(this.innerApiCalls.listPatchJobs, request, callSettings);
    }
    /**
     * Equivalent to `listPatchJobs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. In the form of `projects/*`
     * @param {number} request.pageSize
     *   The maximum number of instance status to return.
     * @param {string} request.pageToken
     *   A pagination token returned from a previous call
     *   that indicates where this listing should continue from.
     * @param {string} request.filter
     *   If provided, this field specifies the criteria that must be met by patch
     *   jobs to be included in the response.
     *   Currently, filtering is only available on the patch_deployment field.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.osconfig.v1.PatchJob|PatchJob}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/os_config_service.list_patch_jobs.js</caption>
     * region_tag:osconfig_v1_generated_OsConfigService_ListPatchJobs_async
     */
    listPatchJobsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPatchJobs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPatchJobs.asyncIterate(this.innerApiCalls['listPatchJobs'], request, callSettings);
    }
    listPatchJobInstanceDetails(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listPatchJobInstanceDetails(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent for the instances are in the form of
     *   `projects/* /patchJobs/*`.
     * @param {number} request.pageSize
     *   The maximum number of instance details records to return.  Default is 100.
     * @param {string} request.pageToken
     *   A pagination token returned from a previous call
     *   that indicates where this listing should continue from.
     * @param {string} request.filter
     *   A filter expression that filters results listed in the response. This
     *   field supports filtering results by instance zone, name, state, or
     *   `failure_reason`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.osconfig.v1.PatchJobInstanceDetails|PatchJobInstanceDetails} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listPatchJobInstanceDetailsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listPatchJobInstanceDetailsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPatchJobInstanceDetails'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPatchJobInstanceDetails.createStream(this.innerApiCalls.listPatchJobInstanceDetails, request, callSettings);
    }
    /**
     * Equivalent to `listPatchJobInstanceDetails`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent for the instances are in the form of
     *   `projects/* /patchJobs/*`.
     * @param {number} request.pageSize
     *   The maximum number of instance details records to return.  Default is 100.
     * @param {string} request.pageToken
     *   A pagination token returned from a previous call
     *   that indicates where this listing should continue from.
     * @param {string} request.filter
     *   A filter expression that filters results listed in the response. This
     *   field supports filtering results by instance zone, name, state, or
     *   `failure_reason`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.osconfig.v1.PatchJobInstanceDetails|PatchJobInstanceDetails}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/os_config_service.list_patch_job_instance_details.js</caption>
     * region_tag:osconfig_v1_generated_OsConfigService_ListPatchJobInstanceDetails_async
     */
    listPatchJobInstanceDetailsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPatchJobInstanceDetails'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPatchJobInstanceDetails.asyncIterate(this.innerApiCalls['listPatchJobInstanceDetails'], request, callSettings);
    }
    listPatchDeployments(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listPatchDeployments(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent in the form `projects/*`.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of patch deployments to return. Default is
     *   100.
     * @param {string} [request.pageToken]
     *   Optional. A pagination token returned from a previous call to
     *   ListPatchDeployments that indicates where this listing should continue
     *   from.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.osconfig.v1.PatchDeployment|PatchDeployment} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listPatchDeploymentsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listPatchDeploymentsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPatchDeployments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPatchDeployments.createStream(this.innerApiCalls.listPatchDeployments, request, callSettings);
    }
    /**
     * Equivalent to `listPatchDeployments`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the parent in the form `projects/*`.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of patch deployments to return. Default is
     *   100.
     * @param {string} [request.pageToken]
     *   Optional. A pagination token returned from a previous call to
     *   ListPatchDeployments that indicates where this listing should continue
     *   from.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.osconfig.v1.PatchDeployment|PatchDeployment}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/os_config_service.list_patch_deployments.js</caption>
     * region_tag:osconfig_v1_generated_OsConfigService_ListPatchDeployments_async
     */
    listPatchDeploymentsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPatchDeployments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPatchDeployments.asyncIterate(this.innerApiCalls['listPatchDeployments'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified inventory resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} instance
     * @returns {string} Resource name string.
     */
    inventoryPath(project, location, instance) {
        return this.pathTemplates.inventoryPathTemplate.render({
            project: project,
            location: location,
            instance: instance,
        });
    }
    /**
     * Parse the project from Inventory resource.
     *
     * @param {string} inventoryName
     *   A fully-qualified path representing Inventory resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromInventoryName(inventoryName) {
        return this.pathTemplates.inventoryPathTemplate.match(inventoryName)
            .project;
    }
    /**
     * Parse the location from Inventory resource.
     *
     * @param {string} inventoryName
     *   A fully-qualified path representing Inventory resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromInventoryName(inventoryName) {
        return this.pathTemplates.inventoryPathTemplate.match(inventoryName)
            .location;
    }
    /**
     * Parse the instance from Inventory resource.
     *
     * @param {string} inventoryName
     *   A fully-qualified path representing Inventory resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromInventoryName(inventoryName) {
        return this.pathTemplates.inventoryPathTemplate.match(inventoryName)
            .instance;
    }
    /**
     * Return a fully-qualified oSPolicyAssignment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} os_policy_assignment
     * @returns {string} Resource name string.
     */
    oSPolicyAssignmentPath(project, location, osPolicyAssignment) {
        return this.pathTemplates.oSPolicyAssignmentPathTemplate.render({
            project: project,
            location: location,
            os_policy_assignment: osPolicyAssignment,
        });
    }
    /**
     * Parse the project from OSPolicyAssignment resource.
     *
     * @param {string} oSPolicyAssignmentName
     *   A fully-qualified path representing OSPolicyAssignment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromOSPolicyAssignmentName(oSPolicyAssignmentName) {
        return this.pathTemplates.oSPolicyAssignmentPathTemplate.match(oSPolicyAssignmentName).project;
    }
    /**
     * Parse the location from OSPolicyAssignment resource.
     *
     * @param {string} oSPolicyAssignmentName
     *   A fully-qualified path representing OSPolicyAssignment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromOSPolicyAssignmentName(oSPolicyAssignmentName) {
        return this.pathTemplates.oSPolicyAssignmentPathTemplate.match(oSPolicyAssignmentName).location;
    }
    /**
     * Parse the os_policy_assignment from OSPolicyAssignment resource.
     *
     * @param {string} oSPolicyAssignmentName
     *   A fully-qualified path representing OSPolicyAssignment resource.
     * @returns {string} A string representing the os_policy_assignment.
     */
    matchOsPolicyAssignmentFromOSPolicyAssignmentName(oSPolicyAssignmentName) {
        return this.pathTemplates.oSPolicyAssignmentPathTemplate.match(oSPolicyAssignmentName).os_policy_assignment;
    }
    /**
     * Return a fully-qualified oSPolicyAssignmentReport resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} instance
     * @param {string} assignment
     * @returns {string} Resource name string.
     */
    oSPolicyAssignmentReportPath(project, location, instance, assignment) {
        return this.pathTemplates.oSPolicyAssignmentReportPathTemplate.render({
            project: project,
            location: location,
            instance: instance,
            assignment: assignment,
        });
    }
    /**
     * Parse the project from OSPolicyAssignmentReport resource.
     *
     * @param {string} oSPolicyAssignmentReportName
     *   A fully-qualified path representing OSPolicyAssignmentReport resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromOSPolicyAssignmentReportName(oSPolicyAssignmentReportName) {
        return this.pathTemplates.oSPolicyAssignmentReportPathTemplate.match(oSPolicyAssignmentReportName).project;
    }
    /**
     * Parse the location from OSPolicyAssignmentReport resource.
     *
     * @param {string} oSPolicyAssignmentReportName
     *   A fully-qualified path representing OSPolicyAssignmentReport resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromOSPolicyAssignmentReportName(oSPolicyAssignmentReportName) {
        return this.pathTemplates.oSPolicyAssignmentReportPathTemplate.match(oSPolicyAssignmentReportName).location;
    }
    /**
     * Parse the instance from OSPolicyAssignmentReport resource.
     *
     * @param {string} oSPolicyAssignmentReportName
     *   A fully-qualified path representing OSPolicyAssignmentReport resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromOSPolicyAssignmentReportName(oSPolicyAssignmentReportName) {
        return this.pathTemplates.oSPolicyAssignmentReportPathTemplate.match(oSPolicyAssignmentReportName).instance;
    }
    /**
     * Parse the assignment from OSPolicyAssignmentReport resource.
     *
     * @param {string} oSPolicyAssignmentReportName
     *   A fully-qualified path representing OSPolicyAssignmentReport resource.
     * @returns {string} A string representing the assignment.
     */
    matchAssignmentFromOSPolicyAssignmentReportName(oSPolicyAssignmentReportName) {
        return this.pathTemplates.oSPolicyAssignmentReportPathTemplate.match(oSPolicyAssignmentReportName).assignment;
    }
    /**
     * Return a fully-qualified patchDeployment resource name string.
     *
     * @param {string} project
     * @param {string} patch_deployment
     * @returns {string} Resource name string.
     */
    patchDeploymentPath(project, patchDeployment) {
        return this.pathTemplates.patchDeploymentPathTemplate.render({
            project: project,
            patch_deployment: patchDeployment,
        });
    }
    /**
     * Parse the project from PatchDeployment resource.
     *
     * @param {string} patchDeploymentName
     *   A fully-qualified path representing PatchDeployment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPatchDeploymentName(patchDeploymentName) {
        return this.pathTemplates.patchDeploymentPathTemplate.match(patchDeploymentName).project;
    }
    /**
     * Parse the patch_deployment from PatchDeployment resource.
     *
     * @param {string} patchDeploymentName
     *   A fully-qualified path representing PatchDeployment resource.
     * @returns {string} A string representing the patch_deployment.
     */
    matchPatchDeploymentFromPatchDeploymentName(patchDeploymentName) {
        return this.pathTemplates.patchDeploymentPathTemplate.match(patchDeploymentName).patch_deployment;
    }
    /**
     * Return a fully-qualified patchJob resource name string.
     *
     * @param {string} project
     * @param {string} patch_job
     * @returns {string} Resource name string.
     */
    patchJobPath(project, patchJob) {
        return this.pathTemplates.patchJobPathTemplate.render({
            project: project,
            patch_job: patchJob,
        });
    }
    /**
     * Parse the project from PatchJob resource.
     *
     * @param {string} patchJobName
     *   A fully-qualified path representing PatchJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPatchJobName(patchJobName) {
        return this.pathTemplates.patchJobPathTemplate.match(patchJobName).project;
    }
    /**
     * Parse the patch_job from PatchJob resource.
     *
     * @param {string} patchJobName
     *   A fully-qualified path representing PatchJob resource.
     * @returns {string} A string representing the patch_job.
     */
    matchPatchJobFromPatchJobName(patchJobName) {
        return this.pathTemplates.patchJobPathTemplate.match(patchJobName)
            .patch_job;
    }
    /**
     * Return a fully-qualified vulnerabilityReport resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} instance
     * @returns {string} Resource name string.
     */
    vulnerabilityReportPath(project, location, instance) {
        return this.pathTemplates.vulnerabilityReportPathTemplate.render({
            project: project,
            location: location,
            instance: instance,
        });
    }
    /**
     * Parse the project from VulnerabilityReport resource.
     *
     * @param {string} vulnerabilityReportName
     *   A fully-qualified path representing VulnerabilityReport resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromVulnerabilityReportName(vulnerabilityReportName) {
        return this.pathTemplates.vulnerabilityReportPathTemplate.match(vulnerabilityReportName).project;
    }
    /**
     * Parse the location from VulnerabilityReport resource.
     *
     * @param {string} vulnerabilityReportName
     *   A fully-qualified path representing VulnerabilityReport resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromVulnerabilityReportName(vulnerabilityReportName) {
        return this.pathTemplates.vulnerabilityReportPathTemplate.match(vulnerabilityReportName).location;
    }
    /**
     * Parse the instance from VulnerabilityReport resource.
     *
     * @param {string} vulnerabilityReportName
     *   A fully-qualified path representing VulnerabilityReport resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromVulnerabilityReportName(vulnerabilityReportName) {
        return this.pathTemplates.vulnerabilityReportPathTemplate.match(vulnerabilityReportName).instance;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.osConfigServiceStub && !this._terminated) {
            return this.osConfigServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    }
}
exports.OsConfigServiceClient = OsConfigServiceClient;
//# sourceMappingURL=os_config_service_client.js.map