/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Configures and manages Filestore resources.
 *
 *  Filestore Manager v1.
 *
 *  The `file.googleapis.com` service implements the Filestore API and
 *  defines the following resource model for managing instances:
 *  * The service works with a collection of cloud projects, named: `/projects/*`
 *  * Each project has a collection of available locations, named: `/locations/*`
 *  * Each location has a collection of instances and backups, named:
 *  `/instances/*` and `/backups/*` respectively.
 *  * As such, Filestore instances are resources of the form:
 *    `/projects/{project_number}/locations/{location_id}/instances/{instance_id}`
 *    and backups are resources of the form:
 *    `/projects/{project_number}/locations/{location_id}/backup/{backup_id}`
 *
 *  Note that location_id must be a Google Cloud `zone` for instances, but
 *  a Google Cloud `region` for backups; for example:
 *  * `projects/12345/locations/us-central1-c/instances/my-filestore`
 *  * `projects/12345/locations/us-central1/backups/my-backup`
 * @class
 * @memberof v1
 */
export declare class CloudFilestoreManagerClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    cloudFilestoreManagerStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of CloudFilestoreManagerClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new CloudFilestoreManagerClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets the details of a specific instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The instance resource name, in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.filestore.v1.Instance|Instance}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.get_instance.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_GetInstance_async
     */
    getInstance(request?: protos.google.cloud.filestore.v1.IGetInstanceRequest, options?: CallOptions): Promise<[
        protos.google.cloud.filestore.v1.IInstance,
        protos.google.cloud.filestore.v1.IGetInstanceRequest | undefined,
        {} | undefined
    ]>;
    getInstance(request: protos.google.cloud.filestore.v1.IGetInstanceRequest, options: CallOptions, callback: Callback<protos.google.cloud.filestore.v1.IInstance, protos.google.cloud.filestore.v1.IGetInstanceRequest | null | undefined, {} | null | undefined>): void;
    getInstance(request: protos.google.cloud.filestore.v1.IGetInstanceRequest, callback: Callback<protos.google.cloud.filestore.v1.IInstance, protos.google.cloud.filestore.v1.IGetInstanceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the details of a specific snapshot.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The snapshot resource name, in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}/snapshots/{snapshot_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.filestore.v1.Snapshot|Snapshot}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.get_snapshot.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_GetSnapshot_async
     */
    getSnapshot(request?: protos.google.cloud.filestore.v1.IGetSnapshotRequest, options?: CallOptions): Promise<[
        protos.google.cloud.filestore.v1.ISnapshot,
        protos.google.cloud.filestore.v1.IGetSnapshotRequest | undefined,
        {} | undefined
    ]>;
    getSnapshot(request: protos.google.cloud.filestore.v1.IGetSnapshotRequest, options: CallOptions, callback: Callback<protos.google.cloud.filestore.v1.ISnapshot, protos.google.cloud.filestore.v1.IGetSnapshotRequest | null | undefined, {} | null | undefined>): void;
    getSnapshot(request: protos.google.cloud.filestore.v1.IGetSnapshotRequest, callback: Callback<protos.google.cloud.filestore.v1.ISnapshot, protos.google.cloud.filestore.v1.IGetSnapshotRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the details of a specific backup.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The backup resource name, in the format
     *   `projects/{project_number}/locations/{location}/backups/{backup_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.filestore.v1.Backup|Backup}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.get_backup.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_GetBackup_async
     */
    getBackup(request?: protos.google.cloud.filestore.v1.IGetBackupRequest, options?: CallOptions): Promise<[
        protos.google.cloud.filestore.v1.IBackup,
        protos.google.cloud.filestore.v1.IGetBackupRequest | undefined,
        {} | undefined
    ]>;
    getBackup(request: protos.google.cloud.filestore.v1.IGetBackupRequest, options: CallOptions, callback: Callback<protos.google.cloud.filestore.v1.IBackup, protos.google.cloud.filestore.v1.IGetBackupRequest | null | undefined, {} | null | undefined>): void;
    getBackup(request: protos.google.cloud.filestore.v1.IGetBackupRequest, callback: Callback<protos.google.cloud.filestore.v1.IBackup, protos.google.cloud.filestore.v1.IGetBackupRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates an instance.
     * When creating from a backup, the capacity of the new instance needs to be
     * equal to or larger than the capacity of the backup (and also equal to or
     * larger than the minimum capacity of the tier).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance's project and location, in the format
     *   `projects/{project_id}/locations/{location}`. In Filestore,
     *   locations map to Google Cloud zones, for example **us-west1-b**.
     * @param {string} request.instanceId
     *   Required. The name of the instance to create.
     *   The name must be unique for the specified project and location.
     * @param {google.cloud.filestore.v1.Instance} request.instance
     *   Required. An {@link protos.google.cloud.filestore.v1.Instance|instance resource}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.create_instance.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_CreateInstance_async
     */
    createInstance(request?: protos.google.cloud.filestore.v1.ICreateInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1.IInstance, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createInstance(request: protos.google.cloud.filestore.v1.ICreateInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1.IInstance, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createInstance(request: protos.google.cloud.filestore.v1.ICreateInstanceRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1.IInstance, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.create_instance.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_CreateInstance_async
     */
    checkCreateInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1.Instance, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Updates the settings of a specific instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Mask of fields to update.  At least one path must be supplied in this
     *   field.  The elements of the repeated paths field may only include these
     *   fields:
     *
     *   * "description"
     *   * "file_shares"
     *   * "labels"
     * @param {google.cloud.filestore.v1.Instance} request.instance
     *   Only fields specified in update_mask are updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.update_instance.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_UpdateInstance_async
     */
    updateInstance(request?: protos.google.cloud.filestore.v1.IUpdateInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1.IInstance, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateInstance(request: protos.google.cloud.filestore.v1.IUpdateInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1.IInstance, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateInstance(request: protos.google.cloud.filestore.v1.IUpdateInstanceRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1.IInstance, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.update_instance.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_UpdateInstance_async
     */
    checkUpdateInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1.Instance, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Restores an existing instance's file share from a backup.
     *
     * The capacity of the instance needs to be equal to or larger than the
     * capacity of the backup (and also equal to or larger than the minimum
     * capacity of the tier).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the instance, in the format
     *   `projects/{project_number}/locations/{location_id}/instances/{instance_id}`.
     * @param {string} request.fileShare
     *   Required. Name of the file share in the Filestore instance that the backup
     *   is being restored to.
     * @param {string} request.sourceBackup
     *   The resource name of the backup, in the format
     *   `projects/{project_number}/locations/{location_id}/backups/{backup_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.restore_instance.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_RestoreInstance_async
     */
    restoreInstance(request?: protos.google.cloud.filestore.v1.IRestoreInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1.IInstance, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    restoreInstance(request: protos.google.cloud.filestore.v1.IRestoreInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1.IInstance, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    restoreInstance(request: protos.google.cloud.filestore.v1.IRestoreInstanceRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1.IInstance, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `restoreInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.restore_instance.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_RestoreInstance_async
     */
    checkRestoreInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1.Instance, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Deletes an instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The instance resource name, in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {boolean} request.force
     *   If set to true, all snapshots of the instance will also be deleted.
     *   (Otherwise, the request will only work if the instance has no snapshots.)
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.delete_instance.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_DeleteInstance_async
     */
    deleteInstance(request?: protos.google.cloud.filestore.v1.IDeleteInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteInstance(request: protos.google.cloud.filestore.v1.IDeleteInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteInstance(request: protos.google.cloud.filestore.v1.IDeleteInstanceRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.delete_instance.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_DeleteInstance_async
     */
    checkDeleteInstanceProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Creates a snapshot.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The Filestore Instance to create the snapshots of, in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {string} request.snapshotId
     *   Required. The ID to use for the snapshot.
     *   The ID must be unique within the specified instance.
     *
     *   This value must start with a lowercase letter followed by up to 62
     *   lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
     * @param {google.cloud.filestore.v1.Snapshot} request.snapshot
     *   Required. A snapshot resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.create_snapshot.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_CreateSnapshot_async
     */
    createSnapshot(request?: protos.google.cloud.filestore.v1.ICreateSnapshotRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1.ISnapshot, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createSnapshot(request: protos.google.cloud.filestore.v1.ICreateSnapshotRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1.ISnapshot, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createSnapshot(request: protos.google.cloud.filestore.v1.ICreateSnapshotRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1.ISnapshot, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createSnapshot()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.create_snapshot.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_CreateSnapshot_async
     */
    checkCreateSnapshotProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1.Snapshot, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Deletes a snapshot.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The snapshot resource name, in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}/snapshots/{snapshot_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.delete_snapshot.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_DeleteSnapshot_async
     */
    deleteSnapshot(request?: protos.google.cloud.filestore.v1.IDeleteSnapshotRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteSnapshot(request: protos.google.cloud.filestore.v1.IDeleteSnapshotRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteSnapshot(request: protos.google.cloud.filestore.v1.IDeleteSnapshotRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteSnapshot()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.delete_snapshot.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_DeleteSnapshot_async
     */
    checkDeleteSnapshotProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Updates the settings of a specific snapshot.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update. At least one path must be supplied in
     *   this field.
     * @param {google.cloud.filestore.v1.Snapshot} request.snapshot
     *   Required. A snapshot resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.update_snapshot.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_UpdateSnapshot_async
     */
    updateSnapshot(request?: protos.google.cloud.filestore.v1.IUpdateSnapshotRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1.ISnapshot, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateSnapshot(request: protos.google.cloud.filestore.v1.IUpdateSnapshotRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1.ISnapshot, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateSnapshot(request: protos.google.cloud.filestore.v1.IUpdateSnapshotRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1.ISnapshot, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateSnapshot()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.update_snapshot.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_UpdateSnapshot_async
     */
    checkUpdateSnapshotProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1.Snapshot, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Creates a backup.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The backup's project and location, in the format
     *   `projects/{project_number}/locations/{location}`. In Filestore,
     *   backup locations map to Google Cloud regions, for example **us-west1**.
     * @param {google.cloud.filestore.v1.Backup} request.backup
     *   Required. A {@link protos.google.cloud.filestore.v1.Backup|backup resource}
     * @param {string} request.backupId
     *   Required. The ID to use for the backup.
     *   The ID must be unique within the specified project and location.
     *
     *   This value must start with a lowercase letter followed by up to 62
     *   lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
     *   Values that do not match this pattern will trigger an INVALID_ARGUMENT
     *   error.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.create_backup.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_CreateBackup_async
     */
    createBackup(request?: protos.google.cloud.filestore.v1.ICreateBackupRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1.IBackup, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createBackup(request: protos.google.cloud.filestore.v1.ICreateBackupRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1.IBackup, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createBackup(request: protos.google.cloud.filestore.v1.ICreateBackupRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1.IBackup, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createBackup()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.create_backup.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_CreateBackup_async
     */
    checkCreateBackupProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1.Backup, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Deletes a backup.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The backup resource name, in the format
     *   `projects/{project_number}/locations/{location}/backups/{backup_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.delete_backup.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_DeleteBackup_async
     */
    deleteBackup(request?: protos.google.cloud.filestore.v1.IDeleteBackupRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteBackup(request: protos.google.cloud.filestore.v1.IDeleteBackupRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteBackup(request: protos.google.cloud.filestore.v1.IDeleteBackupRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteBackup()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.delete_backup.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_DeleteBackup_async
     */
    checkDeleteBackupProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Updates the settings of a specific backup.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.filestore.v1.Backup} request.backup
     *   Required. A {@link protos.google.cloud.filestore.v1.Backup|backup resource}
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update.  At least one path must be supplied in
     *   this field.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.update_backup.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_UpdateBackup_async
     */
    updateBackup(request?: protos.google.cloud.filestore.v1.IUpdateBackupRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1.IBackup, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateBackup(request: protos.google.cloud.filestore.v1.IUpdateBackupRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1.IBackup, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateBackup(request: protos.google.cloud.filestore.v1.IUpdateBackupRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1.IBackup, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateBackup()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.update_backup.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_UpdateBackup_async
     */
    checkUpdateBackupProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1.Backup, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Lists all instances in a project for either a specified location
     * or for all locations.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve instance
     *   information, in the format `projects/{project_id}/locations/{location}`. In
     *   Cloud Filestore, locations map to Google Cloud zones, for example
     *   **us-west1-b**. To retrieve instance information for all locations, use "-"
     *   for the
     *   `{location}` value.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.filestore.v1.Instance|Instance}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listInstancesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listInstances(request?: protos.google.cloud.filestore.v1.IListInstancesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.filestore.v1.IInstance[],
        protos.google.cloud.filestore.v1.IListInstancesRequest | null,
        protos.google.cloud.filestore.v1.IListInstancesResponse
    ]>;
    listInstances(request: protos.google.cloud.filestore.v1.IListInstancesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.filestore.v1.IListInstancesRequest, protos.google.cloud.filestore.v1.IListInstancesResponse | null | undefined, protos.google.cloud.filestore.v1.IInstance>): void;
    listInstances(request: protos.google.cloud.filestore.v1.IListInstancesRequest, callback: PaginationCallback<protos.google.cloud.filestore.v1.IListInstancesRequest, protos.google.cloud.filestore.v1.IListInstancesResponse | null | undefined, protos.google.cloud.filestore.v1.IInstance>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve instance
     *   information, in the format `projects/{project_id}/locations/{location}`. In
     *   Cloud Filestore, locations map to Google Cloud zones, for example
     *   **us-west1-b**. To retrieve instance information for all locations, use "-"
     *   for the
     *   `{location}` value.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.filestore.v1.Instance|Instance} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listInstancesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listInstancesStream(request?: protos.google.cloud.filestore.v1.IListInstancesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listInstances`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve instance
     *   information, in the format `projects/{project_id}/locations/{location}`. In
     *   Cloud Filestore, locations map to Google Cloud zones, for example
     *   **us-west1-b**. To retrieve instance information for all locations, use "-"
     *   for the
     *   `{location}` value.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.filestore.v1.Instance|Instance}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.list_instances.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_ListInstances_async
     */
    listInstancesAsync(request?: protos.google.cloud.filestore.v1.IListInstancesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.filestore.v1.IInstance>;
    /**
     * Lists all snapshots in a project for either a specified location
     * or for all locations.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance for which to retrieve snapshot information,
     *   in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.filestore.v1.Snapshot|Snapshot}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listSnapshotsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSnapshots(request?: protos.google.cloud.filestore.v1.IListSnapshotsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.filestore.v1.ISnapshot[],
        protos.google.cloud.filestore.v1.IListSnapshotsRequest | null,
        protos.google.cloud.filestore.v1.IListSnapshotsResponse
    ]>;
    listSnapshots(request: protos.google.cloud.filestore.v1.IListSnapshotsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.filestore.v1.IListSnapshotsRequest, protos.google.cloud.filestore.v1.IListSnapshotsResponse | null | undefined, protos.google.cloud.filestore.v1.ISnapshot>): void;
    listSnapshots(request: protos.google.cloud.filestore.v1.IListSnapshotsRequest, callback: PaginationCallback<protos.google.cloud.filestore.v1.IListSnapshotsRequest, protos.google.cloud.filestore.v1.IListSnapshotsResponse | null | undefined, protos.google.cloud.filestore.v1.ISnapshot>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance for which to retrieve snapshot information,
     *   in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.filestore.v1.Snapshot|Snapshot} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listSnapshotsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSnapshotsStream(request?: protos.google.cloud.filestore.v1.IListSnapshotsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listSnapshots`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance for which to retrieve snapshot information,
     *   in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.filestore.v1.Snapshot|Snapshot}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.list_snapshots.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_ListSnapshots_async
     */
    listSnapshotsAsync(request?: protos.google.cloud.filestore.v1.IListSnapshotsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.filestore.v1.ISnapshot>;
    /**
     * Lists all backups in a project for either a specified location or for all
     * locations.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve backup
     *   information, in the format
     *   `projects/{project_number}/locations/{location}`. In Filestore, backup
     *   locations map to Google Cloud regions, for example **us-west1**. To
     *   retrieve backup information for all locations, use "-" for the
     *   `{location}` value.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.filestore.v1.Backup|Backup}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listBackupsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listBackups(request?: protos.google.cloud.filestore.v1.IListBackupsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.filestore.v1.IBackup[],
        protos.google.cloud.filestore.v1.IListBackupsRequest | null,
        protos.google.cloud.filestore.v1.IListBackupsResponse
    ]>;
    listBackups(request: protos.google.cloud.filestore.v1.IListBackupsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.filestore.v1.IListBackupsRequest, protos.google.cloud.filestore.v1.IListBackupsResponse | null | undefined, protos.google.cloud.filestore.v1.IBackup>): void;
    listBackups(request: protos.google.cloud.filestore.v1.IListBackupsRequest, callback: PaginationCallback<protos.google.cloud.filestore.v1.IListBackupsRequest, protos.google.cloud.filestore.v1.IListBackupsResponse | null | undefined, protos.google.cloud.filestore.v1.IBackup>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve backup
     *   information, in the format
     *   `projects/{project_number}/locations/{location}`. In Filestore, backup
     *   locations map to Google Cloud regions, for example **us-west1**. To
     *   retrieve backup information for all locations, use "-" for the
     *   `{location}` value.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.filestore.v1.Backup|Backup} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listBackupsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listBackupsStream(request?: protos.google.cloud.filestore.v1.IListBackupsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listBackups`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve backup
     *   information, in the format
     *   `projects/{project_number}/locations/{location}`. In Filestore, backup
     *   locations map to Google Cloud regions, for example **us-west1**. To
     *   retrieve backup information for all locations, use "-" for the
     *   `{location}` value.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.filestore.v1.Backup|Backup}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cloud_filestore_manager.list_backups.js</caption>
     * region_tag:file_v1_generated_CloudFilestoreManager_ListBackups_async
     */
    listBackupsAsync(request?: protos.google.cloud.filestore.v1.IListBackupsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.filestore.v1.IBackup>;
    /**
     * Return a fully-qualified backup resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} backup
     * @returns {string} Resource name string.
     */
    backupPath(project: string, location: string, backup: string): string;
    /**
     * Parse the project from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBackupName(backupName: string): string | number;
    /**
     * Parse the location from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromBackupName(backupName: string): string | number;
    /**
     * Parse the backup from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the backup.
     */
    matchBackupFromBackupName(backupName: string): string | number;
    /**
     * Return a fully-qualified instance resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} instance
     * @returns {string} Resource name string.
     */
    instancePath(project: string, location: string, instance: string): string;
    /**
     * Parse the project from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromInstanceName(instanceName: string): string | number;
    /**
     * Parse the location from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromInstanceName(instanceName: string): string | number;
    /**
     * Parse the instance from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromInstanceName(instanceName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified snapshot resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} instance
     * @param {string} snapshot
     * @returns {string} Resource name string.
     */
    snapshotPath(project: string, location: string, instance: string, snapshot: string): string;
    /**
     * Parse the project from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSnapshotName(snapshotName: string): string | number;
    /**
     * Parse the location from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSnapshotName(snapshotName: string): string | number;
    /**
     * Parse the instance from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromSnapshotName(snapshotName: string): string | number;
    /**
     * Parse the snapshot from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the snapshot.
     */
    matchSnapshotFromSnapshotName(snapshotName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
