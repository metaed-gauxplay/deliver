/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Configures and manages Filestore resources.
 *
 *  Filestore Manager v1beta1.
 *
 *  The `file.googleapis.com` service implements the Filestore API and
 *  defines the following model for managing resources:
 *  * The service works with a collection of cloud projects, named: `/projects/*`
 *  * Each project has a collection of available locations, named: `/locations/*`
 *  * Each location has a collection of instances and backups, named:
 *  `/instances/*` and `/backups/*` respectively.
 *  * As such, Filestore instances are resources of the form:
 *    `/projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 *    backups are resources of the form:
 *    `/projects/{project_id}/locations/{location_id}/backup/{backup_id}`
 *
 *  Note that location_id can represent a Google Cloud `zone` or `region`
 *  depending on the resource. for example: A zonal Filestore instance:
 *  * `projects/my-project/locations/us-central1-c/instances/my-basic-tier-filer`
 *  A regional Filestore instance:
 *  * `projects/my-project/locations/us-central1/instances/my-enterprise-filer`
 * @class
 * @memberof v1beta1
 */
export declare class CloudFilestoreManagerClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    cloudFilestoreManagerStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of CloudFilestoreManagerClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new CloudFilestoreManagerClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets the details of a specific instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The instance resource name, in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.filestore.v1beta1.Instance|Instance}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.get_instance.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_GetInstance_async
     */
    getInstance(request?: protos.google.cloud.filestore.v1beta1.IGetInstanceRequest, options?: CallOptions): Promise<[
        protos.google.cloud.filestore.v1beta1.IInstance,
        protos.google.cloud.filestore.v1beta1.IGetInstanceRequest | undefined,
        {} | undefined
    ]>;
    getInstance(request: protos.google.cloud.filestore.v1beta1.IGetInstanceRequest, options: CallOptions, callback: Callback<protos.google.cloud.filestore.v1beta1.IInstance, protos.google.cloud.filestore.v1beta1.IGetInstanceRequest | null | undefined, {} | null | undefined>): void;
    getInstance(request: protos.google.cloud.filestore.v1beta1.IGetInstanceRequest, callback: Callback<protos.google.cloud.filestore.v1beta1.IInstance, protos.google.cloud.filestore.v1beta1.IGetInstanceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the details of a specific snapshot.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The snapshot resource name, in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}/snapshots/{snapshot_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.filestore.v1beta1.Snapshot|Snapshot}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.get_snapshot.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_GetSnapshot_async
     */
    getSnapshot(request?: protos.google.cloud.filestore.v1beta1.IGetSnapshotRequest, options?: CallOptions): Promise<[
        protos.google.cloud.filestore.v1beta1.ISnapshot,
        protos.google.cloud.filestore.v1beta1.IGetSnapshotRequest | undefined,
        {} | undefined
    ]>;
    getSnapshot(request: protos.google.cloud.filestore.v1beta1.IGetSnapshotRequest, options: CallOptions, callback: Callback<protos.google.cloud.filestore.v1beta1.ISnapshot, protos.google.cloud.filestore.v1beta1.IGetSnapshotRequest | null | undefined, {} | null | undefined>): void;
    getSnapshot(request: protos.google.cloud.filestore.v1beta1.IGetSnapshotRequest, callback: Callback<protos.google.cloud.filestore.v1beta1.ISnapshot, protos.google.cloud.filestore.v1beta1.IGetSnapshotRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the details of a specific backup.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The backup resource name, in the format
     *   `projects/{project_id}/locations/{location}/backups/{backup_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.filestore.v1beta1.Backup|Backup}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.get_backup.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_GetBackup_async
     */
    getBackup(request?: protos.google.cloud.filestore.v1beta1.IGetBackupRequest, options?: CallOptions): Promise<[
        protos.google.cloud.filestore.v1beta1.IBackup,
        protos.google.cloud.filestore.v1beta1.IGetBackupRequest | undefined,
        {} | undefined
    ]>;
    getBackup(request: protos.google.cloud.filestore.v1beta1.IGetBackupRequest, options: CallOptions, callback: Callback<protos.google.cloud.filestore.v1beta1.IBackup, protos.google.cloud.filestore.v1beta1.IGetBackupRequest | null | undefined, {} | null | undefined>): void;
    getBackup(request: protos.google.cloud.filestore.v1beta1.IGetBackupRequest, callback: Callback<protos.google.cloud.filestore.v1beta1.IBackup, protos.google.cloud.filestore.v1beta1.IGetBackupRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the details of a specific share.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The share resource name, in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}/shares/{share_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.filestore.v1beta1.Share|Share}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.get_share.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_GetShare_async
     */
    getShare(request?: protos.google.cloud.filestore.v1beta1.IGetShareRequest, options?: CallOptions): Promise<[
        protos.google.cloud.filestore.v1beta1.IShare,
        protos.google.cloud.filestore.v1beta1.IGetShareRequest | undefined,
        {} | undefined
    ]>;
    getShare(request: protos.google.cloud.filestore.v1beta1.IGetShareRequest, options: CallOptions, callback: Callback<protos.google.cloud.filestore.v1beta1.IShare, protos.google.cloud.filestore.v1beta1.IGetShareRequest | null | undefined, {} | null | undefined>): void;
    getShare(request: protos.google.cloud.filestore.v1beta1.IGetShareRequest, callback: Callback<protos.google.cloud.filestore.v1beta1.IShare, protos.google.cloud.filestore.v1beta1.IGetShareRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates an instance.
     * When creating from a backup, the capacity of the new instance needs to be
     * equal to or larger than the capacity of the backup (and also equal to or
     * larger than the minimum capacity of the tier).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance's project and location, in the format
     *   `projects/{project_id}/locations/{location}`. In Filestore,
     *   locations map to Google Cloud zones, for example **us-west1-b**.
     * @param {string} request.instanceId
     *   Required. The ID of the instance to create.
     *   The ID must be unique within the specified project and location.
     *
     *   This value must start with a lowercase letter followed by up to 62
     *   lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
     * @param {google.cloud.filestore.v1beta1.Instance} request.instance
     *   Required. An {@link protos.google.cloud.filestore.v1beta1.Instance|instance resource}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.create_instance.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_CreateInstance_async
     */
    createInstance(request?: protos.google.cloud.filestore.v1beta1.ICreateInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1beta1.IInstance, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createInstance(request: protos.google.cloud.filestore.v1beta1.ICreateInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IInstance, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createInstance(request: protos.google.cloud.filestore.v1beta1.ICreateInstanceRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IInstance, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.create_instance.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_CreateInstance_async
     */
    checkCreateInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1beta1.Instance, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Updates the settings of a specific instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update.  At least one path must be supplied in
     *   this field.  The elements of the repeated paths field may only include
     *   these fields:
     *
     *   * "description"
     *   * "file_shares"
     *   * "labels"
     * @param {google.cloud.filestore.v1beta1.Instance} request.instance
     *   Required. Only fields specified in update_mask are updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.update_instance.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_UpdateInstance_async
     */
    updateInstance(request?: protos.google.cloud.filestore.v1beta1.IUpdateInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1beta1.IInstance, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateInstance(request: protos.google.cloud.filestore.v1beta1.IUpdateInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IInstance, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateInstance(request: protos.google.cloud.filestore.v1beta1.IUpdateInstanceRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IInstance, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.update_instance.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_UpdateInstance_async
     */
    checkUpdateInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1beta1.Instance, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Restores an existing instance's file share from a backup.
     *
     * The capacity of the instance needs to be equal to or larger than the
     * capacity of the backup (and also equal to or larger than the minimum
     * capacity of the tier).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the instance, in the format
     *   `projects/{project_id}/locations/{location_id}/instances/{instance_id}`.
     * @param {string} request.fileShare
     *   Required. Name of the file share in the Filestore instance that the backup
     *   is being restored to.
     * @param {string} request.sourceSnapshot
     *   The resource name of the snapshot, in the format
     *   `projects/{project_id}/locations/{location_id}/snapshots/{snapshot_id}`.
     * @param {string} request.sourceBackup
     *   The resource name of the backup, in the format
     *   `projects/{project_id}/locations/{location_id}/backups/{backup_id}`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.restore_instance.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_RestoreInstance_async
     */
    restoreInstance(request?: protos.google.cloud.filestore.v1beta1.IRestoreInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1beta1.IInstance, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    restoreInstance(request: protos.google.cloud.filestore.v1beta1.IRestoreInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IInstance, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    restoreInstance(request: protos.google.cloud.filestore.v1beta1.IRestoreInstanceRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IInstance, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `restoreInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.restore_instance.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_RestoreInstance_async
     */
    checkRestoreInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1beta1.Instance, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Revert an existing instance's file system to a specified snapshot.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required.
     *   projects/{project_id}/locations/{location_id}/instances/{instance_id}. The
     *   resource name of the instance, in the format
     * @param {string} request.targetSnapshotId
     *   Required. The snapshot resource ID, in the format 'my-snapshot', where the
     *   specified ID is the {snapshot_id} of the fully qualified name like
     *   projects/{project_id}/locations/{location_id}/instances/{instance_id}/snapshots/{snapshot_id}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.revert_instance.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_RevertInstance_async
     */
    revertInstance(request?: protos.google.cloud.filestore.v1beta1.IRevertInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1beta1.IInstance, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    revertInstance(request: protos.google.cloud.filestore.v1beta1.IRevertInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IInstance, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    revertInstance(request: protos.google.cloud.filestore.v1beta1.IRevertInstanceRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IInstance, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `revertInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.revert_instance.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_RevertInstance_async
     */
    checkRevertInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1beta1.Instance, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Deletes an instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The instance resource name, in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {boolean} request.force
     *   If set to true, any snapshots of the instance will also be deleted.
     *   (Otherwise, the request will only work if the instance has no snapshots.)
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.delete_instance.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_DeleteInstance_async
     */
    deleteInstance(request?: protos.google.cloud.filestore.v1beta1.IDeleteInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteInstance(request: protos.google.cloud.filestore.v1beta1.IDeleteInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteInstance(request: protos.google.cloud.filestore.v1beta1.IDeleteInstanceRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.delete_instance.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_DeleteInstance_async
     */
    checkDeleteInstanceProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Creates a snapshot.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The Filestore Instance to create the snapshots of, in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {string} request.snapshotId
     *   Required. The ID to use for the snapshot.
     *   The ID must be unique within the specified instance.
     *
     *   This value must start with a lowercase letter followed by up to 62
     *   lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
     * @param {google.cloud.filestore.v1beta1.Snapshot} request.snapshot
     *   Required. A snapshot resource
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.create_snapshot.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_CreateSnapshot_async
     */
    createSnapshot(request?: protos.google.cloud.filestore.v1beta1.ICreateSnapshotRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1beta1.ISnapshot, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createSnapshot(request: protos.google.cloud.filestore.v1beta1.ICreateSnapshotRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.ISnapshot, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createSnapshot(request: protos.google.cloud.filestore.v1beta1.ICreateSnapshotRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.ISnapshot, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createSnapshot()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.create_snapshot.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_CreateSnapshot_async
     */
    checkCreateSnapshotProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1beta1.Snapshot, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Deletes a snapshot.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The snapshot resource name, in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}/snapshots/{snapshot_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.delete_snapshot.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_DeleteSnapshot_async
     */
    deleteSnapshot(request?: protos.google.cloud.filestore.v1beta1.IDeleteSnapshotRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteSnapshot(request: protos.google.cloud.filestore.v1beta1.IDeleteSnapshotRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteSnapshot(request: protos.google.cloud.filestore.v1beta1.IDeleteSnapshotRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteSnapshot()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.delete_snapshot.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_DeleteSnapshot_async
     */
    checkDeleteSnapshotProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Updates the settings of a specific snapshot.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update.  At least one path must be supplied in
     *   this field.
     * @param {google.cloud.filestore.v1beta1.Snapshot} request.snapshot
     *   Required. A snapshot resource
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.update_snapshot.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_UpdateSnapshot_async
     */
    updateSnapshot(request?: protos.google.cloud.filestore.v1beta1.IUpdateSnapshotRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1beta1.ISnapshot, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateSnapshot(request: protos.google.cloud.filestore.v1beta1.IUpdateSnapshotRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.ISnapshot, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateSnapshot(request: protos.google.cloud.filestore.v1beta1.IUpdateSnapshotRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.ISnapshot, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateSnapshot()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.update_snapshot.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_UpdateSnapshot_async
     */
    checkUpdateSnapshotProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1beta1.Snapshot, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Creates a backup.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The backup's project and location, in the format
     *   `projects/{project_id}/locations/{location}`. In Filestore,
     *   backup locations map to Google Cloud regions, for example **us-west1**.
     * @param {google.cloud.filestore.v1beta1.Backup} request.backup
     *   Required. A {@link protos.google.cloud.filestore.v1beta1.Backup|backup resource}
     * @param {string} request.backupId
     *   Required. The ID to use for the backup.
     *   The ID must be unique within the specified project and location.
     *
     *   This value must start with a lowercase letter followed by up to 62
     *   lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.create_backup.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_CreateBackup_async
     */
    createBackup(request?: protos.google.cloud.filestore.v1beta1.ICreateBackupRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1beta1.IBackup, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createBackup(request: protos.google.cloud.filestore.v1beta1.ICreateBackupRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IBackup, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createBackup(request: protos.google.cloud.filestore.v1beta1.ICreateBackupRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IBackup, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createBackup()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.create_backup.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_CreateBackup_async
     */
    checkCreateBackupProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1beta1.Backup, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Deletes a backup.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The backup resource name, in the format
     *   `projects/{project_id}/locations/{location}/backups/{backup_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.delete_backup.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_DeleteBackup_async
     */
    deleteBackup(request?: protos.google.cloud.filestore.v1beta1.IDeleteBackupRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteBackup(request: protos.google.cloud.filestore.v1beta1.IDeleteBackupRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteBackup(request: protos.google.cloud.filestore.v1beta1.IDeleteBackupRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteBackup()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.delete_backup.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_DeleteBackup_async
     */
    checkDeleteBackupProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Updates the settings of a specific backup.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.filestore.v1beta1.Backup} request.backup
     *   Required. A {@link protos.google.cloud.filestore.v1beta1.Backup|backup resource}
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update.  At least one path must be supplied in
     *   this field.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.update_backup.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_UpdateBackup_async
     */
    updateBackup(request?: protos.google.cloud.filestore.v1beta1.IUpdateBackupRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1beta1.IBackup, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateBackup(request: protos.google.cloud.filestore.v1beta1.IUpdateBackupRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IBackup, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateBackup(request: protos.google.cloud.filestore.v1beta1.IUpdateBackupRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IBackup, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateBackup()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.update_backup.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_UpdateBackup_async
     */
    checkUpdateBackupProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1beta1.Backup, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Creates a share.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The Filestore Instance to create the share for, in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {string} request.shareId
     *   Required. The ID to use for the share.
     *   The ID must be unique within the specified instance.
     *
     *   This value must start with a lowercase letter followed by up to 62
     *   lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
     * @param {google.cloud.filestore.v1beta1.Share} request.share
     *   Required. A share resource
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.create_share.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_CreateShare_async
     */
    createShare(request?: protos.google.cloud.filestore.v1beta1.ICreateShareRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1beta1.IShare, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createShare(request: protos.google.cloud.filestore.v1beta1.ICreateShareRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IShare, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createShare(request: protos.google.cloud.filestore.v1beta1.ICreateShareRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IShare, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createShare()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.create_share.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_CreateShare_async
     */
    checkCreateShareProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1beta1.Share, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Deletes a share.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The share resource name, in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}/share/{share_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.delete_share.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_DeleteShare_async
     */
    deleteShare(request?: protos.google.cloud.filestore.v1beta1.IDeleteShareRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteShare(request: protos.google.cloud.filestore.v1beta1.IDeleteShareRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteShare(request: protos.google.cloud.filestore.v1beta1.IDeleteShareRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteShare()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.delete_share.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_DeleteShare_async
     */
    checkDeleteShareProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Updates the settings of a specific share.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.filestore.v1beta1.Share} request.share
     *   Required. A share resource.
     *   Only fields specified in update_mask are updated.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update. At least one path must be supplied in
     *   this field. The elements of the repeated paths field may only include these
     *   fields:
     *
     *   * "description"
     *   * "capacity_gb"
     *   * "labels"
     *   * "nfs_export_options"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.update_share.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_UpdateShare_async
     */
    updateShare(request?: protos.google.cloud.filestore.v1beta1.IUpdateShareRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.filestore.v1beta1.IShare, protos.google.cloud.common.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateShare(request: protos.google.cloud.filestore.v1beta1.IUpdateShareRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IShare, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateShare(request: protos.google.cloud.filestore.v1beta1.IUpdateShareRequest, callback: Callback<LROperation<protos.google.cloud.filestore.v1beta1.IShare, protos.google.cloud.common.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateShare()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.update_share.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_UpdateShare_async
     */
    checkUpdateShareProgress(name: string): Promise<LROperation<protos.google.cloud.filestore.v1beta1.Share, protos.google.cloud.common.OperationMetadata>>;
    /**
     * Lists all instances in a project for either a specified location
     * or for all locations.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve instance
     *   information, in the format `projects/{project_id}/locations/{location}`. In
     *   Cloud Filestore, locations map to Google Cloud zones, for example
     *   **us-west1-b**. To retrieve instance information for all locations, use "-"
     *   for the
     *   `{location}` value.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.filestore.v1beta1.Instance|Instance}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listInstancesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listInstances(request?: protos.google.cloud.filestore.v1beta1.IListInstancesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.filestore.v1beta1.IInstance[],
        protos.google.cloud.filestore.v1beta1.IListInstancesRequest | null,
        protos.google.cloud.filestore.v1beta1.IListInstancesResponse
    ]>;
    listInstances(request: protos.google.cloud.filestore.v1beta1.IListInstancesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.filestore.v1beta1.IListInstancesRequest, protos.google.cloud.filestore.v1beta1.IListInstancesResponse | null | undefined, protos.google.cloud.filestore.v1beta1.IInstance>): void;
    listInstances(request: protos.google.cloud.filestore.v1beta1.IListInstancesRequest, callback: PaginationCallback<protos.google.cloud.filestore.v1beta1.IListInstancesRequest, protos.google.cloud.filestore.v1beta1.IListInstancesResponse | null | undefined, protos.google.cloud.filestore.v1beta1.IInstance>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve instance
     *   information, in the format `projects/{project_id}/locations/{location}`. In
     *   Cloud Filestore, locations map to Google Cloud zones, for example
     *   **us-west1-b**. To retrieve instance information for all locations, use "-"
     *   for the
     *   `{location}` value.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.filestore.v1beta1.Instance|Instance} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listInstancesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listInstancesStream(request?: protos.google.cloud.filestore.v1beta1.IListInstancesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listInstances`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve instance
     *   information, in the format `projects/{project_id}/locations/{location}`. In
     *   Cloud Filestore, locations map to Google Cloud zones, for example
     *   **us-west1-b**. To retrieve instance information for all locations, use "-"
     *   for the
     *   `{location}` value.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.filestore.v1beta1.Instance|Instance}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.list_instances.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_ListInstances_async
     */
    listInstancesAsync(request?: protos.google.cloud.filestore.v1beta1.IListInstancesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.filestore.v1beta1.IInstance>;
    /**
     * Lists all snapshots in a project for either a specified location
     * or for all locations.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance for which to retrieve snapshot information,
     *   in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.filestore.v1beta1.Snapshot|Snapshot}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listSnapshotsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSnapshots(request?: protos.google.cloud.filestore.v1beta1.IListSnapshotsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.filestore.v1beta1.ISnapshot[],
        protos.google.cloud.filestore.v1beta1.IListSnapshotsRequest | null,
        protos.google.cloud.filestore.v1beta1.IListSnapshotsResponse
    ]>;
    listSnapshots(request: protos.google.cloud.filestore.v1beta1.IListSnapshotsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.filestore.v1beta1.IListSnapshotsRequest, protos.google.cloud.filestore.v1beta1.IListSnapshotsResponse | null | undefined, protos.google.cloud.filestore.v1beta1.ISnapshot>): void;
    listSnapshots(request: protos.google.cloud.filestore.v1beta1.IListSnapshotsRequest, callback: PaginationCallback<protos.google.cloud.filestore.v1beta1.IListSnapshotsRequest, protos.google.cloud.filestore.v1beta1.IListSnapshotsResponse | null | undefined, protos.google.cloud.filestore.v1beta1.ISnapshot>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance for which to retrieve snapshot information,
     *   in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.filestore.v1beta1.Snapshot|Snapshot} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listSnapshotsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSnapshotsStream(request?: protos.google.cloud.filestore.v1beta1.IListSnapshotsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listSnapshots`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance for which to retrieve snapshot information,
     *   in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.filestore.v1beta1.Snapshot|Snapshot}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.list_snapshots.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_ListSnapshots_async
     */
    listSnapshotsAsync(request?: protos.google.cloud.filestore.v1beta1.IListSnapshotsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.filestore.v1beta1.ISnapshot>;
    /**
     * Lists all backups in a project for either a specified location or for all
     * locations.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve backup
     *   information, in the format `projects/{project_id}/locations/{location}`. In
     *   Filestore, backup locations map to Google Cloud regions, for example
     *   **us-west1**. To retrieve backup information for all locations, use "-" for
     *   the
     *   `{location}` value.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.filestore.v1beta1.Backup|Backup}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listBackupsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listBackups(request?: protos.google.cloud.filestore.v1beta1.IListBackupsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.filestore.v1beta1.IBackup[],
        protos.google.cloud.filestore.v1beta1.IListBackupsRequest | null,
        protos.google.cloud.filestore.v1beta1.IListBackupsResponse
    ]>;
    listBackups(request: protos.google.cloud.filestore.v1beta1.IListBackupsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.filestore.v1beta1.IListBackupsRequest, protos.google.cloud.filestore.v1beta1.IListBackupsResponse | null | undefined, protos.google.cloud.filestore.v1beta1.IBackup>): void;
    listBackups(request: protos.google.cloud.filestore.v1beta1.IListBackupsRequest, callback: PaginationCallback<protos.google.cloud.filestore.v1beta1.IListBackupsRequest, protos.google.cloud.filestore.v1beta1.IListBackupsResponse | null | undefined, protos.google.cloud.filestore.v1beta1.IBackup>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve backup
     *   information, in the format `projects/{project_id}/locations/{location}`. In
     *   Filestore, backup locations map to Google Cloud regions, for example
     *   **us-west1**. To retrieve backup information for all locations, use "-" for
     *   the
     *   `{location}` value.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.filestore.v1beta1.Backup|Backup} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listBackupsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listBackupsStream(request?: protos.google.cloud.filestore.v1beta1.IListBackupsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listBackups`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location for which to retrieve backup
     *   information, in the format `projects/{project_id}/locations/{location}`. In
     *   Filestore, backup locations map to Google Cloud regions, for example
     *   **us-west1**. To retrieve backup information for all locations, use "-" for
     *   the
     *   `{location}` value.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.filestore.v1beta1.Backup|Backup}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.list_backups.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_ListBackups_async
     */
    listBackupsAsync(request?: protos.google.cloud.filestore.v1beta1.IListBackupsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.filestore.v1beta1.IBackup>;
    /**
     * Lists all shares for a specified instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance for which to retrieve share information,
     *   in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.filestore.v1beta1.Share|Share}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listSharesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listShares(request?: protos.google.cloud.filestore.v1beta1.IListSharesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.filestore.v1beta1.IShare[],
        protos.google.cloud.filestore.v1beta1.IListSharesRequest | null,
        protos.google.cloud.filestore.v1beta1.IListSharesResponse
    ]>;
    listShares(request: protos.google.cloud.filestore.v1beta1.IListSharesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.filestore.v1beta1.IListSharesRequest, protos.google.cloud.filestore.v1beta1.IListSharesResponse | null | undefined, protos.google.cloud.filestore.v1beta1.IShare>): void;
    listShares(request: protos.google.cloud.filestore.v1beta1.IListSharesRequest, callback: PaginationCallback<protos.google.cloud.filestore.v1beta1.IListSharesRequest, protos.google.cloud.filestore.v1beta1.IListSharesResponse | null | undefined, protos.google.cloud.filestore.v1beta1.IShare>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance for which to retrieve share information,
     *   in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.filestore.v1beta1.Share|Share} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listSharesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSharesStream(request?: protos.google.cloud.filestore.v1beta1.IListSharesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listShares`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The instance for which to retrieve share information,
     *   in the format
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value to use if there are additional
     *   results to retrieve for this list request.
     * @param {string} request.orderBy
     *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
     * @param {string} request.filter
     *   List filter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.filestore.v1beta1.Share|Share}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/cloud_filestore_manager.list_shares.js</caption>
     * region_tag:file_v1beta1_generated_CloudFilestoreManager_ListShares_async
     */
    listSharesAsync(request?: protos.google.cloud.filestore.v1beta1.IListSharesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.filestore.v1beta1.IShare>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified backup resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} backup
     * @returns {string} Resource name string.
     */
    backupPath(project: string, location: string, backup: string): string;
    /**
     * Parse the project from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBackupName(backupName: string): string | number;
    /**
     * Parse the location from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromBackupName(backupName: string): string | number;
    /**
     * Parse the backup from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the backup.
     */
    matchBackupFromBackupName(backupName: string): string | number;
    /**
     * Return a fully-qualified instance resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} instance
     * @returns {string} Resource name string.
     */
    instancePath(project: string, location: string, instance: string): string;
    /**
     * Parse the project from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromInstanceName(instanceName: string): string | number;
    /**
     * Parse the location from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromInstanceName(instanceName: string): string | number;
    /**
     * Parse the instance from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromInstanceName(instanceName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified share resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} instance
     * @param {string} share
     * @returns {string} Resource name string.
     */
    sharePath(project: string, location: string, instance: string, share: string): string;
    /**
     * Parse the project from Share resource.
     *
     * @param {string} shareName
     *   A fully-qualified path representing Share resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromShareName(shareName: string): string | number;
    /**
     * Parse the location from Share resource.
     *
     * @param {string} shareName
     *   A fully-qualified path representing Share resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromShareName(shareName: string): string | number;
    /**
     * Parse the instance from Share resource.
     *
     * @param {string} shareName
     *   A fully-qualified path representing Share resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromShareName(shareName: string): string | number;
    /**
     * Parse the share from Share resource.
     *
     * @param {string} shareName
     *   A fully-qualified path representing Share resource.
     * @returns {string} A string representing the share.
     */
    matchShareFromShareName(shareName: string): string | number;
    /**
     * Return a fully-qualified snapshot resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} instance
     * @param {string} snapshot
     * @returns {string} Resource name string.
     */
    snapshotPath(project: string, location: string, instance: string, snapshot: string): string;
    /**
     * Parse the project from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSnapshotName(snapshotName: string): string | number;
    /**
     * Parse the location from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSnapshotName(snapshotName: string): string | number;
    /**
     * Parse the instance from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromSnapshotName(snapshotName: string): string | number;
    /**
     * Parse the snapshot from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the snapshot.
     */
    matchSnapshotFromSnapshotName(snapshotName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
