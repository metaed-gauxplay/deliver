# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      - name: Install dependencies
        run: dart pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: dart test

        - name: Cache
  uses: actions/cache@v3.3.2
  with:
    # A list of files, directories, and wildcard patterns to cache and restore
    path: 
    # An explicit key for restoring and saving the cache
    key: 
    # An ordered list of keys to use for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
    restore-keys: # optional
    # The chunk size used to split up large files during upload, in bytes
    upload-chunk-size: # optional
    # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
    enableCrossOsArchive: # optional, default is false
    # Fail the workflow if cache entry is not found
    fail-on-cache-miss: # optional, default is false
    # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache
    lookup-only: # optional, default is false

    - name: Create Cloud Deploy Release
  # You may pin to the exact commit or the version.
  # uses: google-github-actions/create-cloud-deploy-release@3540e3dd0872cb591d86f832e341483b7c83d56a
  uses: google-github-actions/create-cloud-deploy-release@v0.1.2
  with:
    # The name of the release.
    name: 
    # The delivery pipeline to use for the release.
    delivery_pipeline: 
    # Region in which the delivery pipeline can be found.
    region: # optional
    # The location of the files to be included in the release.
    source: # optional
    # Path to a Skaffold output file containing the details of the image(s) to be released.
    build_artifacts: # optional
    # The images to be released.
    images: # optional
    # Prevent the release being deployed to the first target in the delivery pipeline.
    disable_initial_rollout: # optional
    # A directory in Google Cloud Storage to copy the source used for staging the build.
    gcs_source_staging_dir: # optional
    # Path of the skaffold file absolute or relative to the source directory.
    skaffold_file: # optional
    # Add additional annotations to the release.
    annotations: # optional
    # Add additional labels to the release.
    labels: # optional
    # Include a description of the release.
    description: # optional
    # Space separated list of other Cloud Deploy flags, examples can be found:
https://cloud.google.com/sdk/gcloud/reference/deploy/releases/create#FLAGS
Example: '--from-k8s-manifest=manifest.yaml --skaffold-version=skaffold_preview'
    flags: # optional
    # Version of the Cloud SDK to install. If unspecified or set to "latest",
the latest available gcloud SDK version for the target platform will be
installed. Example: "290.0.1".
    gcloud_version: # optional
    # Version of the Cloud SDK components to install and use. If unspecified, the latest
or released version will be used. This is the equivalent of running
'gcloud alpha run' or 'gcloud beta run'. Valid values are `alpha` or `beta`.
    gcloud_component: # optional
